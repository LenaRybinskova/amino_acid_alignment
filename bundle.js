/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},72:(e,t)=>{var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,S=n?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case u:case f:case g:case h:case s:return e;default:return t}}case o:return t}}}function w(e){return k(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=s,t.Element=r,t.ForwardRef=f,t.Fragment=a,t.Lazy=g,t.Memo=h,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return w(e)||k(e)===c},t.isConcurrentMode=w,t.isContextConsumer=function(e){return k(e)===u},t.isContextProvider=function(e){return k(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return k(e)===f},t.isFragment=function(e){return k(e)===a},t.isLazy=function(e){return k(e)===g},t.isMemo=function(e){return k(e)===h},t.isPortal=function(e){return k(e)===o},t.isProfiler=function(e){return k(e)===l},t.isStrictMode=function(e){return k(e)===i},t.isSuspense=function(e){return k(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===i||e===p||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===h||e.$$typeof===s||e.$$typeof===u||e.$$typeof===f||e.$$typeof===v||e.$$typeof===b||e.$$typeof===S||e.$$typeof===y)},t.typeOf=k},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},146:(e,t,n)=>{var r=n(404),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var o=p(n);o&&o!==m&&e(t,o,r)}var i=c(n);d&&(i=i.concat(d(n)));for(var l=s(t),h=s(n),g=0;g<i.length;++g){var y=i[g];if(!(a[y]||r&&r[y]||h&&h[y]||l&&l[y])){var v=f(n,y);try{u(t,y,v)}catch(e){}}}}return t}},159:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},221:(e,t,n)=>{var r=n(540);function o(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function a(){}var i={d:{f:a,r:function(){throw Error(o(522))},D:a,C:a,L:a,m:a,X:a,S:a,M:a},p:0,findDOMNode:null},l=Symbol.for("react.portal"),s=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function u(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=i,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(o(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:l,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=s.T,n=i.p;try{if(s.T=null,i.p=2,e)return e()}finally{s.T=t,i.p=n,i.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,i.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&i.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin),o="string"==typeof t.integrity?t.integrity:void 0,a="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?i.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:o,fetchPriority:a}):"script"===n&&i.d.X(e,{crossOrigin:r,integrity:o,fetchPriority:a,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=u(t.as,t.crossOrigin);i.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&i.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin);i.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=u(t.as,t.crossOrigin);i.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else i.d.m(e)},t.requestFormReset=function(e){i.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return s.H.useFormState(e,t,n)},t.useFormStatus=function(){return s.H.useHostTransitionStatus()},t.version="19.1.0"},247:(e,t,n)=>{var r=n(982),o=n(540),a=n(961);function i(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function l(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function s(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function u(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function c(e){if(s(e)!==e)throw Error(i(188))}function d(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=d(e)))return t;e=e.sibling}return null}var f=Object.assign,p=Symbol.for("react.element"),m=Symbol.for("react.transitional.element"),h=Symbol.for("react.portal"),g=Symbol.for("react.fragment"),y=Symbol.for("react.strict_mode"),v=Symbol.for("react.profiler"),b=Symbol.for("react.provider"),S=Symbol.for("react.consumer"),k=Symbol.for("react.context"),w=Symbol.for("react.forward_ref"),x=Symbol.for("react.suspense"),C=Symbol.for("react.suspense_list"),E=Symbol.for("react.memo"),A=Symbol.for("react.lazy");Symbol.for("react.scope");var P=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var T=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var _=Symbol.iterator;function R(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=_&&e[_]||e["@@iterator"])?e:null}var z=Symbol.for("react.client.reference");function O(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===z?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case g:return"Fragment";case v:return"Profiler";case y:return"StrictMode";case x:return"Suspense";case C:return"SuspenseList";case P:return"Activity"}if("object"==typeof e)switch(e.$$typeof){case h:return"Portal";case k:return(e.displayName||"Context")+".Provider";case S:return(e._context.displayName||"Context")+".Consumer";case w:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case E:return null!==(t=e.displayName||null)?t:O(e.type)||"Memo";case A:t=e._payload,e=e._init;try{return O(e(t))}catch(e){}}return null}var M=Array.isArray,N=o.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,F=a.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,$={pending:!1,data:null,method:null,action:null},L=[],j=-1;function I(e){return{current:e}}function D(e){0>j||(e.current=L[j],L[j]=null,j--)}function B(e,t){j++,L[j]=e.current,e.current=t}var V=I(null),W=I(null),H=I(null),U=I(null);function q(e,t){switch(B(H,t),B(W,e),B(V,null),t.nodeType){case 9:case 11:e=(e=t.documentElement)&&(e=e.namespaceURI)?od(e):0;break;default:if(e=t.tagName,t=t.namespaceURI)e=ad(t=od(t),e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}D(V),B(V,e)}function K(){D(V),D(W),D(H)}function Q(e){null!==e.memoizedState&&B(U,e);var t=V.current,n=ad(t,e.type);t!==n&&(B(W,e),B(V,n))}function G(e){W.current===e&&(D(V),D(W)),U.current===e&&(D(U),Qd._currentValue=$)}var X=Object.prototype.hasOwnProperty,Y=r.unstable_scheduleCallback,Z=r.unstable_cancelCallback,J=r.unstable_shouldYield,ee=r.unstable_requestPaint,te=r.unstable_now,ne=r.unstable_getCurrentPriorityLevel,re=r.unstable_ImmediatePriority,oe=r.unstable_UserBlockingPriority,ae=r.unstable_NormalPriority,ie=r.unstable_LowPriority,le=r.unstable_IdlePriority,se=r.log,ue=r.unstable_setDisableYieldValue,ce=null,de=null;function fe(e){if("function"==typeof se&&ue(e),de&&"function"==typeof de.setStrictMode)try{de.setStrictMode(ce,e)}catch(e){}}var pe=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(me(e)/he|0)|0},me=Math.log,he=Math.LN2,ge=256,ye=4194304;function ve(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function be(e,t,n){var r=e.pendingLanes;if(0===r)return 0;var o=0,a=e.suspendedLanes,i=e.pingedLanes;e=e.warmLanes;var l=134217727&r;return 0!==l?0!==(r=l&~a)?o=ve(r):0!==(i&=l)?o=ve(i):n||0!==(n=l&~e)&&(o=ve(n)):0!==(l=r&~a)?o=ve(l):0!==i?o=ve(i):n||0!==(n=r&~e)&&(o=ve(n)),0===o?0:0!==t&&t!==o&&0===(t&a)&&((a=o&-o)>=(n=t&-t)||32===a&&4194048&n)?t:o}function Se(e,t){return 0===(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function ke(e,t){switch(e){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function we(){var e=ge;return!(4194048&(ge<<=1))&&(ge=256),e}function xe(){var e=ye;return!(62914560&(ye<<=1))&&(ye=4194304),e}function Ce(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ee(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Ae(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-pe(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194090&n}function Pe(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-pe(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}function Te(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function _e(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Re(){var e=F.p;return 0!==e?e:void 0===(e=window.event)?32:cf(e.type)}var ze=Math.random().toString(36).slice(2),Oe="__reactFiber$"+ze,Me="__reactProps$"+ze,Ne="__reactContainer$"+ze,Fe="__reactEvents$"+ze,$e="__reactListeners$"+ze,Le="__reactHandles$"+ze,je="__reactResources$"+ze,Ie="__reactMarker$"+ze;function De(e){delete e[Oe],delete e[Me],delete e[Fe],delete e[$e],delete e[Le]}function Be(e){var t=e[Oe];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Ne]||n[Oe]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=bd(e);null!==e;){if(n=e[Oe])return n;e=bd(e)}return t}n=(e=n).parentNode}return null}function Ve(e){if(e=e[Oe]||e[Ne]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function We(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(i(33))}function He(e){var t=e[je];return t||(t=e[je]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function Ue(e){e[Ie]=!0}var qe=new Set,Ke={};function Qe(e,t){Ge(e,t),Ge(e+"Capture",t)}function Ge(e,t){for(Ke[e]=t,e=0;e<t.length;e++)qe.add(t[e])}var Xe,Ye,Ze=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Je={},et={};function tt(e,t,n){if(o=t,X.call(et,o)||!X.call(Je,o)&&(Ze.test(o)?et[o]=!0:(Je[o]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var o}function nt(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function rt(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function ot(e){if(void 0===Xe)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);Xe=t&&t[1]||"",Ye=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Xe+e+Ye}var at=!1;function it(e,t){if(!e||at)return"";at=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var o=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");o&&o.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var a=r.DetermineComponentFrameRoot(),i=a[0],l=a[1];if(i&&l){var s=i.split("\n"),u=l.split("\n");for(o=r=0;r<s.length&&!s[r].includes("DetermineComponentFrameRoot");)r++;for(;o<u.length&&!u[o].includes("DetermineComponentFrameRoot");)o++;if(r===s.length||o===u.length)for(r=s.length-1,o=u.length-1;1<=r&&0<=o&&s[r]!==u[o];)o--;for(;1<=r&&0<=o;r--,o--)if(s[r]!==u[o]){if(1!==r||1!==o)do{if(r--,0>--o||s[r]!==u[o]){var c="\n"+s[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=o);break}}}finally{at=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?ot(n):""}function lt(e){switch(e.tag){case 26:case 27:case 5:return ot(e.type);case 16:return ot("Lazy");case 13:return ot("Suspense");case 19:return ot("SuspenseList");case 0:case 15:return it(e.type,!1);case 11:return it(e.type.render,!1);case 1:return it(e.type,!0);case 31:return ot("Activity");default:return""}}function st(e){try{var t="";do{t+=lt(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function ut(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ct(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function dt(e){e._valueTracker||(e._valueTracker=function(e){var t=ct(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ft(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ct(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function pt(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var mt=/[\n"\\]/g;function ht(e){return e.replace(mt,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function gt(e,t,n,r,o,a,i,l){e.name="",null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.type=i:e.removeAttribute("type"),null!=t?"number"===i?(0===t&&""===e.value||e.value!=t)&&(e.value=""+ut(t)):e.value!==""+ut(t)&&(e.value=""+ut(t)):"submit"!==i&&"reset"!==i||e.removeAttribute("value"),null!=t?vt(e,i,ut(t)):null!=n?vt(e,i,ut(n)):null!=r&&e.removeAttribute("value"),null==o&&null!=a&&(e.defaultChecked=!!a),null!=o&&(e.checked=o&&"function"!=typeof o&&"symbol"!=typeof o),null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?e.name=""+ut(l):e.removeAttribute("name")}function yt(e,t,n,r,o,a,i,l){if(null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(e.type=a),null!=t||null!=n){if(("submit"===a||"reset"===a)&&null==t)return;n=null!=n?""+ut(n):"",t=null!=t?""+ut(t):n,l||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:o)&&"symbol"!=typeof r&&!!r,e.checked=l?e.checked:!!r,e.defaultChecked=!!r,null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i&&(e.name=i)}function vt(e,t,n){"number"===t&&pt(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function bt(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ut(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function St(e,t,n){null==t||((t=""+ut(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+ut(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function kt(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(i(92));if(M(r)){if(1<r.length)throw Error(i(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=ut(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function wt(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var xt=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function Ct(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||xt.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function Et(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(i(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var o in t)r=t[o],t.hasOwnProperty(o)&&n[o]!==r&&Ct(e,o,r)}else for(var a in t)t.hasOwnProperty(a)&&Ct(e,a,t[a])}function At(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Pt=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Tt=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function _t(e){return Tt.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Rt=null;function zt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ot=null,Mt=null;function Nt(e){var t=Ve(e);if(t&&(e=t.stateNode)){var n=e[Me]||null;e:switch(e=t.stateNode,t.type){case"input":if(gt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+ht(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=r[Me]||null;if(!o)throw Error(i(90));gt(r,o.value,o.defaultValue,o.defaultValue,o.checked,o.defaultChecked,o.type,o.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&ft(r)}break e;case"textarea":St(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&bt(e,!!n.multiple,t,!1)}}}var Ft=!1;function $t(e,t,n){if(Ft)return e(t,n);Ft=!0;try{return e(t)}finally{if(Ft=!1,(null!==Ot||null!==Mt)&&(Bu(),Ot&&(t=Ot,e=Mt,Mt=Ot=null,Nt(t),e)))for(t=0;t<e.length;t++)Nt(e[t])}}function Lt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Me]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var jt=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),It=!1;if(jt)try{var Dt={};Object.defineProperty(Dt,"passive",{get:function(){It=!0}}),window.addEventListener("test",Dt,Dt),window.removeEventListener("test",Dt,Dt)}catch(e){It=!1}var Bt=null,Vt=null,Wt=null;function Ht(){if(Wt)return Wt;var e,t,n=Vt,r=n.length,o="value"in Bt?Bt.value:Bt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Wt=o.slice(e,1<t?1-t:void 0)}function Ut(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function qt(){return!0}function Kt(){return!1}function Qt(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?qt:Kt,this.isPropagationStopped=Kt,this}return f(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=qt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=qt)},persist:function(){},isPersistent:qt}),t}var Gt,Xt,Yt,Zt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Jt=Qt(Zt),en=f({},Zt,{view:0,detail:0}),tn=Qt(en),nn=f({},en,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:mn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Yt&&(Yt&&"mousemove"===e.type?(Gt=e.screenX-Yt.screenX,Xt=e.screenY-Yt.screenY):Xt=Gt=0,Yt=e),Gt)},movementY:function(e){return"movementY"in e?e.movementY:Xt}}),rn=Qt(nn),on=Qt(f({},nn,{dataTransfer:0})),an=Qt(f({},en,{relatedTarget:0})),ln=Qt(f({},Zt,{animationName:0,elapsedTime:0,pseudoElement:0})),sn=Qt(f({},Zt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),un=Qt(f({},Zt,{data:0})),cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},dn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function pn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=fn[e])&&!!t[e]}function mn(){return pn}var hn=Qt(f({},en,{key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Ut(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?dn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:mn,charCode:function(e){return"keypress"===e.type?Ut(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Ut(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),gn=Qt(f({},nn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),yn=Qt(f({},en,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:mn})),vn=Qt(f({},Zt,{propertyName:0,elapsedTime:0,pseudoElement:0})),bn=Qt(f({},nn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Sn=Qt(f({},Zt,{newState:0,oldState:0})),kn=[9,13,27,32],wn=jt&&"CompositionEvent"in window,xn=null;jt&&"documentMode"in document&&(xn=document.documentMode);var Cn=jt&&"TextEvent"in window&&!xn,En=jt&&(!wn||xn&&8<xn&&11>=xn),An=String.fromCharCode(32),Pn=!1;function Tn(e,t){switch(e){case"keyup":return-1!==kn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function _n(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Rn=!1,zn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function On(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!zn[e.type]:"textarea"===t}function Mn(e,t,n,r){Ot?Mt?Mt.push(r):Mt=[r]:Ot=r,0<(t=Hc(t,"onChange")).length&&(n=new Jt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Nn=null,Fn=null;function $n(e){$c(e,0)}function Ln(e){if(ft(We(e)))return e}function jn(e,t){if("change"===e)return t}var In=!1;if(jt){var Dn;if(jt){var Bn="oninput"in document;if(!Bn){var Vn=document.createElement("div");Vn.setAttribute("oninput","return;"),Bn="function"==typeof Vn.oninput}Dn=Bn}else Dn=!1;In=Dn&&(!document.documentMode||9<document.documentMode)}function Wn(){Nn&&(Nn.detachEvent("onpropertychange",Hn),Fn=Nn=null)}function Hn(e){if("value"===e.propertyName&&Ln(Fn)){var t=[];Mn(t,Fn,e,zt(e)),$t($n,t)}}function Un(e,t,n){"focusin"===e?(Wn(),Fn=n,(Nn=t).attachEvent("onpropertychange",Hn)):"focusout"===e&&Wn()}function qn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Ln(Fn)}function Kn(e,t){if("click"===e)return Ln(t)}function Qn(e,t){if("input"===e||"change"===e)return Ln(t)}var Gn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Xn(e,t){if(Gn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!X.call(t,o)||!Gn(e[o],t[o]))return!1}return!0}function Yn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Zn(e,t){var n,r=Yn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Yn(r)}}function Jn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Jn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function er(e){for(var t=pt((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=pt((e=t.contentWindow).document)}return t}function tr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var nr=jt&&"documentMode"in document&&11>=document.documentMode,rr=null,or=null,ar=null,ir=!1;function lr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;ir||null==rr||rr!==pt(r)||(r="selectionStart"in(r=rr)&&tr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},ar&&Xn(ar,r)||(ar=r,0<(r=Hc(or,"onSelect")).length&&(t=new Jt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=rr)))}function sr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var ur={animationend:sr("Animation","AnimationEnd"),animationiteration:sr("Animation","AnimationIteration"),animationstart:sr("Animation","AnimationStart"),transitionrun:sr("Transition","TransitionRun"),transitionstart:sr("Transition","TransitionStart"),transitioncancel:sr("Transition","TransitionCancel"),transitionend:sr("Transition","TransitionEnd")},cr={},dr={};function fr(e){if(cr[e])return cr[e];if(!ur[e])return e;var t,n=ur[e];for(t in n)if(n.hasOwnProperty(t)&&t in dr)return cr[e]=n[t];return e}jt&&(dr=document.createElement("div").style,"AnimationEvent"in window||(delete ur.animationend.animation,delete ur.animationiteration.animation,delete ur.animationstart.animation),"TransitionEvent"in window||delete ur.transitionend.transition);var pr=fr("animationend"),mr=fr("animationiteration"),hr=fr("animationstart"),gr=fr("transitionrun"),yr=fr("transitionstart"),vr=fr("transitioncancel"),br=fr("transitionend"),Sr=new Map,kr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function wr(e,t){Sr.set(e,t),Qe(t,[e])}kr.push("scrollEnd");var xr=new WeakMap;function Cr(e,t){if("object"==typeof e&&null!==e){var n=xr.get(e);return void 0!==n?n:(t={value:e,source:t,stack:st(t)},xr.set(e,t),t)}return{value:e,source:t,stack:st(t)}}var Er=[],Ar=0,Pr=0;function Tr(){for(var e=Ar,t=Pr=Ar=0;t<e;){var n=Er[t];Er[t++]=null;var r=Er[t];Er[t++]=null;var o=Er[t];Er[t++]=null;var a=Er[t];if(Er[t++]=null,null!==r&&null!==o){var i=r.pending;null===i?o.next=o:(o.next=i.next,i.next=o),r.pending=o}0!==a&&Or(n,o,a)}}function _r(e,t,n,r){Er[Ar++]=e,Er[Ar++]=t,Er[Ar++]=n,Er[Ar++]=r,Pr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Rr(e,t,n,r){return _r(e,t,n,r),Mr(e)}function zr(e,t){return _r(e,null,null,t),Mr(e)}function Or(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var o=!1,a=e.return;null!==a;)a.childLanes|=n,null!==(r=a.alternate)&&(r.childLanes|=n),22===a.tag&&(null===(e=a.stateNode)||1&e._visibility||(o=!0)),e=a,a=a.return;return 3===e.tag?(a=e.stateNode,o&&null!==t&&(o=31-pe(n),null===(r=(e=a.hiddenUpdates)[o])?e[o]=[t]:r.push(t),t.lane=536870912|n),a):null}function Mr(e){if(50<Ou)throw Ou=0,Mu=null,Error(i(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var Nr={};function Fr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function $r(e,t,n,r){return new Fr(e,t,n,r)}function Lr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function jr(e,t){var n=e.alternate;return null===n?((n=$r(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=65011712&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Ir(e,t){e.flags&=65011714;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function Dr(e,t,n,r,o,a){var l=0;if(r=e,"function"==typeof e)Lr(e)&&(l=1);else if("string"==typeof e)l=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,V.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case P:return(e=$r(31,n,t,o)).elementType=P,e.lanes=a,e;case g:return Br(n.children,o,a,t);case y:l=8,o|=24;break;case v:return(e=$r(12,n,t,2|o)).elementType=v,e.lanes=a,e;case x:return(e=$r(13,n,t,o)).elementType=x,e.lanes=a,e;case C:return(e=$r(19,n,t,o)).elementType=C,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case b:case k:l=10;break e;case S:l=9;break e;case w:l=11;break e;case E:l=14;break e;case A:l=16,r=null;break e}l=29,n=Error(i(130,null===e?"null":typeof e,"")),r=null}return(t=$r(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Br(e,t,n,r){return(e=$r(7,e,r,t)).lanes=n,e}function Vr(e,t,n){return(e=$r(6,e,null,t)).lanes=n,e}function Wr(e,t,n){return(t=$r(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}var Hr=[],Ur=0,qr=null,Kr=0,Qr=[],Gr=0,Xr=null,Yr=1,Zr="";function Jr(e,t){Hr[Ur++]=Kr,Hr[Ur++]=qr,qr=e,Kr=t}function eo(e,t,n){Qr[Gr++]=Yr,Qr[Gr++]=Zr,Qr[Gr++]=Xr,Xr=e;var r=Yr;e=Zr;var o=32-pe(r)-1;r&=~(1<<o),n+=1;var a=32-pe(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Yr=1<<32-pe(t)+o|n<<o|r,Zr=a+e}else Yr=1<<a|n<<o|r,Zr=e}function to(e){null!==e.return&&(Jr(e,1),eo(e,1,0))}function no(e){for(;e===qr;)qr=Hr[--Ur],Hr[Ur]=null,Kr=Hr[--Ur],Hr[Ur]=null;for(;e===Xr;)Xr=Qr[--Gr],Qr[Gr]=null,Zr=Qr[--Gr],Qr[Gr]=null,Yr=Qr[--Gr],Qr[Gr]=null}var ro=null,oo=null,ao=!1,io=null,lo=!1,so=Error(i(519));function uo(e){throw go(Cr(Error(i(418,"")),e)),so}function co(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Oe]=e,t[Me]=r,n){case"dialog":Lc("cancel",t),Lc("close",t);break;case"iframe":case"object":case"embed":Lc("load",t);break;case"video":case"audio":for(n=0;n<Nc.length;n++)Lc(Nc[n],t);break;case"source":Lc("error",t);break;case"img":case"image":case"link":Lc("error",t),Lc("load",t);break;case"details":Lc("toggle",t);break;case"input":Lc("invalid",t),yt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),dt(t);break;case"select":Lc("invalid",t);break;case"textarea":Lc("invalid",t),kt(t,r.value,r.defaultValue,r.children),dt(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Xc(t.textContent,n)?(null!=r.popover&&(Lc("beforetoggle",t),Lc("toggle",t)),null!=r.onScroll&&Lc("scroll",t),null!=r.onScrollEnd&&Lc("scrollend",t),null!=r.onClick&&(t.onclick=Yc),t=!0):t=!1,t||uo(e)}function fo(e){for(ro=e.return;ro;)switch(ro.tag){case 5:case 13:return void(lo=!1);case 27:case 3:return void(lo=!0);default:ro=ro.return}}function po(e){if(e!==ro)return!1;if(!ao)return fo(e),ao=!0,!1;var t,n=e.tag;if((t=3!==n&&27!==n)&&((t=5===n)&&(t=!("form"!==(t=e.type)&&"button"!==t)||id(e.type,e.memoizedProps)),t=!t),t&&oo&&uo(e),fo(e),13===n){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){oo=yd(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}oo=null}}else 27===n?(n=oo,pd(e.type)?(e=vd,vd=null,oo=e):oo=n):oo=ro?yd(e.stateNode.nextSibling):null;return!0}function mo(){oo=ro=null,ao=!1}function ho(){var e=io;return null!==e&&(null===bu?bu=e:bu.push.apply(bu,e),io=null),e}function go(e){null===io?io=[e]:io.push(e)}var yo=I(null),vo=null,bo=null;function So(e,t,n){B(yo,t._currentValue),t._currentValue=n}function ko(e){e._currentValue=yo.current,D(yo)}function wo(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function xo(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){var a=o.dependencies;if(null!==a){var l=o.child;a=a.firstContext;e:for(;null!==a;){var s=a;a=o;for(var u=0;u<t.length;u++)if(s.context===t[u]){a.lanes|=n,null!==(s=a.alternate)&&(s.lanes|=n),wo(a.return,n,e),r||(l=null);break e}a=s.next}}else if(18===o.tag){if(null===(l=o.return))throw Error(i(341));l.lanes|=n,null!==(a=l.alternate)&&(a.lanes|=n),wo(l,n,e),l=null}else l=o.child;if(null!==l)l.return=o;else for(l=o;null!==l;){if(l===e){l=null;break}if(null!==(o=l.sibling)){o.return=l.return,l=o;break}l=l.return}o=l}}function Co(e,t,n,r){e=null;for(var o=t,a=!1;null!==o;){if(!a)if(524288&o.flags)a=!0;else if(262144&o.flags)break;if(10===o.tag){var l=o.alternate;if(null===l)throw Error(i(387));if(null!==(l=l.memoizedProps)){var s=o.type;Gn(o.pendingProps.value,l.value)||(null!==e?e.push(s):e=[s])}}else if(o===U.current){if(null===(l=o.alternate))throw Error(i(387));l.memoizedState.memoizedState!==o.memoizedState.memoizedState&&(null!==e?e.push(Qd):e=[Qd])}o=o.return}null!==e&&xo(t,e,n,r),t.flags|=262144}function Eo(e){for(e=e.firstContext;null!==e;){if(!Gn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Ao(e){vo=e,bo=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function Po(e){return _o(vo,e)}function To(e,t){return null===vo&&Ao(e),_o(e,t)}function _o(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===bo){if(null===e)throw Error(i(308));bo=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else bo=bo.next=t;return n}var Ro="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},zo=r.unstable_scheduleCallback,Oo=r.unstable_NormalPriority,Mo={$$typeof:k,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function No(){return{controller:new Ro,data:new Map,refCount:0}}function Fo(e){e.refCount--,0===e.refCount&&zo(Oo,(function(){e.controller.abort()}))}var $o=null,Lo=0,jo=0,Io=null;function Do(){if(0===--Lo&&null!==$o){null!==Io&&(Io.status="fulfilled");var e=$o;$o=null,jo=0,Io=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var Bo=N.S;N.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===$o){var n=$o=[];Lo=0,jo=_c(),Io={status:"pending",value:void 0,then:function(e){n.push(e)}}}Lo++,t.then(Do,Do)}(0,t),null!==Bo&&Bo(e,t)};var Vo=I(null);function Wo(){var e=Vo.current;return null!==e?e:ru.pooledCache}function Ho(e,t){B(Vo,null===t?Vo.current:t.pool)}function Uo(){var e=Wo();return null===e?null:{parent:Mo._currentValue,pool:e}}var qo=Error(i(460)),Ko=Error(i(474)),Qo=Error(i(542)),Go={then:function(){}};function Xo(e){return"fulfilled"===(e=e.status)||"rejected"===e}function Yo(){}function Zo(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(Yo,Yo),t=n),t.status){case"fulfilled":return t.value;case"rejected":throw ta(e=t.reason),e;default:if("string"==typeof t.status)t.then(Yo,Yo);else{if(null!==(e=ru)&&100<e.shellSuspendCounter)throw Error(i(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":throw ta(e=t.reason),e}throw Jo=t,qo}}var Jo=null;function ea(){if(null===Jo)throw Error(i(459));var e=Jo;return Jo=null,e}function ta(e){if(e===qo||e===Qo)throw Error(i(483))}var na=!1;function ra(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function oa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function aa(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function ia(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&nu){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,t=Mr(e),Or(e,null,n),t}return _r(e,r,t,n),Mr(e)}function la(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194048&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Pe(e,n)}}function sa(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var ua=!1;function ca(){if(ua&&null!==Io)throw Io}function da(e,t,n,r){ua=!1;var o=e.updateQueue;na=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var s=l,u=s.next;s.next=null,null===i?a=u:i.next=u,i=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==a){var d=o.baseState;for(i=0,c=u=s=null,l=a;;){var p=-536870913&l.lane,m=p!==l.lane;if(m?(au&p)===p:(r&p)===p){0!==p&&p===jo&&(ua=!0),null!==c&&(c=c.next={lane:0,tag:l.tag,payload:l.payload,callback:null,next:null});e:{var h=e,g=l;p=t;var y=n;switch(g.tag){case 1:if("function"==typeof(h=g.payload)){d=h.call(y,d,p);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(p="function"==typeof(h=g.payload)?h.call(y,d,p):h))break e;d=f({},d,p);break e;case 2:na=!0}}null!==(p=l.callback)&&(e.flags|=64,m&&(e.flags|=8192),null===(m=o.callbacks)?o.callbacks=[p]:m.push(p))}else m={lane:p,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=m,s=d):c=c.next=m,i|=p;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(m=l).next,m.next=null,o.lastBaseUpdate=m,o.shared.pending=null}}null===c&&(s=d),o.baseState=s,o.firstBaseUpdate=u,o.lastBaseUpdate=c,null===a&&(o.shared.lanes=0),pu|=i,e.lanes=i,e.memoizedState=d}}function fa(e,t){if("function"!=typeof e)throw Error(i(191,e));e.call(t)}function pa(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)fa(n[e],t)}var ma=I(null),ha=I(0);function ga(e,t){B(ha,e=du),B(ma,t),du=e|t.baseLanes}function ya(){B(ha,du),B(ma,ma.current)}function va(){du=ha.current,D(ma),D(ha)}var ba=0,Sa=null,ka=null,wa=null,xa=!1,Ca=!1,Ea=!1,Aa=0,Pa=0,Ta=null,_a=0;function Ra(){throw Error(i(321))}function za(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Gn(e[n],t[n]))return!1;return!0}function Oa(e,t,n,r,o,a){return ba=a,Sa=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,N.H=null===e||null===e.memoizedState?qi:Ki,Ea=!1,a=n(r,o),Ea=!1,Ca&&(a=Na(t,n,r,o)),Ma(e),a}function Ma(e){N.H=Ui;var t=null!==ka&&null!==ka.next;if(ba=0,wa=ka=Sa=null,xa=!1,Pa=0,Ta=null,t)throw Error(i(300));null===e||Pl||null!==(e=e.dependencies)&&Eo(e)&&(Pl=!0)}function Na(e,t,n,r){Sa=e;var o=0;do{if(Ca&&(Ta=null),Pa=0,Ca=!1,25<=o)throw Error(i(301));if(o+=1,wa=ka=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}N.H=Qi,a=t(n,r)}while(Ca);return a}function Fa(){var e=N.H,t=e.useState()[0];return t="function"==typeof t.then?Ba(t):t,e=e.useState()[0],(null!==ka?ka.memoizedState:null)!==e&&(Sa.flags|=1024),t}function $a(){var e=0!==Aa;return Aa=0,e}function La(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function ja(e){if(xa){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}xa=!1}ba=0,wa=ka=Sa=null,Ca=!1,Pa=Aa=0,Ta=null}function Ia(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===wa?Sa.memoizedState=wa=e:wa=wa.next=e,wa}function Da(){if(null===ka){var e=Sa.alternate;e=null!==e?e.memoizedState:null}else e=ka.next;var t=null===wa?Sa.memoizedState:wa.next;if(null!==t)wa=t,ka=e;else{if(null===e){if(null===Sa.alternate)throw Error(i(467));throw Error(i(310))}e={memoizedState:(ka=e).memoizedState,baseState:ka.baseState,baseQueue:ka.baseQueue,queue:ka.queue,next:null},null===wa?Sa.memoizedState=wa=e:wa=wa.next=e}return wa}function Ba(e){var t=Pa;return Pa+=1,null===Ta&&(Ta=[]),e=Zo(Ta,e,t),t=Sa,null===(null===wa?t.memoizedState:wa.next)&&(t=t.alternate,N.H=null===t||null===t.memoizedState?qi:Ki),e}function Va(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return Ba(e);if(e.$$typeof===k)return Po(e)}throw Error(i(438,String(e)))}function Wa(e){var t=null,n=Sa.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=Sa.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},Sa.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=T;return t.index++,n}function Ha(e,t){return"function"==typeof t?t(e):t}function Ua(e){return qa(Da(),ka,e)}function qa(e,t,n){var r=e.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=n;var o=e.baseQueue,a=r.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}t.baseQueue=o=a,r.pending=null}if(a=e.baseState,null===o)e.memoizedState=a;else{var s=l=null,u=null,c=t=o.next,d=!1;do{var f=-536870913&c.lane;if(f!==c.lane?(au&f)===f:(ba&f)===f){var p=c.revertLane;if(0===p)null!==u&&(u=u.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),f===jo&&(d=!0);else{if((ba&p)===p){c=c.next,p===jo&&(d=!0);continue}f={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=f,l=a):u=u.next=f,Sa.lanes|=p,pu|=p}f=c.action,Ea&&n(a,f),a=c.hasEagerState?c.eagerState:n(a,f)}else p={lane:f,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=p,l=a):u=u.next=p,Sa.lanes|=f,pu|=f;c=c.next}while(null!==c&&c!==t);if(null===u?l=a:u.next=s,!Gn(a,e.memoizedState)&&(Pl=!0,d&&null!==(n=Io)))throw n;e.memoizedState=a,e.baseState=l,e.baseQueue=u,r.lastRenderedState=a}return null===o&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Ka(e){var t=Da(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);Gn(a,t.memoizedState)||(Pl=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Qa(e,t,n){var r=Sa,o=Da(),a=ao;if(a){if(void 0===n)throw Error(i(407));n=n()}else n=t();var l=!Gn((ka||o).memoizedState,n);if(l&&(o.memoizedState=n,Pl=!0),o=o.queue,yi(2048,8,Ya.bind(null,r,o,e),[e]),o.getSnapshot!==t||l||null!==wa&&1&wa.memoizedState.tag){if(r.flags|=2048,mi(9,{destroy:void 0,resource:void 0},Xa.bind(null,r,o,n,t),null),null===ru)throw Error(i(349));a||124&ba||Ga(r,t,n)}return n}function Ga(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=Sa.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},Sa.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Xa(e,t,n,r){t.value=n,t.getSnapshot=r,Za(t)&&Ja(e)}function Ya(e,t,n){return n((function(){Za(t)&&Ja(e)}))}function Za(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Gn(e,n)}catch(e){return!0}}function Ja(e){var t=zr(e,2);null!==t&&$u(t,0,2)}function ei(e){var t=Ia();if("function"==typeof e){var n=e;if(e=n(),Ea){fe(!0);try{n()}finally{fe(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ha,lastRenderedState:e},t}function ti(e,t,n,r){return e.baseState=n,qa(e,ka,"function"==typeof r?r:Ha)}function ni(e,t,n,r,o){if(Vi(e))throw Error(i(485));if(null!==(e=t.action)){var a={payload:o,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==N.T?n(!0):a.isTransition=!1,r(a),null===(n=t.pending)?(a.next=t.pending=a,ri(t,a)):(a.next=n.next,t.pending=n.next=a)}}function ri(e,t){var n=t.action,r=t.payload,o=e.state;if(t.isTransition){var a=N.T,i={};N.T=i;try{var l=n(o,r),s=N.S;null!==s&&s(i,l),oi(e,t,l)}catch(n){ii(e,t,n)}finally{N.T=a}}else try{oi(e,t,a=n(o,r))}catch(n){ii(e,t,n)}}function oi(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){ai(e,t,n)}),(function(n){return ii(e,t,n)})):ai(e,t,n)}function ai(e,t,n){t.status="fulfilled",t.value=n,li(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,ri(e,n)))}function ii(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,li(t),t=t.next}while(t!==r)}e.action=null}function li(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function si(e,t){return t}function ui(e,t){if(ao){var n=ru.formState;if(null!==n){e:{var r=Sa;if(ao){if(oo){t:{for(var o=oo,a=lo;8!==o.nodeType;){if(!a){o=null;break t}if(null===(o=yd(o.nextSibling))){o=null;break t}}o="F!"===(a=o.data)||"F"===a?o:null}if(o){oo=yd(o.nextSibling),r="F!"===o.data;break e}}uo(r)}r=!1}r&&(t=n[0])}}return(n=Ia()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:si,lastRenderedState:t},n.queue=r,n=Ii.bind(null,Sa,r),r.dispatch=n,r=ei(!1),a=Bi.bind(null,Sa,!1,r.queue),o={state:t,dispatch:null,action:e,pending:null},(r=Ia()).queue=o,n=ni.bind(null,Sa,o,a,n),o.dispatch=n,r.memoizedState=e,[t,n,!1]}function ci(e){return di(Da(),ka,e)}function di(e,t,n){if(t=qa(e,t,si)[0],e=Ua(Ha)[0],"object"==typeof t&&null!==t&&"function"==typeof t.then)try{var r=Ba(t)}catch(e){if(e===qo)throw Qo;throw e}else r=t;var o=(t=Da()).queue,a=o.dispatch;return n!==t.memoizedState&&(Sa.flags|=2048,mi(9,{destroy:void 0,resource:void 0},fi.bind(null,o,n),null)),[r,a,e]}function fi(e,t){e.action=t}function pi(e){var t=Da(),n=ka;if(null!==n)return di(t,n,e);Da(),t=t.memoizedState;var r=(n=Da()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function mi(e,t,n,r){return e={tag:e,create:n,deps:r,inst:t,next:null},null===(t=Sa.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},Sa.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function hi(){return Da().memoizedState}function gi(e,t,n,r){var o=Ia();r=void 0===r?null:r,Sa.flags|=e,o.memoizedState=mi(1|t,{destroy:void 0,resource:void 0},n,r)}function yi(e,t,n,r){var o=Da();r=void 0===r?null:r;var a=o.memoizedState.inst;null!==ka&&null!==r&&za(r,ka.memoizedState.deps)?o.memoizedState=mi(t,a,n,r):(Sa.flags|=e,o.memoizedState=mi(1|t,a,n,r))}function vi(e,t){gi(8390656,8,e,t)}function bi(e,t){yi(2048,8,e,t)}function Si(e,t){return yi(4,2,e,t)}function ki(e,t){return yi(4,4,e,t)}function wi(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function xi(e,t,n){n=null!=n?n.concat([e]):null,yi(4,4,wi.bind(null,t,e),n)}function Ci(){}function Ei(e,t){var n=Da();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&za(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ai(e,t){var n=Da();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&za(t,r[1]))return r[0];if(r=e(),Ea){fe(!0);try{e()}finally{fe(!1)}}return n.memoizedState=[r,t],r}function Pi(e,t,n){return void 0===n||1073741824&ba?e.memoizedState=t:(e.memoizedState=n,e=Fu(),Sa.lanes|=e,pu|=e,n)}function Ti(e,t,n,r){return Gn(n,t)?n:null!==ma.current?(e=Pi(e,n,r),Gn(e,t)||(Pl=!0),e):42&ba?(e=Fu(),Sa.lanes|=e,pu|=e,t):(Pl=!0,e.memoizedState=n)}function _i(e,t,n,r,o){var a=F.p;F.p=0!==a&&8>a?a:8;var i,l,s,u=N.T,c={};N.T=c,Bi(e,!1,t,n);try{var d=o(),f=N.S;null!==f&&f(c,d),null!==d&&"object"==typeof d&&"function"==typeof d.then?Di(e,t,(i=r,l=[],s={status:"pending",value:null,reason:null,then:function(e){l.push(e)}},d.then((function(){s.status="fulfilled",s.value=i;for(var e=0;e<l.length;e++)(0,l[e])(i)}),(function(e){for(s.status="rejected",s.reason=e,e=0;e<l.length;e++)(0,l[e])(void 0)})),s),Nu()):Di(e,t,r,Nu())}catch(n){Di(e,t,{then:function(){},status:"rejected",reason:n},Nu())}finally{F.p=a,N.T=u}}function Ri(){}function zi(e,t,n,r){if(5!==e.tag)throw Error(i(476));var o=Oi(e).queue;_i(e,o,t,$,null===n?Ri:function(){return Mi(e),n(r)})}function Oi(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:$,baseState:$,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ha,lastRenderedState:$},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ha,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function Mi(e){Di(e,Oi(e).next.queue,{},Nu())}function Ni(){return Po(Qd)}function Fi(){return Da().memoizedState}function $i(){return Da().memoizedState}function Li(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Nu(),r=ia(t,e=aa(n),n);return null!==r&&($u(r,0,n),la(r,t,n)),t={cache:No()},void(e.payload=t)}t=t.return}}function ji(e,t,n){var r=Nu();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},Vi(e)?Wi(t,n):null!==(n=Rr(e,t,n,r))&&($u(n,0,r),Hi(n,t,r))}function Ii(e,t,n){Di(e,t,n,Nu())}function Di(e,t,n,r){var o={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(Vi(e))Wi(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.hasEagerState=!0,o.eagerState=l,Gn(l,i))return _r(e,t,o,0),null===ru&&Tr(),!1}catch(e){}if(null!==(n=Rr(e,t,o,r)))return $u(n,0,r),Hi(n,t,r),!0}return!1}function Bi(e,t,n,r){if(r={lane:2,revertLane:_c(),action:r,hasEagerState:!1,eagerState:null,next:null},Vi(e)){if(t)throw Error(i(479))}else null!==(t=Rr(e,n,r,2))&&$u(t,0,2)}function Vi(e){var t=e.alternate;return e===Sa||null!==t&&t===Sa}function Wi(e,t){Ca=xa=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Hi(e,t,n){if(4194048&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Pe(e,n)}}var Ui={readContext:Po,use:Va,useCallback:Ra,useContext:Ra,useEffect:Ra,useImperativeHandle:Ra,useLayoutEffect:Ra,useInsertionEffect:Ra,useMemo:Ra,useReducer:Ra,useRef:Ra,useState:Ra,useDebugValue:Ra,useDeferredValue:Ra,useTransition:Ra,useSyncExternalStore:Ra,useId:Ra,useHostTransitionStatus:Ra,useFormState:Ra,useActionState:Ra,useOptimistic:Ra,useMemoCache:Ra,useCacheRefresh:Ra},qi={readContext:Po,use:Va,useCallback:function(e,t){return Ia().memoizedState=[e,void 0===t?null:t],e},useContext:Po,useEffect:vi,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,gi(4194308,4,wi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return gi(4194308,4,e,t)},useInsertionEffect:function(e,t){gi(4,2,e,t)},useMemo:function(e,t){var n=Ia();t=void 0===t?null:t;var r=e();if(Ea){fe(!0);try{e()}finally{fe(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=Ia();if(void 0!==n){var o=n(t);if(Ea){fe(!0);try{n(t)}finally{fe(!1)}}}else o=t;return r.memoizedState=r.baseState=o,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:o},r.queue=e,e=e.dispatch=ji.bind(null,Sa,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ia().memoizedState=e},useState:function(e){var t=(e=ei(e)).queue,n=Ii.bind(null,Sa,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:Ci,useDeferredValue:function(e,t){return Pi(Ia(),e,t)},useTransition:function(){var e=ei(!1);return e=_i.bind(null,Sa,e.queue,!0,!1),Ia().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=Sa,o=Ia();if(ao){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===ru)throw Error(i(349));124&au||Ga(r,t,n)}o.memoizedState=n;var a={value:n,getSnapshot:t};return o.queue=a,vi(Ya.bind(null,r,a,e),[e]),r.flags|=2048,mi(9,{destroy:void 0,resource:void 0},Xa.bind(null,r,a,n,t),null),n},useId:function(){var e=Ia(),t=ru.identifierPrefix;if(ao){var n=Zr;t="«"+t+"R"+(n=(Yr&~(1<<32-pe(Yr)-1)).toString(32)+n),0<(n=Aa++)&&(t+="H"+n.toString(32)),t+="»"}else t="«"+t+"r"+(n=_a++).toString(32)+"»";return e.memoizedState=t},useHostTransitionStatus:Ni,useFormState:ui,useActionState:ui,useOptimistic:function(e){var t=Ia();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=Bi.bind(null,Sa,!0,n),n.dispatch=t,[e,t]},useMemoCache:Wa,useCacheRefresh:function(){return Ia().memoizedState=Li.bind(null,Sa)}},Ki={readContext:Po,use:Va,useCallback:Ei,useContext:Po,useEffect:bi,useImperativeHandle:xi,useInsertionEffect:Si,useLayoutEffect:ki,useMemo:Ai,useReducer:Ua,useRef:hi,useState:function(){return Ua(Ha)},useDebugValue:Ci,useDeferredValue:function(e,t){return Ti(Da(),ka.memoizedState,e,t)},useTransition:function(){var e=Ua(Ha)[0],t=Da().memoizedState;return["boolean"==typeof e?e:Ba(e),t]},useSyncExternalStore:Qa,useId:Fi,useHostTransitionStatus:Ni,useFormState:ci,useActionState:ci,useOptimistic:function(e,t){return ti(Da(),0,e,t)},useMemoCache:Wa,useCacheRefresh:$i},Qi={readContext:Po,use:Va,useCallback:Ei,useContext:Po,useEffect:bi,useImperativeHandle:xi,useInsertionEffect:Si,useLayoutEffect:ki,useMemo:Ai,useReducer:Ka,useRef:hi,useState:function(){return Ka(Ha)},useDebugValue:Ci,useDeferredValue:function(e,t){var n=Da();return null===ka?Pi(n,e,t):Ti(n,ka.memoizedState,e,t)},useTransition:function(){var e=Ka(Ha)[0],t=Da().memoizedState;return["boolean"==typeof e?e:Ba(e),t]},useSyncExternalStore:Qa,useId:Fi,useHostTransitionStatus:Ni,useFormState:pi,useActionState:pi,useOptimistic:function(e,t){var n=Da();return null!==ka?ti(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])},useMemoCache:Wa,useCacheRefresh:$i},Gi=null,Xi=0;function Yi(e){var t=Xi;return Xi+=1,null===Gi&&(Gi=[]),Zo(Gi,e,t)}function Zi(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function Ji(e,t){if(t.$$typeof===p)throw Error(i(525));throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function el(e){return(0,e._init)(e._payload)}function tl(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function o(e,t){return(e=jr(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=67108866,n):r:(t.flags|=67108866,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=67108866),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Vr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){var a=n.type;return a===g?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===A&&el(a)===t.type)?(Zi(t=o(t,n.props),n),t.return=e,t):(Zi(t=Dr(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Wr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=Br(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Vr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case m:return Zi(n=Dr(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case h:return(t=Wr(t,e.mode,n)).return=e,t;case A:return f(e,t=(0,t._init)(t._payload),n)}if(M(t)||R(t))return(t=Br(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return f(e,Yi(t),n);if(t.$$typeof===k)return f(e,To(e,t),n);Ji(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case m:return n.key===o?u(e,t,n,r):null;case h:return n.key===o?c(e,t,n,r):null;case A:return p(e,t,n=(o=n._init)(n._payload),r)}if(M(n)||R(n))return null!==o?null:d(e,t,n,r,null);if("function"==typeof n.then)return p(e,t,Yi(n),r);if(n.$$typeof===k)return p(e,t,To(e,n),r);Ji(e,n)}return null}function y(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case m:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o);case h:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case A:return y(e,t,n,r=(0,r._init)(r._payload),o)}if(M(r)||R(r))return d(t,e=e.get(n)||null,r,o,null);if("function"==typeof r.then)return y(e,t,n,Yi(r),o);if(r.$$typeof===k)return y(e,t,n,To(t,r),o);Ji(t,r)}return null}function v(s,u,c,d){if("object"==typeof c&&null!==c&&c.type===g&&null===c.key&&(c=c.props.children),"object"==typeof c&&null!==c){switch(c.$$typeof){case m:e:{for(var b=c.key;null!==u;){if(u.key===b){if((b=c.type)===g){if(7===u.tag){n(s,u.sibling),(d=o(u,c.props.children)).return=s,s=d;break e}}else if(u.elementType===b||"object"==typeof b&&null!==b&&b.$$typeof===A&&el(b)===u.type){n(s,u.sibling),Zi(d=o(u,c.props),c),d.return=s,s=d;break e}n(s,u);break}t(s,u),u=u.sibling}c.type===g?((d=Br(c.props.children,s.mode,d,c.key)).return=s,s=d):(Zi(d=Dr(c.type,c.key,c.props,null,s.mode,d),c),d.return=s,s=d)}return l(s);case h:e:{for(b=c.key;null!==u;){if(u.key===b){if(4===u.tag&&u.stateNode.containerInfo===c.containerInfo&&u.stateNode.implementation===c.implementation){n(s,u.sibling),(d=o(u,c.children||[])).return=s,s=d;break e}n(s,u);break}t(s,u),u=u.sibling}(d=Wr(c,s.mode,d)).return=s,s=d}return l(s);case A:return v(s,u,c=(b=c._init)(c._payload),d)}if(M(c))return function(o,i,l,s){for(var u=null,c=null,d=i,m=i=0,h=null;null!==d&&m<l.length;m++){d.index>m?(h=d,d=null):h=d.sibling;var g=p(o,d,l[m],s);if(null===g){null===d&&(d=h);break}e&&d&&null===g.alternate&&t(o,d),i=a(g,i,m),null===c?u=g:c.sibling=g,c=g,d=h}if(m===l.length)return n(o,d),ao&&Jr(o,m),u;if(null===d){for(;m<l.length;m++)null!==(d=f(o,l[m],s))&&(i=a(d,i,m),null===c?u=d:c.sibling=d,c=d);return ao&&Jr(o,m),u}for(d=r(d);m<l.length;m++)null!==(h=y(d,o,m,l[m],s))&&(e&&null!==h.alternate&&d.delete(null===h.key?m:h.key),i=a(h,i,m),null===c?u=h:c.sibling=h,c=h);return e&&d.forEach((function(e){return t(o,e)})),ao&&Jr(o,m),u}(s,u,c,d);if(R(c)){if("function"!=typeof(b=R(c)))throw Error(i(150));return function(o,l,s,u){if(null==s)throw Error(i(151));for(var c=null,d=null,m=l,h=l=0,g=null,v=s.next();null!==m&&!v.done;h++,v=s.next()){m.index>h?(g=m,m=null):g=m.sibling;var b=p(o,m,v.value,u);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),l=a(b,l,h),null===d?c=b:d.sibling=b,d=b,m=g}if(v.done)return n(o,m),ao&&Jr(o,h),c;if(null===m){for(;!v.done;h++,v=s.next())null!==(v=f(o,v.value,u))&&(l=a(v,l,h),null===d?c=v:d.sibling=v,d=v);return ao&&Jr(o,h),c}for(m=r(m);!v.done;h++,v=s.next())null!==(v=y(m,o,h,v.value,u))&&(e&&null!==v.alternate&&m.delete(null===v.key?h:v.key),l=a(v,l,h),null===d?c=v:d.sibling=v,d=v);return e&&m.forEach((function(e){return t(o,e)})),ao&&Jr(o,h),c}(s,u,c=b.call(c),d)}if("function"==typeof c.then)return v(s,u,Yi(c),d);if(c.$$typeof===k)return v(s,u,To(s,c),d);Ji(s,c)}return"string"==typeof c&&""!==c||"number"==typeof c||"bigint"==typeof c?(c=""+c,null!==u&&6===u.tag?(n(s,u.sibling),(d=o(u,c)).return=s,s=d):(n(s,u),(d=Vr(c,s.mode,d)).return=s,s=d),l(s)):n(s,u)}return function(e,t,n,r){try{Xi=0;var o=v(e,t,n,r);return Gi=null,o}catch(t){if(t===qo||t===Qo)throw t;var a=$r(29,t,null,e.mode);return a.lanes=r,a.return=e,a}}}var nl=tl(!0),rl=tl(!1),ol=I(null),al=null;function il(e){var t=e.alternate;B(cl,1&cl.current),B(ol,e),null===al&&(null===t||null!==ma.current||null!==t.memoizedState)&&(al=e)}function ll(e){if(22===e.tag){if(B(cl,cl.current),B(ol,e),null===al){var t=e.alternate;null!==t&&null!==t.memoizedState&&(al=e)}}else sl()}function sl(){B(cl,cl.current),B(ol,ol.current)}function ul(e){D(ol),al===e&&(al=null),D(cl)}var cl=I(0);function dl(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||gd(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function fl(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:f({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pl={enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Nu(),o=aa(r);o.payload=t,null!=n&&(o.callback=n),null!==(t=ia(e,o,r))&&($u(t,0,r),la(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Nu(),o=aa(r);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=ia(e,o,r))&&($u(t,0,r),la(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Nu(),r=aa(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=ia(e,r,n))&&($u(t,0,n),la(t,e,n))}};function ml(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&Xn(n,r)&&Xn(o,a))}function hl(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pl.enqueueReplaceState(t,t.state,null)}function gl(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var o in n===t&&(n=f({},n)),e)void 0===n[o]&&(n[o]=e[o]);return n}var yl="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function vl(e){yl(e)}function bl(e){console.error(e)}function Sl(e){yl(e)}function kl(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function wl(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function xl(e,t,n){return(n=aa(n)).tag=3,n.payload={element:null},n.callback=function(){kl(e,t)},n}function Cl(e){return(e=aa(e)).tag=3,e}function El(e,t,n,r){var o=n.type.getDerivedStateFromError;if("function"==typeof o){var a=r.value;e.payload=function(){return o(a)},e.callback=function(){wl(t,n,r)}}var i=n.stateNode;null!==i&&"function"==typeof i.componentDidCatch&&(e.callback=function(){wl(t,n,r),"function"!=typeof o&&(null===Cu?Cu=new Set([this]):Cu.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Al=Error(i(461)),Pl=!1;function Tl(e,t,n,r){t.child=null===e?rl(t,null,n,r):nl(t,e.child,n,r)}function _l(e,t,n,r,o){n=n.render;var a=t.ref;if("ref"in r){var i={};for(var l in r)"ref"!==l&&(i[l]=r[l])}else i=r;return Ao(t),r=Oa(e,t,n,i,a,o),l=$a(),null===e||Pl?(ao&&l&&to(t),t.flags|=1,Tl(e,t,r,o),t.child):(La(e,t,o),Gl(e,t,o))}function Rl(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Lr(a)||void 0!==a.defaultProps||null!==n.compare?((e=Dr(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,zl(e,t,a,r,o))}if(a=e.child,!Xl(e,o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:Xn)(i,r)&&e.ref===t.ref)return Gl(e,t,o)}return t.flags|=1,(e=jr(a,r)).ref=t.ref,e.return=t,t.child=e}function zl(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(Xn(a,r)&&e.ref===t.ref){if(Pl=!1,t.pendingProps=r=a,!Xl(e,o))return t.lanes=e.lanes,Gl(e,t,o);131072&e.flags&&(Pl=!0)}}return Fl(e,t,n,r,o)}function Ol(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(128&t.flags){if(r=null!==a?a.baseLanes|n:n,null!==e){for(o=t.child=e.child,a=0;null!==o;)a=a|o.lanes|o.childLanes,o=o.sibling;t.childLanes=a&~r}else t.childLanes=0,t.child=null;return Ml(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Ml(e,t,null!==a?a.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Ho(0,null!==a?a.cachePool:null),null!==a?ga(t,a):ya(),ll(t)}else null!==a?(Ho(0,a.cachePool),ga(t,a),sl(),t.memoizedState=null):(null!==e&&Ho(0,null),ya(),sl());return Tl(e,t,o,n),t.child}function Ml(e,t,n,r){var o=Wo();return o=null===o?null:{parent:Mo._currentValue,pool:o},t.memoizedState={baseLanes:n,cachePool:o},null!==e&&Ho(0,null),ya(),ll(t),null!==e&&Co(e,t,r,!0),null}function Nl(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=4194816);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(i(284));null!==e&&e.ref===n||(t.flags|=4194816)}}function Fl(e,t,n,r,o){return Ao(t),n=Oa(e,t,n,r,void 0,o),r=$a(),null===e||Pl?(ao&&r&&to(t),t.flags|=1,Tl(e,t,n,o),t.child):(La(e,t,o),Gl(e,t,o))}function $l(e,t,n,r,o,a){return Ao(t),t.updateQueue=null,n=Na(t,r,n,o),Ma(e),r=$a(),null===e||Pl?(ao&&r&&to(t),t.flags|=1,Tl(e,t,n,a),t.child):(La(e,t,a),Gl(e,t,a))}function Ll(e,t,n,r,o){if(Ao(t),null===t.stateNode){var a=Nr,i=n.contextType;"object"==typeof i&&null!==i&&(a=Po(i)),a=new n(r,a),t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=pl,t.stateNode=a,a._reactInternals=t,(a=t.stateNode).props=r,a.state=t.memoizedState,a.refs={},ra(t),i=n.contextType,a.context="object"==typeof i&&null!==i?Po(i):Nr,a.state=t.memoizedState,"function"==typeof(i=n.getDerivedStateFromProps)&&(fl(t,n,i,r),a.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(i=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),i!==a.state&&pl.enqueueReplaceState(a,a.state,null),da(t,r,a,o),ca(),a.state=t.memoizedState),"function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){a=t.stateNode;var l=t.memoizedProps,s=gl(n,l);a.props=s;var u=a.context,c=n.contextType;i=Nr,"object"==typeof c&&null!==c&&(i=Po(c));var d=n.getDerivedStateFromProps;c="function"==typeof d||"function"==typeof a.getSnapshotBeforeUpdate,l=t.pendingProps!==l,c||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l||u!==i)&&hl(t,a,r,i),na=!1;var f=t.memoizedState;a.state=f,da(t,r,a,o),ca(),u=t.memoizedState,l||f!==u||na?("function"==typeof d&&(fl(t,n,d,r),u=t.memoizedState),(s=na||ml(t,n,s,r,f,u,i))?(c||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=i,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,oa(e,t),c=gl(n,i=t.memoizedProps),a.props=c,d=t.pendingProps,f=a.context,u=n.contextType,s=Nr,"object"==typeof u&&null!==u&&(s=Po(u)),(u="function"==typeof(l=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i!==d||f!==s)&&hl(t,a,r,s),na=!1,f=t.memoizedState,a.state=f,da(t,r,a,o),ca();var p=t.memoizedState;i!==d||f!==p||na||null!==e&&null!==e.dependencies&&Eo(e.dependencies)?("function"==typeof l&&(fl(t,n,l,r),p=t.memoizedState),(c=na||ml(t,n,c,r,f,p,s)||null!==e&&null!==e.dependencies&&Eo(e.dependencies))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=s,r=c):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return a=r,Nl(e,t),r=!!(128&t.flags),a||r?(a=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:a.render(),t.flags|=1,null!==e&&r?(t.child=nl(t,e.child,null,o),t.child=nl(t,null,n,o)):Tl(e,t,n,o),t.memoizedState=a.state,e=t.child):e=Gl(e,t,o),e}function jl(e,t,n,r){return mo(),t.flags|=256,Tl(e,t,n,r),t.child}var Il={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function Dl(e){return{baseLanes:e,cachePool:Uo()}}function Bl(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=gu),e}function Vl(e,t,n){var r,o=t.pendingProps,a=!1,l=!!(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&cl.current)),r&&(a=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(ao){if(a?il(t):sl(),ao){var s,u=oo;if(s=u){e:{for(s=u,u=lo;8!==s.nodeType;){if(!u){u=null;break e}if(null===(s=yd(s.nextSibling))){u=null;break e}}u=s}null!==u?(t.memoizedState={dehydrated:u,treeContext:null!==Xr?{id:Yr,overflow:Zr}:null,retryLane:536870912,hydrationErrors:null},(s=$r(18,null,null,0)).stateNode=u,s.return=t,t.child=s,ro=t,oo=null,s=!0):s=!1}s||uo(t)}if(null!==(u=t.memoizedState)&&null!==(u=u.dehydrated))return gd(u)?t.lanes=32:t.lanes=536870912,null;ul(t)}return u=o.children,o=o.fallback,a?(sl(),u=Hl({mode:"hidden",children:u},a=t.mode),o=Br(o,a,n,null),u.return=t,o.return=t,u.sibling=o,t.child=u,(a=t.child).memoizedState=Dl(n),a.childLanes=Bl(e,r,n),t.memoizedState=Il,o):(il(t),Wl(t,u))}if(null!==(s=e.memoizedState)&&null!==(u=s.dehydrated)){if(l)256&t.flags?(il(t),t.flags&=-257,t=Ul(e,t,n)):null!==t.memoizedState?(sl(),t.child=e.child,t.flags|=128,t=null):(sl(),a=o.fallback,u=t.mode,o=Hl({mode:"visible",children:o.children},u),(a=Br(a,u,n,null)).flags|=2,o.return=t,a.return=t,o.sibling=a,t.child=o,nl(t,e.child,null,n),(o=t.child).memoizedState=Dl(n),o.childLanes=Bl(e,r,n),t.memoizedState=Il,t=a);else if(il(t),gd(u)){if(r=u.nextSibling&&u.nextSibling.dataset)var c=r.dgst;r=c,(o=Error(i(419))).stack="",o.digest=r,go({value:o,source:null,stack:null}),t=Ul(e,t,n)}else if(Pl||Co(e,t,n,!1),r=0!==(n&e.childLanes),Pl||r){if(null!==(r=ru)&&0!==(o=0!==((o=42&(o=n&-n)?1:Te(o))&(r.suspendedLanes|n))?0:o)&&o!==s.retryLane)throw s.retryLane=o,zr(e,o),$u(r,0,o),Al;"$?"===u.data||Ku(),t=Ul(e,t,n)}else"$?"===u.data?(t.flags|=192,t.child=e.child,t=null):(e=s.treeContext,oo=yd(u.nextSibling),ro=t,ao=!0,io=null,lo=!1,null!==e&&(Qr[Gr++]=Yr,Qr[Gr++]=Zr,Qr[Gr++]=Xr,Yr=e.id,Zr=e.overflow,Xr=t),(t=Wl(t,o.children)).flags|=4096);return t}return a?(sl(),a=o.fallback,u=t.mode,c=(s=e.child).sibling,(o=jr(s,{mode:"hidden",children:o.children})).subtreeFlags=65011712&s.subtreeFlags,null!==c?a=jr(c,a):(a=Br(a,u,n,null)).flags|=2,a.return=t,o.return=t,o.sibling=a,t.child=o,o=a,a=t.child,null===(u=e.child.memoizedState)?u=Dl(n):(null!==(s=u.cachePool)?(c=Mo._currentValue,s=s.parent!==c?{parent:c,pool:c}:s):s=Uo(),u={baseLanes:u.baseLanes|n,cachePool:s}),a.memoizedState=u,a.childLanes=Bl(e,r,n),t.memoizedState=Il,o):(il(t),e=(n=e.child).sibling,(n=jr(n,{mode:"visible",children:o.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function Wl(e,t){return(t=Hl({mode:"visible",children:t},e.mode)).return=e,e.child=t}function Hl(e,t){return(e=$r(22,e,null,t)).lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function Ul(e,t,n){return nl(t,e.child,null,n),(e=Wl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function ql(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),wo(e.return,t,n)}function Kl(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Ql(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Tl(e,t,r.children,n),2&(r=cl.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ql(e,n,t);else if(19===e.tag)ql(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(B(cl,r),o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===dl(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Kl(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===dl(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Kl(t,!0,n,null,a);break;case"together":Kl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Gl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),pu|=t.lanes,0===(n&t.childLanes)){if(null===e)return null;if(Co(e,t,n,!1),0===(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=jr(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=jr(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Xl(e,t){return 0!==(e.lanes&t)||!(null===(e=e.dependencies)||!Eo(e))}function Yl(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)Pl=!0;else{if(!(Xl(e,n)||128&t.flags))return Pl=!1,function(e,t,n){switch(t.tag){case 3:q(t,t.stateNode.containerInfo),So(0,Mo,e.memoizedState.cache),mo();break;case 27:case 5:Q(t);break;case 4:q(t,t.stateNode.containerInfo);break;case 10:So(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(il(t),t.flags|=128,null):0!==(n&t.child.childLanes)?Vl(e,t,n):(il(t),null!==(e=Gl(e,t,n))?e.sibling:null);il(t);break;case 19:var o=!!(128&e.flags);if((r=0!==(n&t.childLanes))||(Co(e,t,n,!1),r=0!==(n&t.childLanes)),o){if(r)return Ql(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),B(cl,cl.current),r)break;return null;case 22:case 23:return t.lanes=0,Ol(e,t,n);case 24:So(0,Mo,e.memoizedState.cache)}return Gl(e,t,n)}(e,t,n);Pl=!!(131072&e.flags)}else Pl=!1,ao&&1048576&t.flags&&eo(t,Kr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,o=r._init;if(r=o(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((o=r.$$typeof)===w){t.tag=11,t=_l(null,t,r,e,n);break e}if(o===E){t.tag=14,t=Rl(null,t,r,e,n);break e}}throw t=O(r)||r,Error(i(306,t,""))}Lr(r)?(e=gl(r,e),t.tag=1,t=Ll(null,t,r,e,n)):(t.tag=0,t=Fl(null,t,r,e,n))}return t;case 0:return Fl(e,t,t.type,t.pendingProps,n);case 1:return Ll(e,t,r=t.type,o=gl(r,t.pendingProps),n);case 3:e:{if(q(t,t.stateNode.containerInfo),null===e)throw Error(i(387));r=t.pendingProps;var a=t.memoizedState;o=a.element,oa(e,t),da(t,r,null,n);var l=t.memoizedState;if(r=l.cache,So(0,Mo,r),r!==a.cache&&xo(t,[Mo],n,!0),ca(),r=l.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:l.cache},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=jl(e,t,r,n);break e}if(r!==o){go(o=Cr(Error(i(424)),t)),t=jl(e,t,r,n);break e}for(e=9===(e=t.stateNode.containerInfo).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,oo=yd(e.firstChild),ro=t,ao=!0,io=null,lo=!0,n=rl(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(mo(),r===o){t=Gl(e,t,n);break e}Tl(e,t,r,n)}t=t.child}return t;case 26:return Nl(e,t),null===e?(n=Td(t.type,null,t.pendingProps,null))?t.memoizedState=n:ao||(n=t.type,e=t.pendingProps,(r=rd(H.current).createElement(n))[Oe]=t,r[Me]=e,ed(r,n,e),Ue(r),t.stateNode=r):t.memoizedState=Td(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return Q(t),null===e&&ao&&(r=t.stateNode=Sd(t.type,t.pendingProps,H.current),ro=t,lo=!0,o=oo,pd(t.type)?(vd=o,oo=yd(r.firstChild)):oo=o),Tl(e,t,t.pendingProps.children,n),Nl(e,t),null===e&&(t.flags|=4194304),t.child;case 5:return null===e&&ao&&((o=r=oo)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var o=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Ie])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(a=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(a!==o.rel||e.getAttribute("href")!==(null==o.href||""===o.href?null:o.href)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin)||e.getAttribute("title")!==(null==o.title?null:o.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((a=e.getAttribute("src"))!==(null==o.src?null:o.src)||e.getAttribute("type")!==(null==o.type?null:o.type)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin))&&a&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var a=null==o.name?null:""+o.name;if("hidden"===o.type&&e.getAttribute("name")===a)return e}if(null===(e=yd(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,lo))?(t.stateNode=r,ro=t,oo=yd(r.firstChild),lo=!1,o=!0):o=!1),o||uo(t)),Q(t),o=t.type,a=t.pendingProps,l=null!==e?e.memoizedProps:null,r=a.children,id(o,a)?r=null:null!==l&&id(o,l)&&(t.flags|=32),null!==t.memoizedState&&(o=Oa(e,t,Fa,null,null,n),Qd._currentValue=o),Nl(e,t),Tl(e,t,r,n),t.child;case 6:return null===e&&ao&&((e=n=oo)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=yd(e.nextSibling)))return null}return e}(n,t.pendingProps,lo))?(t.stateNode=n,ro=t,oo=null,e=!0):e=!1),e||uo(t)),null;case 13:return Vl(e,t,n);case 4:return q(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=nl(t,null,r,n):Tl(e,t,r,n),t.child;case 11:return _l(e,t,t.type,t.pendingProps,n);case 7:return Tl(e,t,t.pendingProps,n),t.child;case 8:case 12:return Tl(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,So(0,t.type,r.value),Tl(e,t,r.children,n),t.child;case 9:return o=t.type._context,r=t.pendingProps.children,Ao(t),r=r(o=Po(o)),t.flags|=1,Tl(e,t,r,n),t.child;case 14:return Rl(e,t,t.type,t.pendingProps,n);case 15:return zl(e,t,t.type,t.pendingProps,n);case 19:return Ql(e,t,n);case 31:return r=t.pendingProps,n=t.mode,r={mode:r.mode,children:r.children},null===e?((n=Hl(r,n)).ref=t.ref,t.child=n,n.return=t,t=n):((n=jr(e.child,r)).ref=t.ref,t.child=n,n.return=t,t=n),t;case 22:return Ol(e,t,n);case 24:return Ao(t),r=Po(Mo),null===e?(null===(o=Wo())&&(o=ru,a=No(),o.pooledCache=a,a.refCount++,null!==a&&(o.pooledCacheLanes|=n),o=a),t.memoizedState={parent:r,cache:o},ra(t),So(0,Mo,o)):(0!==(e.lanes&n)&&(oa(e,t),da(t,null,null,n),ca()),o=e.memoizedState,a=t.memoizedState,o.parent!==r?(o={parent:r,cache:r},t.memoizedState=o,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=o),So(0,Mo,r)):(r=a.cache,So(0,Mo,r),r!==o.cache&&xo(t,[Mo],n,!0))),Tl(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(i(156,t.tag))}function Zl(e){e.flags|=4}function Jl(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Bd(t)){if(null!==(t=ol.current)&&((4194048&au)===au?null!==al:(62914560&au)!==au&&!(536870912&au)||t!==al))throw Jo=Go,Ko;e.flags|=8192}}function es(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?xe():536870912,e.lanes|=t,yu|=t)}function ts(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ns(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=65011712&o.subtreeFlags,r|=65011712&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function rs(e,t,n){var r=t.pendingProps;switch(no(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return ns(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),ko(Mo),K(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(po(t)?Zl(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,ho())),ns(t),null;case 26:return n=t.memoizedState,null===e?(Zl(t),null!==n?(ns(t),Jl(t,n)):(ns(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Zl(t),ns(t),Jl(t,n)):(ns(t),t.flags&=-16777217):(e.memoizedProps!==r&&Zl(t),ns(t),t.flags&=-16777217),null;case 27:G(t),n=H.current;var o=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Zl(t);else{if(!r){if(null===t.stateNode)throw Error(i(166));return ns(t),null}e=V.current,po(t)?co(t):(e=Sd(o,r,n),t.stateNode=e,Zl(t))}return ns(t),null;case 5:if(G(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Zl(t);else{if(!r){if(null===t.stateNode)throw Error(i(166));return ns(t),null}if(e=V.current,po(t))co(t);else{switch(o=rd(H.current),e){case 1:e=o.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=o.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=o.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=o.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=o.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?o.createElement("select",{is:r.is}):o.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?o.createElement(n,{is:r.is}):o.createElement(n)}}e[Oe]=t,e[Me]=r;e:for(o=t.child;null!==o;){if(5===o.tag||6===o.tag)e.appendChild(o.stateNode);else if(4!==o.tag&&27!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break e;for(;null===o.sibling;){if(null===o.return||o.return===t)break e;o=o.return}o.sibling.return=o.return,o=o.sibling}t.stateNode=e;e:switch(ed(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Zl(t)}}return ns(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Zl(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(e=H.current,po(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(o=ro))switch(o.tag){case 27:case 5:r=o.memoizedProps}e[Oe]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Xc(e.nodeValue,n)))||uo(t)}else(e=rd(e).createTextNode(r))[Oe]=t,t.stateNode=e}return ns(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(o=po(t),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error(i(318));if(!(o=null!==(o=t.memoizedState)?o.dehydrated:null))throw Error(i(317));o[Oe]=t}else mo(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;ns(t),o=!1}else o=ho(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=o),o=!0;if(!o)return 256&t.flags?(ul(t),t):(ul(t),null)}if(ul(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){o=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(o=r.alternate.memoizedState.cachePool.pool);var a=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(a=r.memoizedState.cachePool.pool),a!==o&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),es(t,t.updateQueue),ns(t),null;case 4:return K(),null===e&&Dc(t.stateNode.containerInfo),ns(t),null;case 10:return ko(t.type),ns(t),null;case 19:if(D(cl),null===(o=t.memoizedState))return ns(t),null;if(r=!!(128&t.flags),null===(a=o.rendering))if(r)ts(o,!1);else{if(0!==fu||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(a=dl(e))){for(t.flags|=128,ts(o,!1),e=a.updateQueue,t.updateQueue=e,es(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Ir(n,e),n=n.sibling;return B(cl,1&cl.current|2),t.child}e=e.sibling}null!==o.tail&&te()>wu&&(t.flags|=128,r=!0,ts(o,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=dl(a))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,es(t,e),ts(o,!0),null===o.tail&&"hidden"===o.tailMode&&!a.alternate&&!ao)return ns(t),null}else 2*te()-o.renderingStartTime>wu&&536870912!==n&&(t.flags|=128,r=!0,ts(o,!1),t.lanes=4194304);o.isBackwards?(a.sibling=t.child,t.child=a):(null!==(e=o.last)?e.sibling=a:t.child=a,o.last=a)}return null!==o.tail?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=te(),t.sibling=null,e=cl.current,B(cl,r?1&e|2:1&e),t):(ns(t),null);case 22:case 23:return ul(t),va(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(ns(t),6&t.subtreeFlags&&(t.flags|=8192)):ns(t),null!==(n=t.updateQueue)&&es(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&D(Vo),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),ko(Mo),ns(t),null;case 25:case 30:return null}throw Error(i(156,t.tag))}function os(e,t){switch(no(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ko(Mo),K(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return G(t),null;case 13:if(ul(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));mo()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return D(cl),null;case 4:return K(),null;case 10:return ko(t.type),null;case 22:case 23:return ul(t),va(),null!==e&&D(Vo),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return ko(Mo),null;default:return null}}function as(e,t){switch(no(t),t.tag){case 3:ko(Mo),K();break;case 26:case 27:case 5:G(t);break;case 4:K();break;case 13:ul(t);break;case 19:D(cl);break;case 10:ko(t.type);break;case 22:case 23:ul(t),va(),null!==e&&D(Vo);break;case 24:ko(Mo)}}function is(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var o=r.next;n=o;do{if((n.tag&e)===e){r=void 0;var a=n.create,i=n.inst;r=a(),i.destroy=r}n=n.next}while(n!==o)}}catch(e){cc(t,t.return,e)}}function ls(e,t,n){try{var r=t.updateQueue,o=null!==r?r.lastEffect:null;if(null!==o){var a=o.next;r=a;do{if((r.tag&e)===e){var i=r.inst,l=i.destroy;if(void 0!==l){i.destroy=void 0,o=t;var s=n,u=l;try{u()}catch(e){cc(o,s,e)}}}r=r.next}while(r!==a)}}catch(e){cc(t,t.return,e)}}function ss(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{pa(t,n)}catch(t){cc(e,e.return,t)}}}function us(e,t,n){n.props=gl(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){cc(e,t,n)}}function cs(e,t){try{var n=e.ref;if(null!==n){switch(e.tag){case 26:case 27:case 5:var r=e.stateNode;break;default:r=e.stateNode}"function"==typeof n?e.refCleanup=n(r):n.current=r}}catch(n){cc(e,t,n)}}function ds(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){cc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){cc(e,t,n)}else n.current=null}function fs(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){cc(e,e.return,t)}}function ps(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var o=null,a=null,l=null,s=null,u=null,c=null,d=null;for(m in n){var f=n[m];if(n.hasOwnProperty(m)&&null!=f)switch(m){case"checked":case"value":break;case"defaultValue":u=f;default:r.hasOwnProperty(m)||Zc(e,t,m,null,r,f)}}for(var p in r){var m=r[p];if(f=n[p],r.hasOwnProperty(p)&&(null!=m||null!=f))switch(p){case"type":a=m;break;case"name":o=m;break;case"checked":c=m;break;case"defaultChecked":d=m;break;case"value":l=m;break;case"defaultValue":s=m;break;case"children":case"dangerouslySetInnerHTML":if(null!=m)throw Error(i(137,t));break;default:m!==f&&Zc(e,t,p,m,r,f)}}return void gt(e,l,s,u,c,d,a,o);case"select":for(a in m=l=s=p=null,n)if(u=n[a],n.hasOwnProperty(a)&&null!=u)switch(a){case"value":break;case"multiple":m=u;default:r.hasOwnProperty(a)||Zc(e,t,a,null,r,u)}for(o in r)if(a=r[o],u=n[o],r.hasOwnProperty(o)&&(null!=a||null!=u))switch(o){case"value":p=a;break;case"defaultValue":s=a;break;case"multiple":l=a;default:a!==u&&Zc(e,t,o,a,r,u)}return t=s,n=l,r=m,void(null!=p?bt(e,!!n,p,!1):!!r!=!!n&&(null!=t?bt(e,!!n,t,!0):bt(e,!!n,n?[]:"",!1)));case"textarea":for(s in m=p=null,n)if(o=n[s],n.hasOwnProperty(s)&&null!=o&&!r.hasOwnProperty(s))switch(s){case"value":case"children":break;default:Zc(e,t,s,null,r,o)}for(l in r)if(o=r[l],a=n[l],r.hasOwnProperty(l)&&(null!=o||null!=a))switch(l){case"value":p=o;break;case"defaultValue":m=o;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=o)throw Error(i(91));break;default:o!==a&&Zc(e,t,l,o,r,a)}return void St(e,p,m);case"option":for(var h in n)p=n[h],n.hasOwnProperty(h)&&null!=p&&!r.hasOwnProperty(h)&&("selected"===h?e.selected=!1:Zc(e,t,h,null,r,p));for(u in r)p=r[u],m=n[u],!r.hasOwnProperty(u)||p===m||null==p&&null==m||("selected"===u?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Zc(e,t,u,p,r,m));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&Zc(e,t,g,null,r,p);for(c in r)if(p=r[c],m=n[c],r.hasOwnProperty(c)&&p!==m&&(null!=p||null!=m))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(i(137,t));break;default:Zc(e,t,c,p,r,m)}return;default:if(At(t)){for(var y in n)p=n[y],n.hasOwnProperty(y)&&void 0!==p&&!r.hasOwnProperty(y)&&Jc(e,t,y,void 0,r,p);for(d in r)p=r[d],m=n[d],!r.hasOwnProperty(d)||p===m||void 0===p&&void 0===m||Jc(e,t,d,p,r,m);return}}for(var v in n)p=n[v],n.hasOwnProperty(v)&&null!=p&&!r.hasOwnProperty(v)&&Zc(e,t,v,null,r,p);for(f in r)p=r[f],m=n[f],!r.hasOwnProperty(f)||p===m||null==p&&null==m||Zc(e,t,f,p,r,m)}(r,e.type,n,t),r[Me]=t}catch(t){cc(e,e.return,t)}}function ms(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&pd(e.type)||4===e.tag}function hs(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ms(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&pd(e.type))continue e;if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function gs(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?(9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).insertBefore(e,t):((t=9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Yc));else if(4!==r&&(27===r&&pd(e.type)&&(n=e.stateNode,t=null),null!==(e=e.child)))for(gs(e,t,n),e=e.sibling;null!==e;)gs(e,t,n),e=e.sibling}function ys(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&(27===r&&pd(e.type)&&(n=e.stateNode),null!==(e=e.child)))for(ys(e,t,n),e=e.sibling;null!==e;)ys(e,t,n),e=e.sibling}function vs(e){var t=e.stateNode,n=e.memoizedProps;try{for(var r=e.type,o=t.attributes;o.length;)t.removeAttributeNode(o[0]);ed(t,r,n),t[Oe]=e,t[Me]=n}catch(t){cc(e,e.return,t)}}var bs=!1,Ss=!1,ks=!1,ws="function"==typeof WeakSet?WeakSet:Set,xs=null;function Cs(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:Ls(e,n),4&r&&is(5,n);break;case 1:if(Ls(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){cc(n,n.return,e)}else{var o=gl(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(o,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){cc(n,n.return,e)}}64&r&&ss(n),512&r&&cs(n,n.return);break;case 3:if(Ls(e,n),64&r&&null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:t=n.child.stateNode}try{pa(e,t)}catch(e){cc(n,n.return,e)}}break;case 27:null===t&&4&r&&vs(n);case 26:case 5:Ls(e,n),null===t&&4&r&&fs(n),512&r&&cs(n,n.return);break;case 12:Ls(e,n);break;case 13:Ls(e,n),4&r&&Rs(e,n),64&r&&null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)&&function(e,t){var n=e.ownerDocument;if("$?"!==e.data||"complete"===n.readyState)t();else{var r=function(){t(),n.removeEventListener("DOMContentLoaded",r)};n.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,n=mc.bind(null,n));break;case 22:if(!(r=null!==n.memoizedState||bs)){t=null!==t&&null!==t.memoizedState||Ss,o=bs;var a=Ss;bs=r,(Ss=t)&&!a?Is(e,n,!!(8772&n.subtreeFlags)):Ls(e,n),bs=o,Ss=a}break;case 30:break;default:Ls(e,n)}}function Es(e){var t=e.alternate;null!==t&&(e.alternate=null,Es(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&De(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var As=null,Ps=!1;function Ts(e,t,n){for(n=n.child;null!==n;)_s(e,t,n),n=n.sibling}function _s(e,t,n){if(de&&"function"==typeof de.onCommitFiberUnmount)try{de.onCommitFiberUnmount(ce,n)}catch(e){}switch(n.tag){case 26:Ss||ds(n,t),Ts(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:Ss||ds(n,t);var r=As,o=Ps;pd(n.type)&&(As=n.stateNode,Ps=!1),Ts(e,t,n),kd(n.stateNode),As=r,Ps=o;break;case 5:Ss||ds(n,t);case 6:if(r=As,o=Ps,As=null,Ts(e,t,n),Ps=o,null!==(As=r))if(Ps)try{(9===As.nodeType?As.body:"HTML"===As.nodeName?As.ownerDocument.body:As).removeChild(n.stateNode)}catch(e){cc(n,t,e)}else try{As.removeChild(n.stateNode)}catch(e){cc(n,t,e)}break;case 18:null!==As&&(Ps?(md(9===(e=As).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,n.stateNode),Tf(e)):md(As,n.stateNode));break;case 4:r=As,o=Ps,As=n.stateNode.containerInfo,Ps=!0,Ts(e,t,n),As=r,Ps=o;break;case 0:case 11:case 14:case 15:Ss||ls(2,n,t),Ss||ls(4,n,t),Ts(e,t,n);break;case 1:Ss||(ds(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&us(n,t,r)),Ts(e,t,n);break;case 21:Ts(e,t,n);break;case 22:Ss=(r=Ss)||null!==n.memoizedState,Ts(e,t,n),Ss=r;break;default:Ts(e,t,n)}}function Rs(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{Tf(e)}catch(e){cc(t,t.return,e)}}function zs(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new ws),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new ws),t;default:throw Error(i(435,e.tag))}}(e);t.forEach((function(t){var r=hc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function Os(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r],a=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 27:if(pd(s.type)){As=s.stateNode,Ps=!1;break e}break;case 5:As=s.stateNode,Ps=!1;break e;case 3:case 4:As=s.stateNode.containerInfo,Ps=!0;break e}s=s.return}if(null===As)throw Error(i(160));_s(a,l,o),As=null,Ps=!1,null!==(a=o.alternate)&&(a.return=null),o.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)Ns(t,e),t=t.sibling}var Ms=null;function Ns(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:Os(t,e),Fs(e),4&r&&(ls(3,e,e.return),is(3,e),ls(5,e,e.return));break;case 1:Os(t,e),Fs(e),512&r&&(Ss||null===n||ds(n,n.return)),64&r&&bs&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var o=Ms;if(Os(t,e),Fs(e),512&r&&(Ss||null===n||ds(n,n.return)),4&r){var a=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,o=o.ownerDocument||o;t:switch(r){case"title":(!(a=o.getElementsByTagName("title")[0])||a[Ie]||a[Oe]||"http://www.w3.org/2000/svg"===a.namespaceURI||a.hasAttribute("itemprop"))&&(a=o.createElement(r),o.head.insertBefore(a,o.querySelector("head > title"))),ed(a,r,n),a[Oe]=e,Ue(a),r=a;break e;case"link":var l=Id("link","href",o).get(r+(n.href||""));if(l)for(var s=0;s<l.length;s++)if((a=l[s]).getAttribute("href")===(null==n.href||""===n.href?null:n.href)&&a.getAttribute("rel")===(null==n.rel?null:n.rel)&&a.getAttribute("title")===(null==n.title?null:n.title)&&a.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){l.splice(s,1);break t}ed(a=o.createElement(r),r,n),o.head.appendChild(a);break;case"meta":if(l=Id("meta","content",o).get(r+(n.content||"")))for(s=0;s<l.length;s++)if((a=l[s]).getAttribute("content")===(null==n.content?null:""+n.content)&&a.getAttribute("name")===(null==n.name?null:n.name)&&a.getAttribute("property")===(null==n.property?null:n.property)&&a.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&a.getAttribute("charset")===(null==n.charSet?null:n.charSet)){l.splice(s,1);break t}ed(a=o.createElement(r),r,n),o.head.appendChild(a);break;default:throw Error(i(468,r))}a[Oe]=e,Ue(a),r=a}e.stateNode=r}else Dd(o,e.type,e.stateNode);else e.stateNode=Nd(o,r,e.memoizedProps);else a!==r?(null===a?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):a.count--,null===r?Dd(o,e.type,e.stateNode):Nd(o,r,e.memoizedProps)):null===r&&null!==e.stateNode&&ps(e,e.memoizedProps,n.memoizedProps)}break;case 27:Os(t,e),Fs(e),512&r&&(Ss||null===n||ds(n,n.return)),null!==n&&4&r&&ps(e,e.memoizedProps,n.memoizedProps);break;case 5:if(Os(t,e),Fs(e),512&r&&(Ss||null===n||ds(n,n.return)),32&e.flags){o=e.stateNode;try{wt(o,"")}catch(t){cc(e,e.return,t)}}4&r&&null!=e.stateNode&&ps(e,o=e.memoizedProps,null!==n?n.memoizedProps:o),1024&r&&(ks=!0);break;case 6:if(Os(t,e),Fs(e),4&r){if(null===e.stateNode)throw Error(i(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){cc(e,e.return,t)}}break;case 3:if(jd=null,o=Ms,Ms=Cd(t.containerInfo),Os(t,e),Ms=o,Fs(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Tf(t.containerInfo)}catch(t){cc(e,e.return,t)}ks&&(ks=!1,$s(e));break;case 4:r=Ms,Ms=Cd(e.stateNode.containerInfo),Os(t,e),Fs(e),Ms=r;break;case 12:default:Os(t,e),Fs(e);break;case 13:Os(t,e),Fs(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(ku=te()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,zs(e,r));break;case 22:o=null!==e.memoizedState;var u=null!==n&&null!==n.memoizedState,c=bs,d=Ss;if(bs=c||o,Ss=d||u,Os(t,e),Ss=d,bs=c,Fs(e),8192&r)e:for(t=e.stateNode,t._visibility=o?-2&t._visibility:1|t._visibility,o&&(null===n||u||bs||Ss||js(e)),n=null,t=e;;){if(5===t.tag||26===t.tag){if(null===n){u=n=t;try{if(a=u.stateNode,o)"function"==typeof(l=a.style).setProperty?l.setProperty("display","none","important"):l.display="none";else{s=u.stateNode;var f=u.memoizedProps.style,p=null!=f&&f.hasOwnProperty("display")?f.display:null;s.style.display=null==p||"boolean"==typeof p?"":(""+p).trim()}}catch(e){cc(u,u.return,e)}}}else if(6===t.tag){if(null===n){u=t;try{u.stateNode.nodeValue=o?"":u.memoizedProps}catch(e){cc(u,u.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,zs(e,n));break;case 19:Os(t,e),Fs(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,zs(e,r));case 30:case 21:}}function Fs(e){var t=e.flags;if(2&t){try{for(var n,r=e.return;null!==r;){if(ms(r)){n=r;break}r=r.return}if(null==n)throw Error(i(160));switch(n.tag){case 27:var o=n.stateNode;ys(e,hs(e),o);break;case 5:var a=n.stateNode;32&n.flags&&(wt(a,""),n.flags&=-33),ys(e,hs(e),a);break;case 3:case 4:var l=n.stateNode.containerInfo;gs(e,hs(e),l);break;default:throw Error(i(161))}}catch(t){cc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function $s(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;$s(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function Ls(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)Cs(e,t.alternate,t),t=t.sibling}function js(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:ls(4,t,t.return),js(t);break;case 1:ds(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&us(t,t.return,n),js(t);break;case 27:kd(t.stateNode);case 26:case 5:ds(t,t.return),js(t);break;case 22:null===t.memoizedState&&js(t);break;default:js(t)}e=e.sibling}}function Is(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,o=e,a=t,i=a.flags;switch(a.tag){case 0:case 11:case 15:Is(o,a,n),is(4,a);break;case 1:if(Is(o,a,n),"function"==typeof(o=(r=a).stateNode).componentDidMount)try{o.componentDidMount()}catch(e){cc(r,r.return,e)}if(null!==(o=(r=a).updateQueue)){var l=r.stateNode;try{var s=o.shared.hiddenCallbacks;if(null!==s)for(o.shared.hiddenCallbacks=null,o=0;o<s.length;o++)fa(s[o],l)}catch(e){cc(r,r.return,e)}}n&&64&i&&ss(a),cs(a,a.return);break;case 27:vs(a);case 26:case 5:Is(o,a,n),n&&null===r&&4&i&&fs(a),cs(a,a.return);break;case 12:Is(o,a,n);break;case 13:Is(o,a,n),n&&4&i&&Rs(o,a);break;case 22:null===a.memoizedState&&Is(o,a,n),cs(a,a.return);break;case 30:break;default:Is(o,a,n)}t=t.sibling}}function Ds(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&Fo(n))}function Bs(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Fo(e))}function Vs(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)Ws(e,t,n,r),t=t.sibling}function Ws(e,t,n,r){var o=t.flags;switch(t.tag){case 0:case 11:case 15:Vs(e,t,n,r),2048&o&&is(9,t);break;case 1:case 13:default:Vs(e,t,n,r);break;case 3:Vs(e,t,n,r),2048&o&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Fo(e)));break;case 12:if(2048&o){Vs(e,t,n,r),e=t.stateNode;try{var a=t.memoizedProps,i=a.id,l=a.onPostCommit;"function"==typeof l&&l(i,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){cc(t,t.return,e)}}else Vs(e,t,n,r);break;case 23:break;case 22:a=t.stateNode,i=t.alternate,null!==t.memoizedState?2&a._visibility?Vs(e,t,n,r):Us(e,t):2&a._visibility?Vs(e,t,n,r):(a._visibility|=2,Hs(e,t,n,r,!!(10256&t.subtreeFlags))),2048&o&&Ds(i,t);break;case 24:Vs(e,t,n,r),2048&o&&Bs(t.alternate,t)}}function Hs(e,t,n,r,o){for(o=o&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var a=e,i=t,l=n,s=r,u=i.flags;switch(i.tag){case 0:case 11:case 15:Hs(a,i,l,s,o),is(8,i);break;case 23:break;case 22:var c=i.stateNode;null!==i.memoizedState?2&c._visibility?Hs(a,i,l,s,o):Us(a,i):(c._visibility|=2,Hs(a,i,l,s,o)),o&&2048&u&&Ds(i.alternate,i);break;case 24:Hs(a,i,l,s,o),o&&2048&u&&Bs(i.alternate,i);break;default:Hs(a,i,l,s,o)}t=t.sibling}}function Us(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,o=r.flags;switch(r.tag){case 22:Us(n,r),2048&o&&Ds(r.alternate,r);break;case 24:Us(n,r),2048&o&&Bs(r.alternate,r);break;default:Us(n,r)}t=t.sibling}}var qs=8192;function Ks(e){if(e.subtreeFlags&qs)for(e=e.child;null!==e;)Qs(e),e=e.sibling}function Qs(e){switch(e.tag){case 26:Ks(e),e.flags&qs&&null!==e.memoizedState&&function(e,t,n){if(null===Vd)throw Error(i(475));var r=Vd;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var o=_d(n.href),a=e.querySelector(Rd(o));if(a)return null!==(e=a._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Hd.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=a,void Ue(a);a=e.ownerDocument||e,n=zd(n),(o=wd.get(o))&&$d(n,o),Ue(a=a.createElement("link"));var l=a;l._p=new Promise((function(e,t){l.onload=e,l.onerror=t})),ed(a,"link",n),t.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=Hd.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(Ms,e.memoizedState,e.memoizedProps);break;case 5:default:Ks(e);break;case 3:case 4:var t=Ms;Ms=Cd(e.stateNode.containerInfo),Ks(e),Ms=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=qs,qs=16777216,Ks(e),qs=t):Ks(e))}}function Gs(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Xs(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];xs=r,Js(r,e)}Gs(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Ys(e),e=e.sibling}function Ys(e){switch(e.tag){case 0:case 11:case 15:Xs(e),2048&e.flags&&ls(9,e,e.return);break;case 3:case 12:default:Xs(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&2&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-3,Zs(e)):Xs(e)}}function Zs(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];xs=r,Js(r,e)}Gs(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:ls(8,t,t.return),Zs(t);break;case 22:2&(n=t.stateNode)._visibility&&(n._visibility&=-3,Zs(t));break;default:Zs(t)}e=e.sibling}}function Js(e,t){for(;null!==xs;){var n=xs;switch(n.tag){case 0:case 11:case 15:ls(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Fo(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,xs=r;else e:for(n=e;null!==xs;){var o=(r=xs).sibling,a=r.return;if(Es(r),r===n){xs=null;break e}if(null!==o){o.return=a,xs=o;break e}xs=a}}}var eu={getCacheForType:function(e){var t=Po(Mo),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},tu="function"==typeof WeakMap?WeakMap:Map,nu=0,ru=null,ou=null,au=0,iu=0,lu=null,su=!1,uu=!1,cu=!1,du=0,fu=0,pu=0,mu=0,hu=0,gu=0,yu=0,vu=null,bu=null,Su=!1,ku=0,wu=1/0,xu=null,Cu=null,Eu=0,Au=null,Pu=null,Tu=0,_u=0,Ru=null,zu=null,Ou=0,Mu=null;function Nu(){return 2&nu&&0!==au?au&-au:null!==N.T?0!==jo?jo:_c():Re()}function Fu(){0===gu&&(gu=536870912&au&&!ao?536870912:we());var e=ol.current;return null!==e&&(e.flags|=32),gu}function $u(e,t,n){(e!==ru||2!==iu&&9!==iu)&&null===e.cancelPendingCommit||(Wu(e,0),Du(e,au,gu,!1)),Ee(e,n),2&nu&&e===ru||(e===ru&&(!(2&nu)&&(mu|=n),4===fu&&Du(e,au,gu,!1)),wc(e))}function Lu(e,t,n){if(6&nu)throw Error(i(327));for(var r=!n&&!(124&t)&&0===(t&e.expiredLanes)||Se(e,t),o=r?function(e,t){var n=nu;nu|=2;var r=Uu(),o=qu();ru!==e||au!==t?(xu=null,wu=te()+500,Wu(e,t)):uu=Se(e,t);e:for(;;)try{if(0!==iu&&null!==ou){t=ou;var a=lu;t:switch(iu){case 1:iu=0,lu=null,Ju(e,t,a,1);break;case 2:case 9:if(Xo(a)){iu=0,lu=null,Zu(t);break}t=function(){2!==iu&&9!==iu||ru!==e||(iu=7),wc(e)},a.then(t,t);break e;case 3:iu=7;break e;case 4:iu=5;break e;case 7:Xo(a)?(iu=0,lu=null,Zu(t)):(iu=0,lu=null,Ju(e,t,a,7));break;case 5:var l=null;switch(ou.tag){case 26:l=ou.memoizedState;case 5:case 27:var s=ou;if(!l||Bd(l)){iu=0,lu=null;var u=s.sibling;if(null!==u)ou=u;else{var c=s.return;null!==c?(ou=c,ec(c)):ou=null}break t}}iu=0,lu=null,Ju(e,t,a,5);break;case 6:iu=0,lu=null,Ju(e,t,a,6);break;case 8:Vu(),fu=6;break e;default:throw Error(i(462))}}Xu();break}catch(t){Hu(e,t)}return bo=vo=null,N.H=r,N.A=o,nu=n,null!==ou?0:(ru=null,au=0,Tr(),fu)}(e,t):Qu(e,t,!0),a=r;;){if(0===o){uu&&!r&&Du(e,t,0,!1);break}if(n=e.current.alternate,!a||Iu(n)){if(2===o){if(a=t,e.errorRecoveryDisabledLanes&a)var l=0;else l=0!=(l=-536870913&e.pendingLanes)?l:536870912&l?536870912:0;if(0!==l){t=l;e:{var s=e;o=vu;var u=s.current.memoizedState.isDehydrated;if(u&&(Wu(s,l).flags|=256),2!==(l=Qu(s,l,!1))){if(cu&&!u){s.errorRecoveryDisabledLanes|=a,mu|=a,o=4;break e}a=bu,bu=o,null!==a&&(null===bu?bu=a:bu.push.apply(bu,a))}o=l}if(a=!1,2!==o)continue}}if(1===o){Wu(e,0),Du(e,t,0,!0);break}e:{switch(r=e,a=o){case 0:case 1:throw Error(i(345));case 4:if((4194048&t)!==t)break;case 6:Du(r,t,gu,!su);break e;case 2:bu=null;break;case 3:case 5:break;default:throw Error(i(329))}if((62914560&t)===t&&10<(o=ku+300-te())){if(Du(r,t,gu,!su),0!==be(r,0,!0))break e;r.timeoutHandle=sd(ju.bind(null,r,n,bu,xu,Su,t,gu,mu,yu,su,a,2,-0,0),o)}else ju(r,n,bu,xu,Su,t,gu,mu,yu,su,a,0,-0,0)}break}o=Qu(e,t,!1),a=!1}wc(e)}function ju(e,t,n,r,o,a,l,s,u,c,d,f,p,m){if(e.timeoutHandle=-1,(8192&(f=t.subtreeFlags)||!(16785408&~f))&&(Vd={stylesheets:null,count:0,unsuspend:Wd},Qs(t),null!==(f=function(){if(null===Vd)throw Error(i(475));var e=Vd;return e.stylesheets&&0===e.count&&qd(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&qd(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=f(nc.bind(null,e,t,a,n,r,o,l,s,u,d,1,p,m)),void Du(e,a,l,!c);nc(e,t,a,n,r,o,l,s,u)}function Iu(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!Gn(a(),o))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Du(e,t,n,r){t&=~hu,t&=~mu,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var o=t;0<o;){var a=31-pe(o),i=1<<a;r[a]=-1,o&=~i}0!==n&&Ae(e,n,t)}function Bu(){return!!(6&nu)||(xc(0,!1),!1)}function Vu(){if(null!==ou){if(0===iu)var e=ou.return;else bo=vo=null,ja(e=ou),Gi=null,Xi=0,e=ou;for(;null!==e;)as(e.alternate,e),e=e.return;ou=null}}function Wu(e,t){var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,ud(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Vu(),ru=e,ou=n=jr(e.current,null),au=t,iu=0,lu=null,su=!1,uu=Se(e,t),cu=!1,yu=gu=hu=mu=pu=fu=0,bu=vu=null,Su=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var o=31-pe(r),a=1<<o;t|=e[o],r&=~a}return du=t,Tr(),n}function Hu(e,t){Sa=null,N.H=Ui,t===qo||t===Qo?(t=ea(),iu=3):t===Ko?(t=ea(),iu=4):iu=t===Al?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,lu=t,null===ou&&(fu=1,kl(e,Cr(t,e.current)))}function Uu(){var e=N.H;return N.H=Ui,null===e?Ui:e}function qu(){var e=N.A;return N.A=eu,e}function Ku(){fu=4,su||(4194048&au)!==au&&null!==ol.current||(uu=!0),!(134217727&pu)&&!(134217727&mu)||null===ru||Du(ru,au,gu,!1)}function Qu(e,t,n){var r=nu;nu|=2;var o=Uu(),a=qu();ru===e&&au===t||(xu=null,Wu(e,t)),t=!1;var i=fu;e:for(;;)try{if(0!==iu&&null!==ou){var l=ou,s=lu;switch(iu){case 8:Vu(),i=6;break e;case 3:case 2:case 9:case 6:null===ol.current&&(t=!0);var u=iu;if(iu=0,lu=null,Ju(e,l,s,u),n&&uu){i=0;break e}break;default:u=iu,iu=0,lu=null,Ju(e,l,s,u)}}Gu(),i=fu;break}catch(t){Hu(e,t)}return t&&e.shellSuspendCounter++,bo=vo=null,nu=r,N.H=o,N.A=a,null===ou&&(ru=null,au=0,Tr()),i}function Gu(){for(;null!==ou;)Yu(ou)}function Xu(){for(;null!==ou&&!J();)Yu(ou)}function Yu(e){var t=Yl(e.alternate,e,du);e.memoizedProps=e.pendingProps,null===t?ec(e):ou=t}function Zu(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=$l(n,t,t.pendingProps,t.type,void 0,au);break;case 11:t=$l(n,t,t.pendingProps,t.type.render,t.ref,au);break;case 5:ja(t);default:as(n,t),t=Yl(n,t=ou=Ir(t,du),du)}e.memoizedProps=e.pendingProps,null===t?ec(e):ou=t}function Ju(e,t,n,r){bo=vo=null,ja(t),Gi=null,Xi=0;var o=t.return;try{if(function(e,t,n,r,o){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&Co(t,n,o,!0),null!==(n=ol.current)){switch(n.tag){case 13:return null===al?Ku():null===n.alternate&&0===fu&&(fu=3),n.flags&=-257,n.flags|=65536,n.lanes=o,r===Go?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),dc(e,r,o)),!1;case 22:return n.flags|=65536,r===Go?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),dc(e,r,o)),!1}throw Error(i(435,n.tag))}return dc(e,r,o),Ku(),!1}if(ao)return null!==(t=ol.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=o,r!==so&&go(Cr(e=Error(i(422),{cause:r}),n))):(r!==so&&go(Cr(t=Error(i(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,o&=-o,e.lanes|=o,r=Cr(r,n),sa(e,o=xl(e.stateNode,r,o)),4!==fu&&(fu=2)),!1;var a=Error(i(520),{cause:r});if(a=Cr(a,n),null===vu?vu=[a]:vu.push(a),4!==fu&&(fu=2),null===t)return!0;r=Cr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=o&-o,n.lanes|=e,sa(n,e=xl(n.stateNode,r,e)),!1;case 1:if(t=n.type,a=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===a||"function"!=typeof a.componentDidCatch||null!==Cu&&Cu.has(a))))return n.flags|=65536,o&=-o,n.lanes|=o,El(o=Cl(o),e,n,r),sa(n,o),!1}n=n.return}while(null!==n);return!1}(e,o,t,n,au))return fu=1,kl(e,Cr(n,e.current)),void(ou=null)}catch(t){if(null!==o)throw ou=o,t;return fu=1,kl(e,Cr(n,e.current)),void(ou=null)}32768&t.flags?(ao||1===r?e=!0:uu||536870912&au?e=!1:(su=e=!0,(2===r||9===r||3===r||6===r)&&null!==(r=ol.current)&&13===r.tag&&(r.flags|=16384)),tc(t,e)):ec(t)}function ec(e){var t=e;do{if(32768&t.flags)return void tc(t,su);e=t.return;var n=rs(t.alternate,t,du);if(null!==n)return void(ou=n);if(null!==(t=t.sibling))return void(ou=t);ou=t=e}while(null!==t);0===fu&&(fu=5)}function tc(e,t){do{var n=os(e.alternate,e);if(null!==n)return n.flags&=32767,void(ou=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(ou=e);ou=e=n}while(null!==e);fu=6,ou=null}function nc(e,t,n,r,o,a,l,s,u){e.cancelPendingCommit=null;do{lc()}while(0!==Eu);if(6&nu)throw Error(i(327));if(null!==t){if(t===e.current)throw Error(i(177));if(a=t.lanes|t.childLanes,function(e,t,n,r,o,a){var i=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var l=e.entanglements,s=e.expirationTimes,u=e.hiddenUpdates;for(n=i&~n;0<n;){var c=31-pe(n),d=1<<c;l[c]=0,s[c]=-1;var f=u[c];if(null!==f)for(u[c]=null,c=0;c<f.length;c++){var p=f[c];null!==p&&(p.lane&=-536870913)}n&=~d}0!==r&&Ae(e,r,0),0!==a&&0===o&&0!==e.tag&&(e.suspendedLanes|=a&~(i&~t))}(e,n,a|=Pr,l,s,u),e===ru&&(ou=ru=null,au=0),Pu=t,Au=e,Tu=n,_u=a,Ru=o,zu=r,10256&t.subtreeFlags||10256&t.flags?(e.callbackNode=null,e.callbackPriority=0,Y(ae,(function(){return sc(),null}))):(e.callbackNode=null,e.callbackPriority=0),r=!!(13878&t.flags),13878&t.subtreeFlags||r){r=N.T,N.T=null,o=F.p,F.p=2,l=nu,nu|=4;try{!function(e,t){if(e=e.containerInfo,td=nf,tr(e=er(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var l=0,s=-1,u=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var m;f!==n||0!==o&&3!==f.nodeType||(s=l+o),f!==a||0!==r&&3!==f.nodeType||(u=l+r),3===f.nodeType&&(l+=f.nodeValue.length),null!==(m=f.firstChild);)p=f,f=m;for(;;){if(f===e)break t;if(p===n&&++c===o&&(s=l),p===a&&++d===r&&(u=l),null!==(m=f.nextSibling))break;p=(f=p).parentNode}f=m}n=-1===s||-1===u?null:{start:s,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(nd={focusedElem:e,selectionRange:n},nf=!1,xs=t;null!==xs;)if(e=(t=xs).child,1024&t.subtreeFlags&&null!==e)e.return=t,xs=e;else for(;null!==xs;){switch(a=(t=xs).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==a){e=void 0,n=t,o=a.memoizedProps,a=a.memoizedState,r=n.stateNode;try{var h=gl(n.type,o,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(h,a),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){cc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))hd(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":hd(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(i(163))}if(null!==(e=t.sibling)){e.return=t.return,xs=e;break}xs=t.return}}(e,t)}finally{nu=l,F.p=o,N.T=r}}Eu=1,rc(),oc(),ac()}}function rc(){if(1===Eu){Eu=0;var e=Au,t=Pu,n=!!(13878&t.flags);if(13878&t.subtreeFlags||n){n=N.T,N.T=null;var r=F.p;F.p=2;var o=nu;nu|=4;try{Ns(t,e);var a=nd,i=er(e.containerInfo),l=a.focusedElem,s=a.selectionRange;if(i!==l&&l&&l.ownerDocument&&Jn(l.ownerDocument.documentElement,l)){if(null!==s&&tr(l)){var u=s.start,c=s.end;if(void 0===c&&(c=u),"selectionStart"in l)l.selectionStart=u,l.selectionEnd=Math.min(c,l.value.length);else{var d=l.ownerDocument||document,f=d&&d.defaultView||window;if(f.getSelection){var p=f.getSelection(),m=l.textContent.length,h=Math.min(s.start,m),g=void 0===s.end?h:Math.min(s.end,m);!p.extend&&h>g&&(i=g,g=h,h=i);var y=Zn(l,h),v=Zn(l,g);if(y&&v&&(1!==p.rangeCount||p.anchorNode!==y.node||p.anchorOffset!==y.offset||p.focusNode!==v.node||p.focusOffset!==v.offset)){var b=d.createRange();b.setStart(y.node,y.offset),p.removeAllRanges(),h>g?(p.addRange(b),p.extend(v.node,v.offset)):(b.setEnd(v.node,v.offset),p.addRange(b))}}}}for(d=[],p=l;p=p.parentNode;)1===p.nodeType&&d.push({element:p,left:p.scrollLeft,top:p.scrollTop});for("function"==typeof l.focus&&l.focus(),l=0;l<d.length;l++){var S=d[l];S.element.scrollLeft=S.left,S.element.scrollTop=S.top}}nf=!!td,nd=td=null}finally{nu=o,F.p=r,N.T=n}}e.current=t,Eu=2}}function oc(){if(2===Eu){Eu=0;var e=Au,t=Pu,n=!!(8772&t.flags);if(8772&t.subtreeFlags||n){n=N.T,N.T=null;var r=F.p;F.p=2;var o=nu;nu|=4;try{Cs(e,t.alternate,t)}finally{nu=o,F.p=r,N.T=n}}Eu=3}}function ac(){if(4===Eu||3===Eu){Eu=0,ee();var e=Au,t=Pu,n=Tu,r=zu;10256&t.subtreeFlags||10256&t.flags?Eu=5:(Eu=0,Pu=Au=null,ic(e,e.pendingLanes));var o=e.pendingLanes;if(0===o&&(Cu=null),_e(n),t=t.stateNode,de&&"function"==typeof de.onCommitFiberRoot)try{de.onCommitFiberRoot(ce,t,void 0,!(128&~t.current.flags))}catch(e){}if(null!==r){t=N.T,o=F.p,F.p=2,N.T=null;try{for(var a=e.onRecoverableError,i=0;i<r.length;i++){var l=r[i];a(l.value,{componentStack:l.stack})}}finally{N.T=t,F.p=o}}3&Tu&&lc(),wc(e),o=e.pendingLanes,4194090&n&&42&o?e===Mu?Ou++:(Ou=0,Mu=e):Ou=0,xc(0,!1)}}function ic(e,t){0===(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,Fo(t))}function lc(e){return rc(),oc(),ac(),sc()}function sc(){if(5!==Eu)return!1;var e=Au,t=_u;_u=0;var n=_e(Tu),r=N.T,o=F.p;try{F.p=32>n?32:n,N.T=null,n=Ru,Ru=null;var a=Au,l=Tu;if(Eu=0,Pu=Au=null,Tu=0,6&nu)throw Error(i(331));var s=nu;if(nu|=4,Ys(a.current),Ws(a,a.current,l,n),nu=s,xc(0,!1),de&&"function"==typeof de.onPostCommitFiberRoot)try{de.onPostCommitFiberRoot(ce,a)}catch(e){}return!0}finally{F.p=o,N.T=r,ic(e,t)}}function uc(e,t,n){t=Cr(n,t),null!==(e=ia(e,t=xl(e.stateNode,t,2),2))&&(Ee(e,2),wc(e))}function cc(e,t,n){if(3===e.tag)uc(e,e,n);else for(;null!==t;){if(3===t.tag){uc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Cu||!Cu.has(r))){e=Cr(n,e),null!==(r=ia(t,n=Cl(2),2))&&(El(n,r,t,e),Ee(r,2),wc(r));break}}t=t.return}}function dc(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new tu;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(cu=!0,o.add(n),e=fc.bind(null,e,t,n),t.then(e,e))}function fc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,ru===e&&(au&n)===n&&(4===fu||3===fu&&(62914560&au)===au&&300>te()-ku?!(2&nu)&&Wu(e,0):hu|=n,yu===au&&(yu=0)),wc(e)}function pc(e,t){0===t&&(t=xe()),null!==(e=zr(e,t))&&(Ee(e,t),wc(e))}function mc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),pc(e,n)}function hc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(i(314))}null!==r&&r.delete(t),pc(e,n)}var gc=null,yc=null,vc=!1,bc=!1,Sc=!1,kc=0;function wc(e){e!==yc&&null===e.next&&(null===yc?gc=yc=e:yc=yc.next=e),bc=!0,vc||(vc=!0,dd((function(){6&nu?Y(re,Cc):Ec()})))}function xc(e,t){if(!Sc&&bc){Sc=!0;do{for(var n=!1,r=gc;null!==r;){if(!t)if(0!==e){var o=r.pendingLanes;if(0===o)var a=0;else{var i=r.suspendedLanes,l=r.pingedLanes;a=(1<<31-pe(42|e)+1)-1,a=201326741&(a&=o&~(i&~l))?201326741&a|1:a?2|a:0}0!==a&&(n=!0,Tc(r,a))}else a=au,!(3&(a=be(r,r===ru?a:0,null!==r.cancelPendingCommit||-1!==r.timeoutHandle)))||Se(r,a)||(n=!0,Tc(r,a));r=r.next}}while(n);Sc=!1}}function Cc(){Ec()}function Ec(){bc=vc=!1;var e,t=0;0!==kc&&(((e=window.event)&&"popstate"===e.type?e!==ld&&(ld=e,!0):(ld=null,!1))&&(t=kc),kc=0);for(var n=te(),r=null,o=gc;null!==o;){var a=o.next,i=Ac(o,n);0===i?(o.next=null,null===r?gc=a:r.next=a,null===a&&(yc=r)):(r=o,(0!==t||3&i)&&(bc=!0)),o=a}xc(t,!1)}function Ac(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=-62914561&e.pendingLanes;0<a;){var i=31-pe(a),l=1<<i,s=o[i];-1===s?0!==(l&n)&&0===(l&r)||(o[i]=ke(l,t)):s<=t&&(e.expiredLanes|=l),a&=~l}if(n=au,n=be(e,e===(t=ru)?n:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle),r=e.callbackNode,0===n||e===t&&(2===iu||9===iu)||null!==e.cancelPendingCommit)return null!==r&&null!==r&&Z(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||Se(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&Z(r),_e(n)){case 2:case 8:n=oe;break;case 32:default:n=ae;break;case 268435456:n=le}return r=Pc.bind(null,e),n=Y(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&Z(r),e.callbackPriority=2,e.callbackNode=null,2}function Pc(e,t){if(0!==Eu&&5!==Eu)return e.callbackNode=null,e.callbackPriority=0,null;var n=e.callbackNode;if(lc()&&e.callbackNode!==n)return null;var r=au;return 0===(r=be(e,e===ru?r:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle))?null:(Lu(e,r,t),Ac(e,te()),null!=e.callbackNode&&e.callbackNode===n?Pc.bind(null,e):null)}function Tc(e,t){if(lc())return null;Lu(e,t,!0)}function _c(){return 0===kc&&(kc=we()),kc}function Rc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:_t(""+e)}function zc(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Oc=0;Oc<kr.length;Oc++){var Mc=kr[Oc];wr(Mc.toLowerCase(),"on"+(Mc[0].toUpperCase()+Mc.slice(1)))}wr(pr,"onAnimationEnd"),wr(mr,"onAnimationIteration"),wr(hr,"onAnimationStart"),wr("dblclick","onDoubleClick"),wr("focusin","onFocus"),wr("focusout","onBlur"),wr(gr,"onTransitionRun"),wr(yr,"onTransitionStart"),wr(vr,"onTransitionCancel"),wr(br,"onTransitionEnd"),Ge("onMouseEnter",["mouseout","mouseover"]),Ge("onMouseLeave",["mouseout","mouseover"]),Ge("onPointerEnter",["pointerout","pointerover"]),Ge("onPointerLeave",["pointerout","pointerover"]),Qe("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Qe("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Qe("onBeforeInput",["compositionend","keypress","textInput","paste"]),Qe("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Qe("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Qe("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Nc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Fc=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Nc));function $c(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==a&&o.isPropagationStopped())break e;a=l,o.currentTarget=u;try{a(o)}catch(e){yl(e)}o.currentTarget=null,a=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==a&&o.isPropagationStopped())break e;a=l,o.currentTarget=u;try{a(o)}catch(e){yl(e)}o.currentTarget=null,a=s}}}}function Lc(e,t){var n=t[Fe];void 0===n&&(n=t[Fe]=new Set);var r=e+"__bubble";n.has(r)||(Bc(t,e,2,!1),n.add(r))}function jc(e,t,n){var r=0;t&&(r|=4),Bc(n,e,r,t)}var Ic="_reactListening"+Math.random().toString(36).slice(2);function Dc(e){if(!e[Ic]){e[Ic]=!0,qe.forEach((function(t){"selectionchange"!==t&&(Fc.has(t)||jc(t,!1,e),jc(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ic]||(t[Ic]=!0,jc("selectionchange",!1,t))}}function Bc(e,t,n,r){switch(cf(t)){case 2:var o=rf;break;case 8:o=of;break;default:o=af}n=o.bind(null,t,n,e),o=void 0,!It||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Vc(e,t,n,r,o){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&i.stateNode.containerInfo===o)return;i=i.return}for(;null!==l;){if(null===(i=Be(l)))return;if(5===(u=i.tag)||6===u||26===u||27===u){r=a=i;continue e}l=l.parentNode}}r=r.return}$t((function(){var r=a,o=zt(n),i=[];e:{var l=Sr.get(e);if(void 0!==l){var u=Jt,c=e;switch(e){case"keypress":if(0===Ut(n))break e;case"keydown":case"keyup":u=hn;break;case"focusin":c="focus",u=an;break;case"focusout":c="blur",u=an;break;case"beforeblur":case"afterblur":u=an;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=rn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=on;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=yn;break;case pr:case mr:case hr:u=ln;break;case br:u=vn;break;case"scroll":case"scrollend":u=tn;break;case"wheel":u=bn;break;case"copy":case"cut":case"paste":u=sn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=gn;break;case"toggle":case"beforetoggle":u=Sn}var d=!!(4&t),f=!d&&("scroll"===e||"scrollend"===e),p=d?null!==l?l+"Capture":null:l;d=[];for(var m,h=r;null!==h;){var g=h;if(m=g.stateNode,5!==(g=g.tag)&&26!==g&&27!==g||null===m||null===p||null!=(g=Lt(h,p))&&d.push(Wc(h,g,m)),f)break;h=h.return}0<d.length&&(l=new u(l,c,null,n,o),i.push({event:l,listeners:d}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===Rt||!(c=n.relatedTarget||n.fromElement)||!Be(c)&&!c[Ne])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?Be(c):null)&&(f=s(c),d=c.tag,c!==f||5!==d&&27!==d&&6!==d)&&(c=null)):(u=null,c=r),u!==c)){if(d=rn,g="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(d=gn,g="onPointerLeave",p="onPointerEnter",h="pointer"),f=null==u?l:We(u),m=null==c?l:We(c),(l=new d(g,h+"leave",u,n,o)).target=f,l.relatedTarget=m,g=null,Be(o)===r&&((d=new d(p,h+"enter",c,n,o)).target=m,d.relatedTarget=f,g=d),f=g,u&&c)e:{for(p=c,h=0,m=d=u;m;m=Uc(m))h++;for(m=0,g=p;g;g=Uc(g))m++;for(;0<h-m;)d=Uc(d),h--;for(;0<m-h;)p=Uc(p),m--;for(;h--;){if(d===p||null!==p&&d===p.alternate)break e;d=Uc(d),p=Uc(p)}d=null}else d=null;null!==u&&qc(i,l,u,d,!1),null!==c&&null!==f&&qc(i,f,c,d,!0)}if("select"===(u=(l=r?We(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var y=jn;else if(On(l))if(In)y=Qn;else{y=qn;var v=Un}else!(u=l.nodeName)||"input"!==u.toLowerCase()||"checkbox"!==l.type&&"radio"!==l.type?r&&At(r.elementType)&&(y=jn):y=Kn;switch(y&&(y=y(e,r))?Mn(i,y,n,o):(v&&v(e,l,r),"focusout"===e&&r&&"number"===l.type&&null!=r.memoizedProps.value&&vt(l,"number",l.value)),v=r?We(r):window,e){case"focusin":(On(v)||"true"===v.contentEditable)&&(rr=v,or=r,ar=null);break;case"focusout":ar=or=rr=null;break;case"mousedown":ir=!0;break;case"contextmenu":case"mouseup":case"dragend":ir=!1,lr(i,n,o);break;case"selectionchange":if(nr)break;case"keydown":case"keyup":lr(i,n,o)}var b;if(wn)e:{switch(e){case"compositionstart":var S="onCompositionStart";break e;case"compositionend":S="onCompositionEnd";break e;case"compositionupdate":S="onCompositionUpdate";break e}S=void 0}else Rn?Tn(e,n)&&(S="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(S="onCompositionStart");S&&(En&&"ko"!==n.locale&&(Rn||"onCompositionStart"!==S?"onCompositionEnd"===S&&Rn&&(b=Ht()):(Vt="value"in(Bt=o)?Bt.value:Bt.textContent,Rn=!0)),0<(v=Hc(r,S)).length&&(S=new un(S,e,null,n,o),i.push({event:S,listeners:v}),(b||null!==(b=_n(n)))&&(S.data=b))),(b=Cn?function(e,t){switch(e){case"compositionend":return _n(t);case"keypress":return 32!==t.which?null:(Pn=!0,An);case"textInput":return(e=t.data)===An&&Pn?null:e;default:return null}}(e,n):function(e,t){if(Rn)return"compositionend"===e||!wn&&Tn(e,t)?(e=Ht(),Wt=Vt=Bt=null,Rn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return En&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(S=Hc(r,"onBeforeInput")).length&&(v=new un("onBeforeInput","beforeinput",null,n,o),i.push({event:v,listeners:S}),v.data=b),function(e,t,n,r,o){if("submit"===t&&n&&n.stateNode===o){var a=Rc((o[Me]||null).action),i=r.submitter;i&&null!==(t=(t=i[Me]||null)?Rc(t.formAction):i.getAttribute("formAction"))&&(a=t,i=null);var l=new Jt("action","action",null,r,o);e.push({event:l,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==kc){var e=i?zc(o,i):new FormData(o);zi(n,{pending:!0,data:e,method:o.method,action:a},null,e)}}else"function"==typeof a&&(l.preventDefault(),e=i?zc(o,i):new FormData(o),zi(n,{pending:!0,data:e,method:o.method,action:a},a,e))},currentTarget:o}]})}}(i,e,r,n,o)}$c(i,t)}))}function Wc(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hc(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;if(5!==(o=o.tag)&&26!==o&&27!==o||null===a||(null!=(o=Lt(e,n))&&r.unshift(Wc(e,o,a)),null!=(o=Lt(e,t))&&r.push(Wc(e,o,a))),3===e.tag)return r;e=e.return}return[]}function Uc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function qc(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(l=l.tag,null!==s&&s===r)break;5!==l&&26!==l&&27!==l||null===u||(s=u,o?null!=(u=Lt(n,a))&&i.unshift(Wc(n,u,s)):o||null!=(u=Lt(n,a))&&i.push(Wc(n,u,s))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Kc=/\r\n?/g,Qc=/\u0000|\uFFFD/g;function Gc(e){return("string"==typeof e?e:""+e).replace(Kc,"\n").replace(Qc,"")}function Xc(e,t){return t=Gc(t),Gc(e)===t}function Yc(){}function Zc(e,t,n,r,o,a){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||wt(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&wt(e,""+r);break;case"className":nt(e,"class",r);break;case"tabIndex":nt(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":nt(e,n,r);break;case"style":Et(e,r,a);break;case"data":if("object"!==t){nt(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=_t(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof a&&("formAction"===n?("input"!==t&&Zc(e,t,"name",o.name,o,null),Zc(e,t,"formEncType",o.formEncType,o,null),Zc(e,t,"formMethod",o.formMethod,o,null),Zc(e,t,"formTarget",o.formTarget,o,null)):(Zc(e,t,"encType",o.encType,o,null),Zc(e,t,"method",o.method,o,null),Zc(e,t,"target",o.target,o,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=_t(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Yc);break;case"onScroll":null!=r&&Lc("scroll",e);break;case"onScrollEnd":null!=r&&Lc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(n=r.__html)){if(null!=o.children)throw Error(i(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=_t(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Lc("beforetoggle",e),Lc("toggle",e),tt(e,"popover",r);break;case"xlinkActuate":rt(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":rt(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":rt(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":rt(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":rt(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":rt(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":rt(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":rt(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":rt(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":tt(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&tt(e,n=Pt.get(n)||n,r)}}function Jc(e,t,n,r,o,a){switch(n){case"style":Et(e,r,a);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(n=r.__html)){if(null!=o.children)throw Error(i(60));e.innerHTML=n}}break;case"children":"string"==typeof r?wt(e,r):("number"==typeof r||"bigint"==typeof r)&&wt(e,""+r);break;case"onScroll":null!=r&&Lc("scroll",e);break;case"onScrollEnd":null!=r&&Lc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Yc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Ke.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(o=n.endsWith("Capture"),t=n.slice(2,o?n.length-7:void 0),"function"==typeof(a=null!=(a=e[Me]||null)?a[n]:null)&&e.removeEventListener(t,a,o),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):tt(e,n,r):("function"!=typeof a&&null!==a&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,o)))}}function ed(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Lc("error",e),Lc("load",e);var r,o=!1,a=!1;for(r in n)if(n.hasOwnProperty(r)){var l=n[r];if(null!=l)switch(r){case"src":o=!0;break;case"srcSet":a=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(i(137,t));default:Zc(e,t,r,l,n,null)}}return a&&Zc(e,t,"srcSet",n.srcSet,n,null),void(o&&Zc(e,t,"src",n.src,n,null));case"input":Lc("invalid",e);var s=r=l=a=null,u=null,c=null;for(o in n)if(n.hasOwnProperty(o)){var d=n[o];if(null!=d)switch(o){case"name":a=d;break;case"type":l=d;break;case"checked":u=d;break;case"defaultChecked":c=d;break;case"value":r=d;break;case"defaultValue":s=d;break;case"children":case"dangerouslySetInnerHTML":if(null!=d)throw Error(i(137,t));break;default:Zc(e,t,o,d,n,null)}}return yt(e,r,s,u,c,l,a,!1),void dt(e);case"select":for(a in Lc("invalid",e),o=l=r=null,n)if(n.hasOwnProperty(a)&&null!=(s=n[a]))switch(a){case"value":r=s;break;case"defaultValue":l=s;break;case"multiple":o=s;default:Zc(e,t,a,s,n,null)}return t=r,n=l,e.multiple=!!o,void(null!=t?bt(e,!!o,t,!1):null!=n&&bt(e,!!o,n,!0));case"textarea":for(l in Lc("invalid",e),r=a=o=null,n)if(n.hasOwnProperty(l)&&null!=(s=n[l]))switch(l){case"value":o=s;break;case"defaultValue":a=s;break;case"children":r=s;break;case"dangerouslySetInnerHTML":if(null!=s)throw Error(i(91));break;default:Zc(e,t,l,s,n,null)}return kt(e,o,a,r),void dt(e);case"option":for(u in n)n.hasOwnProperty(u)&&null!=(o=n[u])&&("selected"===u?e.selected=o&&"function"!=typeof o&&"symbol"!=typeof o:Zc(e,t,u,o,n,null));return;case"dialog":Lc("beforetoggle",e),Lc("toggle",e),Lc("cancel",e),Lc("close",e);break;case"iframe":case"object":Lc("load",e);break;case"video":case"audio":for(o=0;o<Nc.length;o++)Lc(Nc[o],e);break;case"image":Lc("error",e),Lc("load",e);break;case"details":Lc("toggle",e);break;case"embed":case"source":case"link":Lc("error",e),Lc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(o=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(i(137,t));default:Zc(e,t,c,o,n,null)}return;default:if(At(t)){for(d in n)n.hasOwnProperty(d)&&void 0!==(o=n[d])&&Jc(e,t,d,o,n,void 0);return}}for(s in n)n.hasOwnProperty(s)&&null!=(o=n[s])&&Zc(e,t,s,o,n,null)}var td=null,nd=null;function rd(e){return 9===e.nodeType?e:e.ownerDocument}function od(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function ad(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function id(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ld=null,sd="function"==typeof setTimeout?setTimeout:void 0,ud="function"==typeof clearTimeout?clearTimeout:void 0,cd="function"==typeof Promise?Promise:void 0,dd="function"==typeof queueMicrotask?queueMicrotask:void 0!==cd?function(e){return cd.resolve(null).then(e).catch(fd)}:sd;function fd(e){setTimeout((function(){throw e}))}function pd(e){return"head"===e}function md(e,t){var n=t,r=0,o=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0<r&&8>r){n=r;var i=e.ownerDocument;if(1&n&&kd(i.documentElement),2&n&&kd(i.body),4&n)for(kd(n=i.head),i=n.firstChild;i;){var l=i.nextSibling,s=i.nodeName;i[Ie]||"SCRIPT"===s||"STYLE"===s||"LINK"===s&&"stylesheet"===i.rel.toLowerCase()||n.removeChild(i),i=l}}if(0===o)return e.removeChild(a),void Tf(t);o--}else"$"===n||"$?"===n||"$!"===n?o++:r=n.charCodeAt(0)-48;else r=0;n=a}while(n);Tf(t)}function hd(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":hd(n),De(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function gd(e){return"$!"===e.data||"$?"===e.data&&"complete"===e.ownerDocument.readyState}function yd(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}var vd=null;function bd(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function Sd(e,t,n){switch(t=rd(n),e){case"html":if(!(e=t.documentElement))throw Error(i(452));return e;case"head":if(!(e=t.head))throw Error(i(453));return e;case"body":if(!(e=t.body))throw Error(i(454));return e;default:throw Error(i(451))}}function kd(e){for(var t=e.attributes;t.length;)e.removeAttributeNode(t[0]);De(e)}var wd=new Map,xd=new Set;function Cd(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}var Ed=F.d;F.d={f:function(){var e=Ed.f(),t=Bu();return e||t},r:function(e){var t=Ve(e);null!==t&&5===t.tag&&"form"===t.type?Mi(t):Ed.r(e)},D:function(e){Ed.D(e),Pd("dns-prefetch",e,null)},C:function(e,t){Ed.C(e,t),Pd("preconnect",e,t)},L:function(e,t,n){Ed.L(e,t,n);var r=Ad;if(r&&e&&t){var o='link[rel="preload"][as="'+ht(t)+'"]';"image"===t&&n&&n.imageSrcSet?(o+='[imagesrcset="'+ht(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(o+='[imagesizes="'+ht(n.imageSizes)+'"]')):o+='[href="'+ht(e)+'"]';var a=o;switch(t){case"style":a=_d(e);break;case"script":a=Od(e)}wd.has(a)||(e=f({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),wd.set(a,e),null!==r.querySelector(o)||"style"===t&&r.querySelector(Rd(a))||"script"===t&&r.querySelector(Md(a))||(ed(t=r.createElement("link"),"link",e),Ue(t),r.head.appendChild(t)))}},m:function(e,t){Ed.m(e,t);var n=Ad;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",o='link[rel="modulepreload"][as="'+ht(r)+'"][href="'+ht(e)+'"]',a=o;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":a=Od(e)}if(!wd.has(a)&&(e=f({rel:"modulepreload",href:e},t),wd.set(a,e),null===n.querySelector(o))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(Md(a)))return}ed(r=n.createElement("link"),"link",e),Ue(r),n.head.appendChild(r)}}},X:function(e,t){Ed.X(e,t);var n=Ad;if(n&&e){var r=He(n).hoistableScripts,o=Od(e),a=r.get(o);a||((a=n.querySelector(Md(o)))||(e=f({src:e,async:!0},t),(t=wd.get(o))&&Ld(e,t),Ue(a=n.createElement("script")),ed(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(o,a))}},S:function(e,t,n){Ed.S(e,t,n);var r=Ad;if(r&&e){var o=He(r).hoistableStyles,a=_d(e);t=t||"default";var i=o.get(a);if(!i){var l={loading:0,preload:null};if(i=r.querySelector(Rd(a)))l.loading=5;else{e=f({rel:"stylesheet",href:e,"data-precedence":t},n),(n=wd.get(a))&&$d(e,n);var s=i=r.createElement("link");Ue(s),ed(s,"link",e),s._p=new Promise((function(e,t){s.onload=e,s.onerror=t})),s.addEventListener("load",(function(){l.loading|=1})),s.addEventListener("error",(function(){l.loading|=2})),l.loading|=4,Fd(i,t,r)}i={type:"stylesheet",instance:i,count:1,state:l},o.set(a,i)}}},M:function(e,t){Ed.M(e,t);var n=Ad;if(n&&e){var r=He(n).hoistableScripts,o=Od(e),a=r.get(o);a||((a=n.querySelector(Md(o)))||(e=f({src:e,async:!0,type:"module"},t),(t=wd.get(o))&&Ld(e,t),Ue(a=n.createElement("script")),ed(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(o,a))}}};var Ad="undefined"==typeof document?null:document;function Pd(e,t,n){var r=Ad;if(r&&"string"==typeof t&&t){var o=ht(t);o='link[rel="'+e+'"][href="'+o+'"]',"string"==typeof n&&(o+='[crossorigin="'+n+'"]'),xd.has(o)||(xd.add(o),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(o)&&(ed(t=r.createElement("link"),"link",e),Ue(t),r.head.appendChild(t)))}}function Td(e,t,n,r){var o=(o=H.current)?Cd(o):null;if(!o)throw Error(i(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=_d(n.href),(r=(n=He(o).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=_d(n.href);var a=He(o).hoistableStyles,l=a.get(e);if(l||(o=o.ownerDocument||o,l={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},a.set(e,l),(a=o.querySelector(Rd(e)))&&!a._p&&(l.instance=a,l.state.loading=5),wd.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},wd.set(e,n),a||function(e,t,n,r){e.querySelector('link[rel="preload"][as="style"]['+t+"]")?r.loading=1:(t=e.createElement("link"),r.preload=t,t.addEventListener("load",(function(){return r.loading|=1})),t.addEventListener("error",(function(){return r.loading|=2})),ed(t,"link",n),Ue(t),e.head.appendChild(t))}(o,e,n,l.state))),t&&null===r)throw Error(i(528,""));return l}if(t&&null!==r)throw Error(i(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=Od(n),(r=(n=He(o).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(i(444,e))}}function _d(e){return'href="'+ht(e)+'"'}function Rd(e){return'link[rel="stylesheet"]['+e+"]"}function zd(e){return f({},e,{"data-precedence":e.precedence,precedence:null})}function Od(e){return'[src="'+ht(e)+'"]'}function Md(e){return"script[async]"+e}function Nd(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+ht(n.href)+'"]');if(r)return t.instance=r,Ue(r),r;var o=f({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return Ue(r=(e.ownerDocument||e).createElement("style")),ed(r,"style",o),Fd(r,n.precedence,e),t.instance=r;case"stylesheet":o=_d(n.href);var a=e.querySelector(Rd(o));if(a)return t.state.loading|=4,t.instance=a,Ue(a),a;r=zd(n),(o=wd.get(o))&&$d(r,o),Ue(a=(e.ownerDocument||e).createElement("link"));var l=a;return l._p=new Promise((function(e,t){l.onload=e,l.onerror=t})),ed(a,"link",r),t.state.loading|=4,Fd(a,n.precedence,e),t.instance=a;case"script":return a=Od(n.src),(o=e.querySelector(Md(a)))?(t.instance=o,Ue(o),o):(r=n,(o=wd.get(a))&&Ld(r=f({},n),o),Ue(o=(e=e.ownerDocument||e).createElement("script")),ed(o,"link",r),e.head.appendChild(o),t.instance=o);case"void":return null;default:throw Error(i(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Fd(r,n.precedence,e));return t.instance}function Fd(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),o=r.length?r[r.length-1]:null,a=o,i=0;i<r.length;i++){var l=r[i];if(l.dataset.precedence===t)a=l;else if(a!==o)break}a?a.parentNode.insertBefore(e,a.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function $d(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function Ld(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var jd=null;function Id(e,t,n){if(null===jd){var r=new Map,o=jd=new Map;o.set(n,r)}else(r=(o=jd).get(n))||(r=new Map,o.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),o=0;o<n.length;o++){var a=n[o];if(!(a[Ie]||a[Oe]||"link"===e&&"stylesheet"===a.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==a.namespaceURI){var i=a.getAttribute(t)||"";i=e+i;var l=r.get(i);l?l.push(a):r.set(i,[a])}}return r}function Dd(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Bd(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Vd=null;function Wd(){}function Hd(){if(this.count--,0===this.count)if(this.stylesheets)qd(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Ud=null;function qd(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Ud=new Map,t.forEach(Kd,e),Ud=null,Hd.call(e))}function Kd(e,t){if(!(4&t.state.loading)){var n=Ud.get(e);if(n)var r=n.get(null);else{n=new Map,Ud.set(e,n);for(var o=e.querySelectorAll("link[data-precedence],style[data-precedence]"),a=0;a<o.length;a++){var i=o[a];"LINK"!==i.nodeName&&"not all"===i.getAttribute("media")||(n.set(i.dataset.precedence,i),r=i)}r&&n.set(null,r)}i=(o=t.instance).getAttribute("data-precedence"),(a=n.get(i)||r)===r&&n.set(null,o),n.set(i,o),this.count++,r=Hd.bind(this),o.addEventListener("load",r),o.addEventListener("error",r),a?a.parentNode.insertBefore(o,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(o,e.firstChild),t.state.loading|=4}}var Qd={$$typeof:k,Provider:null,Consumer:null,_currentValue:$,_currentValue2:$,_threadCount:0};function Gd(e,t,n,r,o,a,i,l){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Ce(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ce(0),this.hiddenUpdates=Ce(null),this.identifierPrefix=r,this.onUncaughtError=o,this.onCaughtError=a,this.onRecoverableError=i,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=l,this.incompleteTransitions=new Map}function Xd(e,t,n,r,o,a,i,l,s,u,c,d){return e=new Gd(e,t,n,i,l,s,u,d),t=1,!0===a&&(t|=24),a=$r(3,null,null,t),e.current=a,a.stateNode=e,(t=No()).refCount++,e.pooledCache=t,t.refCount++,a.memoizedState={element:r,isDehydrated:n,cache:t},ra(a),e}function Yd(e){return e?e=Nr:Nr}function Zd(e,t,n,r,o,a){o=Yd(o),null===r.context?r.context=o:r.pendingContext=o,(r=aa(t)).payload={element:n},null!==(a=void 0===a?null:a)&&(r.callback=a),null!==(n=ia(e,r,t))&&($u(n,0,t),la(n,e,t))}function Jd(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function ef(e,t){Jd(e,t),(e=e.alternate)&&Jd(e,t)}function tf(e){if(13===e.tag){var t=zr(e,67108864);null!==t&&$u(t,0,67108864),ef(e,67108864)}}var nf=!0;function rf(e,t,n,r){var o=N.T;N.T=null;var a=F.p;try{F.p=2,af(e,t,n,r)}finally{F.p=a,N.T=o}}function of(e,t,n,r){var o=N.T;N.T=null;var a=F.p;try{F.p=8,af(e,t,n,r)}finally{F.p=a,N.T=o}}function af(e,t,n,r){if(nf){var o=lf(r);if(null===o)Vc(e,t,r,sf,n),bf(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return ff=Sf(ff,e,t,n,r,o),!0;case"dragenter":return pf=Sf(pf,e,t,n,r,o),!0;case"mouseover":return mf=Sf(mf,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return hf.set(a,Sf(hf.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,gf.set(a,Sf(gf.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(bf(e,r),4&t&&-1<vf.indexOf(e)){for(;null!==o;){var a=Ve(o);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var i=ve(a.pendingLanes);if(0!==i){var l=a;for(l.pendingLanes|=2,l.entangledLanes|=2;i;){var s=1<<31-pe(i);l.entanglements[1]|=s,i&=~s}wc(a),!(6&nu)&&(wu=te()+500,xc(0,!1))}}break;case 13:null!==(l=zr(a,2))&&$u(l,0,2),Bu(),ef(a,2)}if(null===(a=lf(r))&&Vc(e,t,r,sf,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Vc(e,t,r,null,n)}}function lf(e){return uf(e=zt(e))}var sf=null;function uf(e){if(sf=null,null!==(e=Be(e))){var t=s(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=u(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return sf=e,null}function cf(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(ne()){case re:return 2;case oe:return 8;case ae:case ie:return 32;case le:return 268435456;default:return 32}default:return 32}}var df=!1,ff=null,pf=null,mf=null,hf=new Map,gf=new Map,yf=[],vf="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function bf(e,t){switch(e){case"focusin":case"focusout":ff=null;break;case"dragenter":case"dragleave":pf=null;break;case"mouseover":case"mouseout":mf=null;break;case"pointerover":case"pointerout":hf.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":gf.delete(t.pointerId)}}function Sf(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=Ve(t))&&tf(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function kf(e){var t=Be(e.target);if(null!==t){var n=s(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=u(n)))return e.blockedOn=t,void function(e){var t=F.p;try{return F.p=e,function(){if(13===n.tag){var e=Nu();e=Te(e);var t=zr(n,e);null!==t&&$u(t,0,e),ef(n,e)}}()}finally{F.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function wf(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=lf(e.nativeEvent);if(null!==n)return null!==(t=Ve(n))&&tf(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Rt=r,n.target.dispatchEvent(r),Rt=null,t.shift()}return!0}function xf(e,t,n){wf(e)&&n.delete(t)}function Cf(){df=!1,null!==ff&&wf(ff)&&(ff=null),null!==pf&&wf(pf)&&(pf=null),null!==mf&&wf(mf)&&(mf=null),hf.forEach(xf),gf.forEach(xf)}function Ef(e,t){e.blockedOn===t&&(e.blockedOn=null,df||(df=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Cf)))}var Af=null;function Pf(e){Af!==e&&(Af=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){Af===e&&(Af=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],o=e[t+2];if("function"!=typeof r){if(null===uf(r||n))continue;break}var a=Ve(n);null!==a&&(e.splice(t,3),t-=3,zi(a,{pending:!0,data:o,method:n.method,action:r},r,o))}})))}function Tf(e){function t(t){return Ef(t,e)}null!==ff&&Ef(ff,e),null!==pf&&Ef(pf,e),null!==mf&&Ef(mf,e),hf.forEach(t),gf.forEach(t);for(var n=0;n<yf.length;n++){var r=yf[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<yf.length&&null===(n=yf[0]).blockedOn;)kf(n),null===n.blockedOn&&yf.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var o=n[r],a=n[r+1],i=o[Me]||null;if("function"==typeof a)i||Pf(n);else if(i){var l=null;if(a&&a.hasAttribute("formAction")){if(o=a,i=a[Me]||null)l=i.formAction;else if(null!==uf(o))continue}else l=i.action;"function"==typeof l?n[r+1]=l:(n.splice(r,3),r-=3),Pf(n)}}}function _f(e){this._internalRoot=e}function Rf(e){this._internalRoot=e}Rf.prototype.render=_f.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));Zd(t.current,Nu(),e,t,null,null)},Rf.prototype.unmount=_f.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Zd(e.current,2,null,e,null,null),Bu(),t[Ne]=null}},Rf.prototype.unstable_scheduleHydration=function(e){if(e){var t=Re();e={blockedOn:null,target:e,priority:t};for(var n=0;n<yf.length&&0!==t&&t<yf[n].priority;n++);yf.splice(n,0,e),0===n&&kf(e)}};var zf=o.version;if("19.1.0"!==zf)throw Error(i(527,zf,"19.1.0"));F.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=s(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return c(o),e;if(a===r)return c(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?d(e):null)?null:e.stateNode};var Of={bundleType:0,version:"19.1.0",rendererPackageName:"react-dom",currentDispatcherRef:N,reconcilerVersion:"19.1.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Mf=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Mf.isDisabled&&Mf.supportsFiber)try{ce=Mf.inject(Of),de=Mf}catch(e){}}t.createRoot=function(e,t){if(!l(e))throw Error(i(299));var n=!1,r="",o=vl,a=bl,s=Sl;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onUncaughtError&&(o=t.onUncaughtError),void 0!==t.onCaughtError&&(a=t.onCaughtError),void 0!==t.onRecoverableError&&(s=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=Xd(e,1,!1,null,0,n,r,o,a,s,0,null),e[Ne]=t.current,Dc(e),new _f(t)},t.hydrateRoot=function(e,t,n){if(!l(e))throw Error(i(299));var r=!1,o="",a=vl,s=bl,u=Sl,c=null;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onUncaughtError&&(a=n.onUncaughtError),void 0!==n.onCaughtError&&(s=n.onCaughtError),void 0!==n.onRecoverableError&&(u=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks,void 0!==n.formState&&(c=n.formState)),(t=Xd(e,1,!0,t,0,r,o,a,s,u,0,c)).context=Yd(null),n=t.current,(o=aa(r=Te(r=Nu()))).callback=null,ia(n,o,r),n=r,t.current.lanes=n,Ee(t,n),wc(t),e[Ne]=t.current,Dc(e),new Rf(t)},t.version="19.1.0"},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},338:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},404:(e,t,n)=>{e.exports=n(72)},405:(e,t)=>{Symbol.for("react.transitional.element"),Symbol.for("react.portal");var n=Symbol.for("react.fragment"),r=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler");Symbol.for("react.provider");var a=Symbol.for("react.consumer"),i=Symbol.for("react.context"),l=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),u=Symbol.for("react.suspense_list"),c=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),f=(Symbol.for("react.view_transition"),Symbol.for("react.client.reference"));t.Hy=function(e){return"string"==typeof e||"function"==typeof e||e===n||e===o||e===r||e===s||e===u||"object"==typeof e&&null!==e&&(e.$$typeof===d||e.$$typeof===c||e.$$typeof===i||e.$$typeof===a||e.$$typeof===l||e.$$typeof===f||void 0!==e.getModuleId)}},477:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>a(s,n))u<o&&0>a(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[l]=n,r=l);else{if(!(u<o&&0>a(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var u=[],c=[],d=1,f=null,p=3,m=!1,h=!1,g=!1,y=!1,v="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,S="undefined"!=typeof setImmediate?setImmediate:null;function k(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function w(e){if(g=!1,k(e),!h)if(null!==r(u))h=!0,C||(C=!0,x());else{var t=r(c);null!==t&&O(w,t.startTime-e)}}var x,C=!1,E=-1,A=5,P=-1;function T(){return!(!y&&t.unstable_now()-P<A)}function _(){if(y=!1,C){var e=t.unstable_now();P=e;var n=!0;try{e:{h=!1,g&&(g=!1,b(E),E=-1),m=!0;var a=p;try{t:{for(k(e),f=r(u);null!==f&&!(f.expirationTime>e&&T());){var i=f.callback;if("function"==typeof i){f.callback=null,p=f.priorityLevel;var l=i(f.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof l){f.callback=l,k(e),n=!0;break t}f===r(u)&&o(u),k(e)}else o(u);f=r(u)}if(null!==f)n=!0;else{var s=r(c);null!==s&&O(w,s.startTime-e),n=!1}}break e}finally{f=null,p=a,m=!1}n=void 0}}finally{n?x():C=!1}}}if("function"==typeof S)x=function(){S(_)};else if("undefined"!=typeof MessageChannel){var R=new MessageChannel,z=R.port2;R.port1.onmessage=_,x=function(){z.postMessage(null)}}else x=function(){v(_,0)};function O(e,n){E=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):A=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_requestPaint=function(){y=!0},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,n(c,e),null===r(u)&&e===r(c)&&(g?(b(E),E=-1):g=!0,O(w,a-i))):(e.sortIndex=l,n(u,e),h||m||(h=!0,C||(C=!0,x()))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},540:(e,t,n)=>{e.exports=n(869)},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},691:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],l=0;l<e.length;l++){var s=e[l],u=r.base?s[0]+r.base:s[0],c=a[u]||0,d="".concat(u," ").concat(c);a[u]=c+1;var f=n(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var m=o(p,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=n(a[i]);t[l].references--}for(var s=r(e,o),u=0;u<a.length;u++){var c=n(a[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=s}}},698:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.fragment");function o(e,t,r){var o=null;if(void 0!==r&&(o=""+r),void 0!==t.key&&(o=""+t.key),"key"in t)for(var a in r={},t)"key"!==a&&(r[a]=t[a]);else r=t;return t=r.ref,{$$typeof:n,type:e,key:o,ref:void 0!==t?t:null,props:r}}t.Fragment=r,t.jsx=o,t.jsxs=o},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},843:(e,t,n)=>{n.d(t,{A:()=>l});var r=n(354),o=n.n(r),a=n(314),i=n.n(a)()(o());i.push([e.id,":root{font-family:Helvetica,Arial,sans-serif;--color-cysteine: #FFEA00;--color-hydrophobic: #67E4A6;--color-glycine: #C4C4C4;--color-negative-charge: #FC9CAC;--color-positive-charge: #BB99FF;--color-polar-uncharged: #80BFFF;--color-background-primary: #f9f9f9;--color-background-secondary: #e7f3ee;--color-background-paper-primary:#495057;--color-background-paper-secondary:#1e1e1e;--color-text: #1e1e1e;--color-shadow: #ff4757;--font-size-xs: 10px;--font-size-primary: 14px;--font-size-secondary: 20px;--font-weight: 800}body{margin:0;padding:0;font-size:var(--font-size-primary);background-color:var(--color-background-primary);color:var(--color-text);display:flex;justify-content:center;place-items:center;align-items:center;min-height:100vh;width:100%}@media(max-width: 600px){body{font-size:var(--font-size-xs)}}","",{version:3,sources:["webpack://./src/app/styles/styles.scss"],names:[],mappings:"AAAA,MACE,sCAAA,CAEA,yBAAA,CACA,4BAAA,CACA,wBAAA,CACA,gCAAA,CACA,gCAAA,CACA,gCAAA,CAEA,mCAAA,CACA,qCAAA,CACA,wCAAA,CACA,0CAAA,CACA,qBAAA,CACA,uBAAA,CAEA,oBAAA,CACA,yBAAA,CACA,2BAAA,CAEA,kBAAA,CAIF,KACE,QAAA,CACA,SAAA,CACA,kCAAA,CACA,gDAAA,CACA,uBAAA,CAEA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,kBAAA,CACA,gBAAA,CACA,UAAA,CAIF,yBACE,KACE,6BAAA,CAAA",sourcesContent:[":root {\r\n  font-family: Helvetica, Arial, sans-serif;\r\n\r\n  --color-cysteine: #FFEA00;\r\n  --color-hydrophobic: #67E4A6;\r\n  --color-glycine: #C4C4C4;\r\n  --color-negative-charge: #FC9CAC;\r\n  --color-positive-charge: #BB99FF;\r\n  --color-polar-uncharged: #80BFFF;\r\n\r\n  --color-background-primary: #f9f9f9;\r\n  --color-background-secondary: #e7f3ee;\r\n  --color-background-paper-primary:#495057;\r\n  --color-background-paper-secondary:#1e1e1e;\r\n  --color-text: #1e1e1e;\r\n  --color-shadow: #ff4757;\r\n\r\n  --font-size-xs: 10px;\r\n  --font-size-primary: 14px;\r\n  --font-size-secondary: 20px;\r\n\r\n  --font-weight: 800;\r\n\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-size: var(--font-size-primary);\r\n  background-color: var(--color-background-primary);\r\n  color: var(--color-text);\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  place-items: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  width: 100%;\r\n}\r\n\r\n\r\n@media (max-width: 600px) {\r\n  body {\r\n    font-size: var(--font-size-xs);\r\n  }\r\n}\r\n\r\n\r\n"],sourceRoot:""}]);const l=i},848:(e,t,n)=>{e.exports=n(698)},869:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.consumer"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var S=b.prototype=new v;S.constructor=b,h(S,y.prototype),S.isPureReactComponent=!0;var k=Array.isArray,w={H:null,A:null,T:null,S:null,V:null},x=Object.prototype.hasOwnProperty;function C(e,t,r,o,a,i){return r=i.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:i}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var A=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function T(){}function _(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s,u,c=!1;if(null===e)c=!0;else switch(l){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case f:return _((c=e._init)(e._payload),t,o,a,i)}}if(c)return i=i(e),c=""===a?"."+P(e,0):a,k(i)?(o="",null!=c&&(o=c.replace(A,"$&/")+"/"),_(i,t,o,"",(function(e){return e}))):null!=i&&(E(i)&&(s=i,u=o+(null==i.key||e&&e.key===i.key?"":(""+i.key).replace(A,"$&/")+"/")+c,i=C(s.type,u,void 0,0,0,s.props)),t.push(i)),1;c=0;var d,m=""===a?".":a+":";if(k(e))for(var h=0;h<e.length;h++)c+=_(a=e[h],t,o,l=m+P(a,h),i);else if("function"==typeof(h=null===(d=e)||"object"!=typeof d?null:"function"==typeof(d=p&&d[p]||d["@@iterator"])?d:null))for(e=h.call(e),h=0;!(a=e.next()).done;)c+=_(a=a.value,t,o,l=m+P(a,h++),i);else if("object"===l){if("function"==typeof e.then)return _(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(T,T):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,o,a,i);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function R(e,t,n){if(null==e)return e;var r=[],o=0;return _(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function z(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var O="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function M(){}t.Children={map:R,forEach:function(e,t,n){R(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return R(e,(function(){t++})),t},toArray:function(e){return R(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=w,t.__COMPILER_RUNTIME={__proto__:null,c:function(e){return w.H.useMemoCache(e)}},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=h({},e.props),o=e.key;if(null!=t)for(a in t.ref,void 0!==t.key&&(o=""+t.key),t)!x.call(t,a)||"key"===a||"__self"===a||"__source"===a||"ref"===a&&void 0===t.ref||(r[a]=t[a]);var a=arguments.length-2;if(1===a)r.children=n;else if(1<a){for(var i=Array(a),l=0;l<a;l++)i[l]=arguments[l+2];r.children=i}return C(e.type,o,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:l,_context:e},e},t.createElement=function(e,t,n){var r,o={},a=null;if(null!=t)for(r in void 0!==t.key&&(a=""+t.key),t)x.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(o[r]=t[r]);var i=arguments.length-2;if(1===i)o.children=n;else if(1<i){for(var l=Array(i),s=0;s<i;s++)l[s]=arguments[s+2];o.children=l}if(e&&e.defaultProps)for(r in i=e.defaultProps)void 0===o[r]&&(o[r]=i[r]);return C(e,a,void 0,0,0,o)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:z}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=w.T,n={};w.T=n;try{var r=e(),o=w.S;null!==o&&o(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(M,O)}catch(e){O(e)}finally{w.T=t}},t.unstable_useCacheRefresh=function(){return w.H.useCacheRefresh()},t.use=function(e){return w.H.use(e)},t.useActionState=function(e,t,n){return w.H.useActionState(e,t,n)},t.useCallback=function(e,t){return w.H.useCallback(e,t)},t.useContext=function(e){return w.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return w.H.useDeferredValue(e,t)},t.useEffect=function(e,t,n){var r=w.H;if("function"==typeof n)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,t)},t.useId=function(){return w.H.useId()},t.useImperativeHandle=function(e,t,n){return w.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return w.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return w.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return w.H.useMemo(e,t)},t.useOptimistic=function(e,t){return w.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return w.H.useReducer(e,t,n)},t.useRef=function(e){return w.H.useRef(e)},t.useState=function(e){return w.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return w.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return w.H.useTransition()},t.version="19.1.0"},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},982:(e,t,n)=>{e.exports=n(477)}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={id:e,exports:{}};return n[e](a,a.exports,o),a.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var a=Object.create(null);o.r(a);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,o.d(a,i),a},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nc=void 0;var a=o(848),i=o(540),l=o.t(i,2),s=o(338),u=e=>"checkbox"===e.type,c=e=>e instanceof Date,d=e=>null==e;const f=e=>"object"==typeof e;var p=e=>!d(e)&&!Array.isArray(e)&&f(e)&&!c(e),m=e=>p(e)&&e.target?u(e.target)?e.target.checked:e.target.value:e,h=(e,t)=>e.has((e=>e.substring(0,e.search(/\.\d+(\.|$)/))||e)(t)),g="undefined"!=typeof window&&void 0!==window.HTMLElement&&"undefined"!=typeof document;function y(e){let t;const n=Array.isArray(e),r="undefined"!=typeof FileList&&e instanceof FileList;if(e instanceof Date)t=new Date(e);else if(e instanceof Set)t=new Set(e);else{if(g&&(e instanceof Blob||r)||!n&&!p(e))return e;if(t=n?[]:{},n||(e=>{const t=e.constructor&&e.constructor.prototype;return p(t)&&t.hasOwnProperty("isPrototypeOf")})(e))for(const n in e)e.hasOwnProperty(n)&&(t[n]=y(e[n]));else t=e}return t}var v=e=>Array.isArray(e)?e.filter(Boolean):[],b=e=>void 0===e,S=(e,t,n)=>{if(!t||!p(e))return n;const r=v(t.split(/[,[\].]+?/)).reduce(((e,t)=>d(e)?e:e[t]),e);return b(r)||r===e?b(e[t])?n:e[t]:r},k=e=>"boolean"==typeof e,w=e=>/^\w*$/.test(e),x=e=>v(e.replace(/["|']|\]/g,"").split(/\.|\[/)),C=(e,t,n)=>{let r=-1;const o=w(t)?[t]:x(t),a=o.length,i=a-1;for(;++r<a;){const t=o[r];let a=n;if(r!==i){const n=e[t];a=p(n)||Array.isArray(n)?n:isNaN(+o[r+1])?{}:[]}if("__proto__"===t||"constructor"===t||"prototype"===t)return;e[t]=a,e=e[t]}};const E="blur",A="onChange",P="onSubmit",T="all",_="pattern",R="required",z=i.createContext(null),O=()=>i.useContext(z);var M=(e,t,n,r=!0)=>{const o={defaultValues:t._defaultValues};for(const a in e)Object.defineProperty(o,a,{get:()=>{const o=a;return t._proxyFormState[o]!==T&&(t._proxyFormState[o]=!r||T),n&&(n[o]=!0),e[o]}});return o};const N="undefined"!=typeof window?i.useLayoutEffect:i.useEffect;var F=e=>"string"==typeof e,$=(e,t,n,r,o)=>F(e)?(r&&t.watch.add(e),S(n,e,o)):Array.isArray(e)?e.map((e=>(r&&t.watch.add(e),S(n,e)))):(r&&(t.watchAll=!0),n);const L=e=>e.render(function(e){const t=O(),{name:n,disabled:r,control:o=t.control,shouldUnregister:a}=e,l=h(o._names.array,n),s=function(e){const t=O(),{control:n=t.control,name:r,defaultValue:o,disabled:a,exact:l}=e||{},s=i.useRef(o),[u,c]=i.useState(n._getWatch(r,s.current));return N((()=>n._subscribe({name:r,formState:{values:!0},exact:l,callback:e=>!a&&c($(r,n._names,e.values||n._formValues,!1,s.current))})),[r,n,a,l]),i.useEffect((()=>n._removeUnmounted())),u}({control:o,name:n,defaultValue:S(o._formValues,n,S(o._defaultValues,n,e.defaultValue)),exact:!0}),u=function(e){const t=O(),{control:n=t.control,disabled:r,name:o,exact:a}=e||{},[l,s]=i.useState(n._formState),u=i.useRef({isDirty:!1,isLoading:!1,dirtyFields:!1,touchedFields:!1,validatingFields:!1,isValidating:!1,isValid:!1,errors:!1});return N((()=>n._subscribe({name:o,formState:u.current,exact:a,callback:e=>{!r&&s({...n._formState,...e})}})),[o,r,a]),i.useEffect((()=>{u.current.isValid&&n._setValid(!0)}),[n]),i.useMemo((()=>M(l,n,u.current,!1)),[l,n])}({control:o,name:n,exact:!0}),c=i.useRef(e),d=i.useRef(o.register(n,{...e.rules,value:s,...k(e.disabled)?{disabled:e.disabled}:{}})),f=i.useMemo((()=>Object.defineProperties({},{invalid:{enumerable:!0,get:()=>!!S(u.errors,n)},isDirty:{enumerable:!0,get:()=>!!S(u.dirtyFields,n)},isTouched:{enumerable:!0,get:()=>!!S(u.touchedFields,n)},isValidating:{enumerable:!0,get:()=>!!S(u.validatingFields,n)},error:{enumerable:!0,get:()=>S(u.errors,n)}})),[u,n]),p=i.useCallback((e=>d.current.onChange({target:{value:m(e),name:n},type:"change"})),[n]),g=i.useCallback((()=>d.current.onBlur({target:{value:S(o._formValues,n),name:n},type:E})),[n,o._formValues]),v=i.useCallback((e=>{const t=S(o._fields,n);t&&e&&(t._f.ref={focus:()=>e.focus&&e.focus(),select:()=>e.select&&e.select(),setCustomValidity:t=>e.setCustomValidity(t),reportValidity:()=>e.reportValidity()})}),[o._fields,n]),w=i.useMemo((()=>({name:n,value:s,...k(r)||u.disabled?{disabled:u.disabled||r}:{},onChange:p,onBlur:g,ref:v})),[n,r,u.disabled,p,g,v,s]);return i.useEffect((()=>{const e=o._options.shouldUnregister||a;o.register(n,{...c.current.rules,...k(c.current.disabled)?{disabled:c.current.disabled}:{}});const t=(e,t)=>{const n=S(o._fields,e);n&&n._f&&(n._f.mount=t)};if(t(n,!0),e){const e=y(S(o._options.defaultValues,n));C(o._defaultValues,n,e),b(S(o._formValues,n))&&C(o._formValues,n,e)}return!l&&o.register(n),()=>{(l?e&&!o._state.action:e)?o.unregister(n):t(n,!1)}}),[n,o,l,a]),i.useEffect((()=>{o._setDisabledField({disabled:r,name:n})}),[r,n,o]),i.useMemo((()=>({field:w,formState:u,fieldState:f})),[w,u,f])}(e));var j=(e,t,n,r,o)=>t?{...n[e],types:{...n[e]&&n[e].types?n[e].types:{},[r]:o||!0}}:{},I=e=>Array.isArray(e)?e:[e],D=()=>{let e=[];return{get observers(){return e},next:t=>{for(const n of e)n.next&&n.next(t)},subscribe:t=>(e.push(t),{unsubscribe:()=>{e=e.filter((e=>e!==t))}}),unsubscribe:()=>{e=[]}}},B=e=>d(e)||!f(e);function V(e,t){if(B(e)||B(t))return e===t;if(c(e)&&c(t))return e.getTime()===t.getTime();const n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(const o of n){const n=e[o];if(!r.includes(o))return!1;if("ref"!==o){const e=t[o];if(c(n)&&c(e)||p(n)&&p(e)||Array.isArray(n)&&Array.isArray(e)?!V(n,e):n!==e)return!1}}return!0}var W=e=>p(e)&&!Object.keys(e).length,H=e=>"file"===e.type,U=e=>"function"==typeof e,q=e=>{if(!g)return!1;const t=e?e.ownerDocument:0;return e instanceof(t&&t.defaultView?t.defaultView.HTMLElement:HTMLElement)},K=e=>"select-multiple"===e.type,Q=e=>"radio"===e.type,G=e=>q(e)&&e.isConnected;function X(e,t){const n=Array.isArray(t)?t:w(t)?[t]:x(t),r=1===n.length?e:function(e,t){const n=t.slice(0,-1).length;let r=0;for(;r<n;)e=b(e)?r++:e[t[r++]];return e}(e,n),o=n.length-1,a=n[o];return r&&delete r[a],0!==o&&(p(r)&&W(r)||Array.isArray(r)&&function(e){for(const t in e)if(e.hasOwnProperty(t)&&!b(e[t]))return!1;return!0}(r))&&X(e,n.slice(0,-1)),e}var Y=e=>{for(const t in e)if(U(e[t]))return!0;return!1};function Z(e,t={}){const n=Array.isArray(e);if(p(e)||n)for(const n in e)Array.isArray(e[n])||p(e[n])&&!Y(e[n])?(t[n]=Array.isArray(e[n])?[]:{},Z(e[n],t[n])):d(e[n])||(t[n]=!0);return t}function J(e,t,n){const r=Array.isArray(e);if(p(e)||r)for(const r in e)Array.isArray(e[r])||p(e[r])&&!Y(e[r])?b(t)||B(n[r])?n[r]=Array.isArray(e[r])?Z(e[r],[]):{...Z(e[r])}:J(e[r],d(t)?{}:t[r],n[r]):n[r]=!V(e[r],t[r]);return n}var ee=(e,t)=>J(e,t,Z(t));const te={value:!1,isValid:!1},ne={value:!0,isValid:!0};var re=e=>{if(Array.isArray(e)){if(e.length>1){const t=e.filter((e=>e&&e.checked&&!e.disabled)).map((e=>e.value));return{value:t,isValid:!!t.length}}return e[0].checked&&!e[0].disabled?e[0].attributes&&!b(e[0].attributes.value)?b(e[0].value)||""===e[0].value?ne:{value:e[0].value,isValid:!0}:ne:te}return te},oe=(e,{valueAsNumber:t,valueAsDate:n,setValueAs:r})=>b(e)?e:t?""===e?NaN:e?+e:e:n&&F(e)?new Date(e):r?r(e):e;const ae={isValid:!1,value:null};var ie=e=>Array.isArray(e)?e.reduce(((e,t)=>t&&t.checked&&!t.disabled?{isValid:!0,value:t.value}:e),ae):ae;function le(e){const t=e.ref;return H(t)?t.files:Q(t)?ie(e.refs).value:K(t)?[...t.selectedOptions].map((({value:e})=>e)):u(t)?re(e.refs).value:oe(b(t.value)?e.ref.value:t.value,e)}var se=e=>e instanceof RegExp,ue=e=>b(e)?e:se(e)?e.source:p(e)?se(e.value)?e.value.source:e.value:e,ce=e=>({isOnSubmit:!e||e===P,isOnBlur:"onBlur"===e,isOnChange:e===A,isOnAll:e===T,isOnTouch:"onTouched"===e});const de="AsyncFunction";var fe=(e,t,n)=>!n&&(t.watchAll||t.watch.has(e)||[...t.watch].some((t=>e.startsWith(t)&&/^\.\w+/.test(e.slice(t.length)))));const pe=(e,t,n,r)=>{for(const o of n||Object.keys(e)){const n=S(e,o);if(n){const{_f:e,...a}=n;if(e){if(e.refs&&e.refs[0]&&t(e.refs[0],o)&&!r)return!0;if(e.ref&&t(e.ref,e.name)&&!r)return!0;if(pe(a,t))break}else if(p(a)&&pe(a,t))break}}};function me(e,t,n){const r=S(e,n);if(r||w(n))return{error:r,name:n};const o=n.split(".");for(;o.length;){const r=o.join("."),a=S(t,r),i=S(e,r);if(a&&!Array.isArray(a)&&n!==r)return{name:n};if(i&&i.type)return{name:r,error:i};if(i&&i.root&&i.root.type)return{name:`${r}.root`,error:i.root};o.pop()}return{name:n}}var he=(e,t,n)=>{const r=I(S(e,n));return C(r,"root",t[n]),C(e,n,r),e},ge=e=>F(e);function ye(e,t,n="validate"){if(ge(e)||Array.isArray(e)&&e.every(ge)||k(e)&&!e)return{type:n,message:ge(e)?e:"",ref:t}}var ve=e=>p(e)&&!se(e)?e:{value:e,message:""},be=async(e,t,n,r,o,a)=>{const{ref:i,refs:l,required:s,maxLength:c,minLength:f,min:m,max:h,pattern:g,validate:y,name:v,valueAsNumber:w,mount:x}=e._f,C=S(n,v);if(!x||t.has(v))return{};const E=l?l[0]:i,A=e=>{o&&E.reportValidity&&(E.setCustomValidity(k(e)?"":e||""),E.reportValidity())},P={},T=Q(i),z=u(i),O=T||z,M=(w||H(i))&&b(i.value)&&b(C)||q(i)&&""===i.value||""===C||Array.isArray(C)&&!C.length,N=j.bind(null,v,r,P),$=(e,t,n,r="maxLength",o="minLength")=>{const a=e?t:n;P[v]={type:e?r:o,message:a,ref:i,...N(e?r:o,a)}};if(a?!Array.isArray(C)||!C.length:s&&(!O&&(M||d(C))||k(C)&&!C||z&&!re(l).isValid||T&&!ie(l).isValid)){const{value:e,message:t}=ge(s)?{value:!!s,message:s}:ve(s);if(e&&(P[v]={type:R,message:t,ref:E,...N(R,t)},!r))return A(t),P}if(!(M||d(m)&&d(h))){let e,t;const n=ve(h),o=ve(m);if(d(C)||isNaN(C)){const r=i.valueAsDate||new Date(C),a=e=>new Date((new Date).toDateString()+" "+e),l="time"==i.type,s="week"==i.type;F(n.value)&&C&&(e=l?a(C)>a(n.value):s?C>n.value:r>new Date(n.value)),F(o.value)&&C&&(t=l?a(C)<a(o.value):s?C<o.value:r<new Date(o.value))}else{const r=i.valueAsNumber||(C?+C:C);d(n.value)||(e=r>n.value),d(o.value)||(t=r<o.value)}if((e||t)&&($(!!e,n.message,o.message,"max","min"),!r))return A(P[v].message),P}if((c||f)&&!M&&(F(C)||a&&Array.isArray(C))){const e=ve(c),t=ve(f),n=!d(e.value)&&C.length>+e.value,o=!d(t.value)&&C.length<+t.value;if((n||o)&&($(n,e.message,t.message),!r))return A(P[v].message),P}if(g&&!M&&F(C)){const{value:e,message:t}=ve(g);if(se(e)&&!C.match(e)&&(P[v]={type:_,message:t,ref:i,...N(_,t)},!r))return A(t),P}if(y)if(U(y)){const e=ye(await y(C,n),E);if(e&&(P[v]={...e,...N("validate",e.message)},!r))return A(e.message),P}else if(p(y)){let e={};for(const t in y){if(!W(e)&&!r)break;const o=ye(await y[t](C,n),E,t);o&&(e={...o,...N(t,o.message)},A(o.message),r&&(P[v]=e))}if(!W(e)&&(P[v]={ref:E,...e},!r))return P}return A(!0),P};const Se={mode:P,reValidateMode:A,shouldFocusError:!0};function ke(e={}){let t={...Se,...e},n={submitCount:0,isDirty:!1,isReady:!1,isLoading:U(t.defaultValues),isValidating:!1,isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,touchedFields:{},dirtyFields:{},validatingFields:{},errors:t.errors||{},disabled:t.disabled||!1};const r={};let o,a=(p(t.defaultValues)||p(t.values))&&y(t.defaultValues||t.values)||{},i=t.shouldUnregister?{}:y(a),l={action:!1,mount:!1,watch:!1},s={mount:new Set,disabled:new Set,unMount:new Set,array:new Set,watch:new Set},f=0;const w={isDirty:!1,dirtyFields:!1,validatingFields:!1,touchedFields:!1,isValidating:!1,isValid:!1,errors:!1};let x={...w};const A={array:D(),state:D()},P=t.criteriaMode===T,_=async e=>{if(!t.disabled&&(w.isValid||x.isValid||e)){const e=t.resolver?W((await M()).errors):await N(r,!0);e!==n.isValid&&A.state.next({isValid:e})}},R=(e,r)=>{!t.disabled&&(w.isValidating||w.validatingFields||x.isValidating||x.validatingFields)&&((e||Array.from(s.mount)).forEach((e=>{e&&(r?C(n.validatingFields,e,r):X(n.validatingFields,e))})),A.state.next({validatingFields:n.validatingFields,isValidating:!W(n.validatingFields)}))},z=(e,t,n,o)=>{const s=S(r,e);if(s){const r=S(i,e,b(n)?S(a,e):n);b(r)||o&&o.defaultChecked||t?C(i,e,t?r:le(s._f)):B(e,r),l.mount&&_()}},O=(e,r,o,i,l)=>{let s=!1,u=!1;const c={name:e};if(!t.disabled){if(!o||i){(w.isDirty||x.isDirty)&&(u=n.isDirty,n.isDirty=c.isDirty=L(),s=u!==c.isDirty);const t=V(S(a,e),r);u=!!S(n.dirtyFields,e),t?X(n.dirtyFields,e):C(n.dirtyFields,e,!0),c.dirtyFields=n.dirtyFields,s=s||(w.dirtyFields||x.dirtyFields)&&u!==!t}if(o){const t=S(n.touchedFields,e);t||(C(n.touchedFields,e,o),c.touchedFields=n.touchedFields,s=s||(w.touchedFields||x.touchedFields)&&t!==o)}s&&l&&A.state.next(c)}return s?c:{}},M=async e=>{R(e,!0);const n=await t.resolver(i,t.context,((e,t,n,r)=>{const o={};for(const n of e){const e=S(t,n);e&&C(o,n,e._f)}return{criteriaMode:n,names:[...e],fields:o,shouldUseNativeValidation:r}})(e||s.mount,r,t.criteriaMode,t.shouldUseNativeValidation));return R(e),n},N=async(e,r,o={valid:!0})=>{for(const l in e){const u=e[l];if(u){const{_f:e,...c}=u;if(e){const c=s.array.has(e.name),d=u._f&&!!(a=u._f)&&!!a.validate&&!!(U(a.validate)&&a.validate.constructor.name===de||p(a.validate)&&Object.values(a.validate).find((e=>e.constructor.name===de)));d&&w.validatingFields&&R([l],!0);const f=await be(u,s.disabled,i,P,t.shouldUseNativeValidation&&!r,c);if(d&&w.validatingFields&&R([l]),f[e.name]&&(o.valid=!1,r))break;!r&&(S(f,e.name)?c?he(n.errors,f,e.name):C(n.errors,e.name,f[e.name]):X(n.errors,e.name))}!W(c)&&await N(c,r,o)}}var a;return o.valid},L=(e,n)=>!t.disabled&&(e&&n&&C(i,e,n),!V(re(),a)),j=(e,t,n)=>$(e,s,{...l.mount?i:b(t)?a:F(e)?{[e]:t}:t},n,t),B=(e,t,n={})=>{const o=S(r,e);let a=t;if(o){const n=o._f;n&&(!n.disabled&&C(i,e,oe(t,n)),a=q(n.ref)&&d(t)?"":t,K(n.ref)?[...n.ref.options].forEach((e=>e.selected=a.includes(e.value))):n.refs?u(n.ref)?n.refs.forEach((e=>{e.defaultChecked&&e.disabled||(Array.isArray(a)?e.checked=!!a.find((t=>t===e.value)):e.checked=a===e.value||!!a)})):n.refs.forEach((e=>e.checked=e.value===a)):H(n.ref)?n.ref.value="":(n.ref.value=a,n.ref.type||A.state.next({name:e,values:y(i)})))}(n.shouldDirty||n.shouldTouch)&&O(e,a,n.shouldTouch,n.shouldDirty,!0),n.shouldValidate&&ne(e)},Y=(e,t,n)=>{for(const o in t){if(!t.hasOwnProperty(o))return;const a=t[o],i=e+"."+o,l=S(r,i);(s.array.has(e)||p(a)||l&&!l._f)&&!c(a)?Y(i,a,n):B(i,a,n)}},Z=(e,t,o={})=>{const u=S(r,e),c=s.array.has(e),f=y(t);C(i,e,f),c?(A.array.next({name:e,values:y(i)}),(w.isDirty||w.dirtyFields||x.isDirty||x.dirtyFields)&&o.shouldDirty&&A.state.next({name:e,dirtyFields:ee(a,i),isDirty:L(e,f)})):!u||u._f||d(f)?B(e,f,o):Y(e,f,o),fe(e,s)&&A.state.next({...n}),A.state.next({name:l.mount?e:void 0,values:y(i)})},J=async e=>{l.mount=!0;const a=e.target;let u=a.name,d=!0;const p=S(r,u),h=e=>{d=Number.isNaN(e)||c(e)&&isNaN(e.getTime())||V(e,S(i,u,e))},g=ce(t.mode),v=ce(t.reValidateMode);if(p){let l,c;const b=a.type?le(p._f):m(e),T=e.type===E||"focusout"===e.type,z=!(e=>e.mount&&(e.required||e.min||e.max||e.maxLength||e.minLength||e.pattern||e.validate))(p._f)&&!t.resolver&&!S(n.errors,u)&&!p._f.deps||((e,t,n,r,o)=>!o.isOnAll&&(!n&&o.isOnTouch?!(t||e):(n?r.isOnBlur:o.isOnBlur)?!e:!(n?r.isOnChange:o.isOnChange)||e))(T,S(n.touchedFields,u),n.isSubmitted,v,g),F=fe(u,s,T);C(i,u,b),T?(p._f.onBlur&&p._f.onBlur(e),o&&o(0)):p._f.onChange&&p._f.onChange(e);const $=O(u,b,T),L=!W($)||F;if(!T&&A.state.next({name:u,type:e.type,values:y(i)}),z)return(w.isValid||x.isValid)&&("onBlur"===t.mode?T&&_():T||_()),L&&A.state.next({name:u,...F?{}:$});if(!T&&F&&A.state.next({...n}),t.resolver){const{errors:e}=await M([u]);if(h(b),d){const t=me(n.errors,r,u),o=me(e,r,t.name||u);l=o.error,u=o.name,c=W(e)}}else R([u],!0),l=(await be(p,s.disabled,i,P,t.shouldUseNativeValidation))[u],R([u]),h(b),d&&(l?c=!1:(w.isValid||x.isValid)&&(c=await N(r,!0)));d&&(p._f.deps&&ne(p._f.deps),((e,r,a,i)=>{const l=S(n.errors,e),s=(w.isValid||x.isValid)&&k(r)&&n.isValid!==r;var u;if(t.delayError&&a?(u=()=>((e,t)=>{C(n.errors,e,t),A.state.next({errors:n.errors})})(e,a),o=e=>{clearTimeout(f),f=setTimeout(u,e)},o(t.delayError)):(clearTimeout(f),o=null,a?C(n.errors,e,a):X(n.errors,e)),(a?!V(l,a):l)||!W(i)||s){const t={...i,...s&&k(r)?{isValid:r}:{},errors:n.errors,name:e};n={...n,...t},A.state.next(t)}})(u,c,l,$))}},te=(e,t)=>{if(S(n.errors,t)&&e.focus)return e.focus(),1},ne=async(e,o={})=>{let a,i;const l=I(e);if(t.resolver){const t=await(async e=>{const{errors:t}=await M(e);if(e)for(const r of e){const e=S(t,r);e?C(n.errors,r,e):X(n.errors,r)}else n.errors=t;return t})(b(e)?e:l);a=W(t),i=e?!l.some((e=>S(t,e))):a}else e?(i=(await Promise.all(l.map((async e=>{const t=S(r,e);return await N(t&&t._f?{[e]:t}:t)})))).every(Boolean),(i||n.isValid)&&_()):i=a=await N(r);return A.state.next({...!F(e)||(w.isValid||x.isValid)&&a!==n.isValid?{}:{name:e},...t.resolver||!e?{isValid:a}:{},errors:n.errors}),o.shouldFocus&&!i&&pe(r,te,e?l:s.mount),i},re=e=>{const t={...l.mount?i:a};return b(e)?t:F(e)?S(t,e):e.map((e=>S(t,e)))},ae=(e,t)=>({invalid:!!S((t||n).errors,e),isDirty:!!S((t||n).dirtyFields,e),error:S((t||n).errors,e),isValidating:!!S(n.validatingFields,e),isTouched:!!S((t||n).touchedFields,e)}),ie=(e,t,o)=>{const a=(S(r,e,{_f:{}})._f||{}).ref,i=S(n.errors,e)||{},{ref:l,message:s,type:u,...c}=i;C(n.errors,e,{...c,...t,ref:a}),A.state.next({name:e,errors:n.errors,isValid:!1}),o&&o.shouldFocus&&a&&a.focus&&a.focus()},se=e=>A.state.subscribe({next:t=>{var r,o,a;r=e.name,o=t.name,a=e.exact,r&&o&&r!==o&&!I(r).some((e=>e&&(a?e===o:e.startsWith(o)||o.startsWith(e))))||!((e,t,n,r)=>{n(e);const{name:o,...a}=e;return W(a)||Object.keys(a).length>=Object.keys(t).length||Object.keys(a).find((e=>t[e]===(!r||T)))})(t,e.formState||w,Ee,e.reRenderRoot)||e.callback({values:{...i},...n,...t})}}).unsubscribe,ge=(e,o={})=>{for(const l of e?I(e):s.mount)s.mount.delete(l),s.array.delete(l),o.keepValue||(X(r,l),X(i,l)),!o.keepError&&X(n.errors,l),!o.keepDirty&&X(n.dirtyFields,l),!o.keepTouched&&X(n.touchedFields,l),!o.keepIsValidating&&X(n.validatingFields,l),!t.shouldUnregister&&!o.keepDefaultValue&&X(a,l);A.state.next({values:y(i)}),A.state.next({...n,...o.keepDirty?{isDirty:L()}:{}}),!o.keepIsValid&&_()},ye=({disabled:e,name:t})=>{(k(e)&&l.mount||e||s.disabled.has(t))&&(e?s.disabled.add(t):s.disabled.delete(t))},ve=(e,n={})=>{let o=S(r,e);const i=k(n.disabled)||k(t.disabled);return C(r,e,{...o||{},_f:{...o&&o._f?o._f:{ref:{name:e}},name:e,mount:!0,...n}}),s.mount.add(e),o?ye({disabled:k(n.disabled)?n.disabled:t.disabled,name:e}):z(e,!0,n.value),{...i?{disabled:n.disabled||t.disabled}:{},...t.progressive?{required:!!n.required,min:ue(n.min),max:ue(n.max),minLength:ue(n.minLength),maxLength:ue(n.maxLength),pattern:ue(n.pattern)}:{},name:e,onChange:J,onBlur:J,ref:i=>{if(i){ve(e,n),o=S(r,e);const t=b(i.value)&&i.querySelectorAll&&i.querySelectorAll("input,select,textarea")[0]||i,l=(e=>Q(e)||u(e))(t),s=o._f.refs||[];if(l?s.find((e=>e===t)):t===o._f.ref)return;C(r,e,{_f:{...o._f,...l?{refs:[...s.filter(G),t,...Array.isArray(S(a,e))?[{}]:[]],ref:{type:t.type,name:e}}:{ref:t}}}),z(e,!1,void 0,t)}else o=S(r,e,{}),o._f&&(o._f.mount=!1),(t.shouldUnregister||n.shouldUnregister)&&(!h(s.array,e)||!l.action)&&s.unMount.add(e)}}},ke=()=>t.shouldFocusError&&pe(r,te,s.mount),we=(e,o)=>async a=>{let l;a&&(a.preventDefault&&a.preventDefault(),a.persist&&a.persist());let u=y(i);if(A.state.next({isSubmitting:!0}),t.resolver){const{errors:e,values:t}=await M();n.errors=e,u=t}else await N(r);if(s.disabled.size)for(const e of s.disabled)C(u,e,void 0);if(X(n.errors,"root"),W(n.errors)){A.state.next({errors:{}});try{await e(u,a)}catch(e){l=e}}else o&&await o({...n.errors},a),ke(),setTimeout(ke);if(A.state.next({isSubmitted:!0,isSubmitting:!1,isSubmitSuccessful:W(n.errors)&&!l,submitCount:n.submitCount+1,errors:n.errors}),l)throw l},xe=(e,o={})=>{const u=e?y(e):a,c=y(u),d=W(e),f=d?a:c;if(o.keepDefaultValues||(a=u),!o.keepValues){if(o.keepDirtyValues){const e=new Set([...s.mount,...Object.keys(ee(a,i))]);for(const t of Array.from(e))S(n.dirtyFields,t)?C(f,t,S(i,t)):Z(t,S(f,t))}else{if(g&&b(e))for(const e of s.mount){const t=S(r,e);if(t&&t._f){const e=Array.isArray(t._f.refs)?t._f.refs[0]:t._f.ref;if(q(e)){const t=e.closest("form");if(t){t.reset();break}}}}for(const e of s.mount)Z(e,S(f,e))}i=y(f),A.array.next({values:{...f}}),A.state.next({values:{...f}})}s={mount:o.keepDirtyValues?s.mount:new Set,unMount:new Set,array:new Set,disabled:new Set,watch:new Set,watchAll:!1,focus:""},l.mount=!w.isValid||!!o.keepIsValid||!!o.keepDirtyValues,l.watch=!!t.shouldUnregister,A.state.next({submitCount:o.keepSubmitCount?n.submitCount:0,isDirty:!d&&(o.keepDirty?n.isDirty:!(!o.keepDefaultValues||V(e,a))),isSubmitted:!!o.keepIsSubmitted&&n.isSubmitted,dirtyFields:d?{}:o.keepDirtyValues?o.keepDefaultValues&&i?ee(a,i):n.dirtyFields:o.keepDefaultValues&&e?ee(a,e):o.keepDirty?n.dirtyFields:{},touchedFields:o.keepTouched?n.touchedFields:{},errors:o.keepErrors?n.errors:{},isSubmitSuccessful:!!o.keepIsSubmitSuccessful&&n.isSubmitSuccessful,isSubmitting:!1})},Ce=(e,t)=>xe(U(e)?e(i):e,t),Ee=e=>{n={...n,...e}},Ae={control:{register:ve,unregister:ge,getFieldState:ae,handleSubmit:we,setError:ie,_subscribe:se,_runSchema:M,_focusError:ke,_getWatch:j,_getDirty:L,_setValid:_,_setFieldArray:(e,o=[],s,u,c=!0,d=!0)=>{if(u&&s&&!t.disabled){if(l.action=!0,d&&Array.isArray(S(r,e))){const t=s(S(r,e),u.argA,u.argB);c&&C(r,e,t)}if(d&&Array.isArray(S(n.errors,e))){const t=s(S(n.errors,e),u.argA,u.argB);c&&C(n.errors,e,t),((e,t)=>{!v(S(e,t)).length&&X(e,t)})(n.errors,e)}if((w.touchedFields||x.touchedFields)&&d&&Array.isArray(S(n.touchedFields,e))){const t=s(S(n.touchedFields,e),u.argA,u.argB);c&&C(n.touchedFields,e,t)}(w.dirtyFields||x.dirtyFields)&&(n.dirtyFields=ee(a,i)),A.state.next({name:e,isDirty:L(e,o),dirtyFields:n.dirtyFields,errors:n.errors,isValid:n.isValid})}else C(i,e,o)},_setDisabledField:ye,_setErrors:e=>{n.errors=e,A.state.next({errors:n.errors,isValid:!1})},_getFieldArray:e=>v(S(l.mount?i:a,e,t.shouldUnregister?S(a,e,[]):[])),_reset:xe,_resetDefaultValues:()=>U(t.defaultValues)&&t.defaultValues().then((e=>{Ce(e,t.resetOptions),A.state.next({isLoading:!1})})),_removeUnmounted:()=>{for(const e of s.unMount){const t=S(r,e);t&&(t._f.refs?t._f.refs.every((e=>!G(e))):!G(t._f.ref))&&ge(e)}s.unMount=new Set},_disableForm:e=>{k(e)&&(A.state.next({disabled:e}),pe(r,((t,n)=>{const o=S(r,n);o&&(t.disabled=o._f.disabled||e,Array.isArray(o._f.refs)&&o._f.refs.forEach((t=>{t.disabled=o._f.disabled||e})))}),0,!1))},_subjects:A,_proxyFormState:w,get _fields(){return r},get _formValues(){return i},get _state(){return l},set _state(e){l=e},get _defaultValues(){return a},get _names(){return s},set _names(e){s=e},get _formState(){return n},get _options(){return t},set _options(e){t={...t,...e}}},subscribe:e=>(l.mount=!0,x={...x,...e.formState},se({...e,formState:x})),trigger:ne,register:ve,handleSubmit:we,watch:(e,t)=>U(e)?A.state.subscribe({next:n=>e(j(void 0,t),n)}):j(e,t,!0),setValue:Z,getValues:re,reset:Ce,resetField:(e,t={})=>{S(r,e)&&(b(t.defaultValue)?Z(e,y(S(a,e))):(Z(e,t.defaultValue),C(a,e,y(t.defaultValue))),t.keepTouched||X(n.touchedFields,e),t.keepDirty||(X(n.dirtyFields,e),n.isDirty=t.defaultValue?L(e,y(S(a,e))):L()),t.keepError||(X(n.errors,e),w.isValid&&_()),A.state.next({...n}))},clearErrors:e=>{e&&I(e).forEach((e=>X(n.errors,e))),A.state.next({errors:e?n.errors:{}})},unregister:ge,setError:ie,setFocus:(e,t={})=>{const n=S(r,e),o=n&&n._f;if(o){const e=o.refs?o.refs[0]:o.ref;e.focus&&(e.focus(),t.shouldSelect&&U(e.select)&&e.select())}},getFieldState:ae};return{...Ae,formControl:Ae}}function we(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(n=we(e[t]))&&(r&&(r+=" "),r+=n)}else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}const xe=function(){for(var e,t,n=0,r="",o=arguments.length;n<o;n++)(e=arguments[n])&&(t=we(e))&&(r&&(r+=" "),r+=t);return r};function Ce(e,t,n=void 0){const r={};for(const o in e){const a=e[o];let i="",l=!0;for(let e=0;e<a.length;e+=1){const r=a[e];r&&(i+=(!0===l?"":" ")+t(r),l=!1,n&&n[r]&&(i+=" "+n[r]))}r[o]=i}return r}let Ee=0;const Ae={...l}.useId;function Pe(e){if(void 0!==Ae){const t=Ae();return e??t}return function(e){const[t,n]=i.useState(e),r=e||t;return i.useEffect((()=>{null==t&&(Ee+=1,n(`mui-${Ee}`))}),[t]),r}(e)}function Te(){return Te=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Te.apply(null,arguments)}var _e=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){var t;return null==(t=e.parentNode)?void 0:t.removeChild(e)})),this.tags=[],this.ctr=0},e}(),Re=Math.abs,ze=String.fromCharCode,Oe=Object.assign;function Me(e){return e.trim()}function Ne(e,t,n){return e.replace(t,n)}function Fe(e,t){return e.indexOf(t)}function $e(e,t){return 0|e.charCodeAt(t)}function Le(e,t,n){return e.slice(t,n)}function je(e){return e.length}function Ie(e){return e.length}function De(e,t){return t.push(e),e}var Be=1,Ve=1,We=0,He=0,Ue=0,qe="";function Ke(e,t,n,r,o,a,i){return{value:e,root:t,parent:n,type:r,props:o,children:a,line:Be,column:Ve,length:i,return:""}}function Qe(e,t){return Oe(Ke("",null,null,"",null,null,0),e,{length:-e.length},t)}function Ge(){return Ue=He>0?$e(qe,--He):0,Ve--,10===Ue&&(Ve=1,Be--),Ue}function Xe(){return Ue=He<We?$e(qe,He++):0,Ve++,10===Ue&&(Ve=1,Be++),Ue}function Ye(){return $e(qe,He)}function Ze(){return He}function Je(e,t){return Le(qe,e,t)}function et(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function tt(e){return Be=Ve=1,We=je(qe=e),He=0,[]}function nt(e){return qe="",e}function rt(e){return Me(Je(He-1,it(91===e?e+2:40===e?e+1:e)))}function ot(e){for(;(Ue=Ye())&&Ue<33;)Xe();return et(e)>2||et(Ue)>3?"":" "}function at(e,t){for(;--t&&Xe()&&!(Ue<48||Ue>102||Ue>57&&Ue<65||Ue>70&&Ue<97););return Je(e,Ze()+(t<6&&32==Ye()&&32==Xe()))}function it(e){for(;Xe();)switch(Ue){case e:return He;case 34:case 39:34!==e&&39!==e&&it(Ue);break;case 40:41===e&&it(e);break;case 92:Xe()}return He}function lt(e,t){for(;Xe()&&e+Ue!==57&&(e+Ue!==84||47!==Ye()););return"/*"+Je(t,He-1)+"*"+ze(47===e?e:Xe())}function st(e){for(;!et(Ye());)Xe();return Je(e,He)}var ut="-ms-",ct="-moz-",dt="-webkit-",ft="comm",pt="rule",mt="decl",ht="@keyframes";function gt(e,t){for(var n="",r=Ie(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function yt(e,t,n,r){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case mt:return e.return=e.return||e.value;case ft:return"";case ht:return e.return=e.value+"{"+gt(e.children,r)+"}";case pt:e.value=e.props.join(",")}return je(n=gt(e.children,r))?e.return=e.value+"{"+n+"}":""}function vt(e){return nt(bt("",null,null,null,[""],e=tt(e),0,[0],e))}function bt(e,t,n,r,o,a,i,l,s){for(var u=0,c=0,d=i,f=0,p=0,m=0,h=1,g=1,y=1,v=0,b="",S=o,k=a,w=r,x=b;g;)switch(m=v,v=Xe()){case 40:if(108!=m&&58==$e(x,d-1)){-1!=Fe(x+=Ne(rt(v),"&","&\f"),"&\f")&&(y=-1);break}case 34:case 39:case 91:x+=rt(v);break;case 9:case 10:case 13:case 32:x+=ot(m);break;case 92:x+=at(Ze()-1,7);continue;case 47:switch(Ye()){case 42:case 47:De(kt(lt(Xe(),Ze()),t,n),s);break;default:x+="/"}break;case 123*h:l[u++]=je(x)*y;case 125*h:case 59:case 0:switch(v){case 0:case 125:g=0;case 59+c:-1==y&&(x=Ne(x,/\f/g,"")),p>0&&je(x)-d&&De(p>32?wt(x+";",r,n,d-1):wt(Ne(x," ","")+";",r,n,d-2),s);break;case 59:x+=";";default:if(De(w=St(x,t,n,u,c,o,l,b,S=[],k=[],d),a),123===v)if(0===c)bt(x,t,w,w,S,a,d,l,k);else switch(99===f&&110===$e(x,3)?100:f){case 100:case 108:case 109:case 115:bt(e,w,w,r&&De(St(e,w,w,0,0,o,l,b,o,S=[],d),k),o,k,d,l,r?S:k);break;default:bt(x,w,w,w,[""],k,0,l,k)}}u=c=p=0,h=y=1,b=x="",d=i;break;case 58:d=1+je(x),p=m;default:if(h<1)if(123==v)--h;else if(125==v&&0==h++&&125==Ge())continue;switch(x+=ze(v),v*h){case 38:y=c>0?1:(x+="\f",-1);break;case 44:l[u++]=(je(x)-1)*y,y=1;break;case 64:45===Ye()&&(x+=rt(Xe())),f=Ye(),c=d=je(b=x+=st(Ze())),v++;break;case 45:45===m&&2==je(x)&&(h=0)}}return a}function St(e,t,n,r,o,a,i,l,s,u,c){for(var d=o-1,f=0===o?a:[""],p=Ie(f),m=0,h=0,g=0;m<r;++m)for(var y=0,v=Le(e,d+1,d=Re(h=i[m])),b=e;y<p;++y)(b=Me(h>0?f[y]+" "+v:Ne(v,/&\f/g,f[y])))&&(s[g++]=b);return Ke(e,t,n,0===o?pt:l,s,u,c)}function kt(e,t,n){return Ke(e,t,n,ft,ze(Ue),Le(e,2,-2),0)}function wt(e,t,n,r){return Ke(e,t,n,mt,Le(e,0,r),Le(e,r+1,-1),r)}var xt=function(e,t,n){for(var r=0,o=0;r=o,o=Ye(),38===r&&12===o&&(t[n]=1),!et(o);)Xe();return Je(e,He)},Ct=new WeakMap,Et=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||Ct.get(n))&&!r){Ct.set(e,!0);for(var o=[],a=function(e,t){return nt(function(e,t){var n=-1,r=44;do{switch(et(r)){case 0:38===r&&12===Ye()&&(t[n]=1),e[n]+=xt(He-1,t,n);break;case 2:e[n]+=rt(r);break;case 4:if(44===r){e[++n]=58===Ye()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=ze(r)}}while(r=Xe());return e}(tt(e),t))}(t,o),i=n.props,l=0,s=0;l<a.length;l++)for(var u=0;u<i.length;u++,s++)e.props[s]=o[l]?a[l].replace(/&\f/g,i[u]):i[u]+" "+a[l]}}},At=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function Pt(e,t){switch(function(e,t){return 45^$e(e,0)?(((t<<2^$e(e,0))<<2^$e(e,1))<<2^$e(e,2))<<2^$e(e,3):0}(e,t)){case 5103:return dt+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return dt+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return dt+e+ct+e+ut+e+e;case 6828:case 4268:return dt+e+ut+e+e;case 6165:return dt+e+ut+"flex-"+e+e;case 5187:return dt+e+Ne(e,/(\w+).+(:[^]+)/,dt+"box-$1$2"+ut+"flex-$1$2")+e;case 5443:return dt+e+ut+"flex-item-"+Ne(e,/flex-|-self/,"")+e;case 4675:return dt+e+ut+"flex-line-pack"+Ne(e,/align-content|flex-|-self/,"")+e;case 5548:return dt+e+ut+Ne(e,"shrink","negative")+e;case 5292:return dt+e+ut+Ne(e,"basis","preferred-size")+e;case 6060:return dt+"box-"+Ne(e,"-grow","")+dt+e+ut+Ne(e,"grow","positive")+e;case 4554:return dt+Ne(e,/([^-])(transform)/g,"$1"+dt+"$2")+e;case 6187:return Ne(Ne(Ne(e,/(zoom-|grab)/,dt+"$1"),/(image-set)/,dt+"$1"),e,"")+e;case 5495:case 3959:return Ne(e,/(image-set\([^]*)/,dt+"$1$`$1");case 4968:return Ne(Ne(e,/(.+:)(flex-)?(.*)/,dt+"box-pack:$3"+ut+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+dt+e+e;case 4095:case 3583:case 4068:case 2532:return Ne(e,/(.+)-inline(.+)/,dt+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(je(e)-1-t>6)switch($e(e,t+1)){case 109:if(45!==$e(e,t+4))break;case 102:return Ne(e,/(.+:)(.+)-([^]+)/,"$1"+dt+"$2-$3$1"+ct+(108==$e(e,t+3)?"$3":"$2-$3"))+e;case 115:return~Fe(e,"stretch")?Pt(Ne(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==$e(e,t+1))break;case 6444:switch($e(e,je(e)-3-(~Fe(e,"!important")&&10))){case 107:return Ne(e,":",":"+dt)+e;case 101:return Ne(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+dt+(45===$e(e,14)?"inline-":"")+"box$3$1"+dt+"$2$3$1"+ut+"$2box$3")+e}break;case 5936:switch($e(e,t+11)){case 114:return dt+e+ut+Ne(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return dt+e+ut+Ne(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return dt+e+ut+Ne(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return dt+e+ut+e+e}return e}var Tt=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case mt:e.return=Pt(e.value,e.length);break;case ht:return gt([Qe(e,{value:Ne(e.value,"@","@"+dt)})],r);case pt:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return gt([Qe(e,{props:[Ne(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return gt([Qe(e,{props:[Ne(t,/:(plac\w+)/,":"+dt+"input-$1")]}),Qe(e,{props:[Ne(t,/:(plac\w+)/,":-moz-$1")]}),Qe(e,{props:[Ne(t,/:(plac\w+)/,ut+"input-$1")]})],r)}return""}))}}],_t=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,o,a=e.stylisPlugins||Tt,i={},l=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)i[t[n]]=!0;l.push(e)}));var s,u,c,d,f=[yt,(d=function(e){s.insert(e)},function(e){e.root||(e=e.return)&&d(e)})],p=(u=[Et,At].concat(a,f),c=Ie(u),function(e,t,n,r){for(var o="",a=0;a<c;a++)o+=u[a](e,t,n,r)||"";return o});o=function(e,t,n,r){s=n,gt(vt(e?e+"{"+t.styles+"}":t.styles),p),r&&(m.inserted[t.name]=!0)};var m={key:t,sheet:new _e({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:i,registered:{},insert:o};return m.sheet.hydrate(l),m};function Rt(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):n&&(r+=n+" ")})),r}var zt=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},Ot=function(e,t,n){zt(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var o=t;do{e.insert(t===o?"."+r:"",o,e.sheet,!0),o=o.next}while(void 0!==o)}},Mt={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,scale:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};function Nt(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}var Ft=/[A-Z]|^ms/g,$t=/_EMO_([^_]+?)_([^]*?)_EMO_/g,Lt=function(e){return 45===e.charCodeAt(1)},jt=function(e){return null!=e&&"boolean"!=typeof e},It=Nt((function(e){return Lt(e)?e:e.replace(Ft,"-$&").toLowerCase()})),Dt=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace($t,(function(e,t,n){return Vt={name:t,styles:n,next:Vt},t}))}return 1===Mt[e]||Lt(e)||"number"!=typeof t||0===t?t:t+"px"};function Bt(e,t,n){if(null==n)return"";var r=n;if(void 0!==r.__emotion_styles)return r;switch(typeof n){case"boolean":return"";case"object":var o=n;if(1===o.anim)return Vt={name:o.name,styles:o.styles,next:Vt},o.name;var a=n;if(void 0!==a.styles){var i=a.next;if(void 0!==i)for(;void 0!==i;)Vt={name:i.name,styles:i.styles,next:Vt},i=i.next;return a.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=Bt(e,t,n[o])+";";else for(var a in n){var i=n[a];if("object"!=typeof i){var l=i;null!=t&&void 0!==t[l]?r+=a+"{"+t[l]+"}":jt(l)&&(r+=It(a)+":"+Dt(a,l)+";")}else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var s=Bt(e,t,i);switch(a){case"animation":case"animationName":r+=It(a)+":"+s+";";break;default:r+=a+"{"+s+"}"}}else for(var u=0;u<i.length;u++)jt(i[u])&&(r+=It(a)+":"+Dt(a,i[u])+";")}return r}(e,t,n);case"function":if(void 0!==e){var l=Vt,s=n(e);return Vt=l,Bt(e,t,s)}}var u=n;if(null==t)return u;var c=t[u];return void 0!==c?c:u}var Vt,Wt=/label:\s*([^\s;{]+)\s*(;|$)/g;function Ht(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";Vt=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,o+=Bt(n,t,a)):o+=a[0];for(var i=1;i<e.length;i++)o+=Bt(n,t,e[i]),r&&(o+=a[i]);Wt.lastIndex=0;for(var l,s="";null!==(l=Wt.exec(o));)s+="-"+l[1];var u=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(o)+s;return{name:u,styles:o,next:Vt}}var Ut=!!l.useInsertionEffect&&l.useInsertionEffect,qt=Ut||function(e){return e()},Kt=Ut||i.useLayoutEffect,Qt=i.createContext("undefined"!=typeof HTMLElement?_t({key:"css"}):null),Gt=(Qt.Provider,function(e){return(0,i.forwardRef)((function(t,n){var r=(0,i.useContext)(Qt);return e(t,r,n)}))}),Xt=i.createContext({}),Yt={}.hasOwnProperty,Zt="__EMOTION_TYPE_PLEASE_DO_NOT_USE__",Jt=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return zt(t,n,r),qt((function(){return Ot(t,n,r)})),null},en=Gt((function(e,t,n){var r=e.css;"string"==typeof r&&void 0!==t.registered[r]&&(r=t.registered[r]);var o=e[Zt],a=[r],l="";"string"==typeof e.className?l=Rt(t.registered,a,e.className):null!=e.className&&(l=e.className+" ");var s=Ht(a,void 0,i.useContext(Xt));l+=t.key+"-"+s.name;var u={};for(var c in e)Yt.call(e,c)&&"css"!==c&&c!==Zt&&(u[c]=e[c]);return u.className=l,n&&(u.ref=n),i.createElement(i.Fragment,null,i.createElement(Jt,{cache:t,serialized:s,isStringTag:"string"==typeof o}),i.createElement(o,u))})),tn=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,nn=Nt((function(e){return tn.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),rn=function(e){return"theme"!==e},on=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?nn:rn},an=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},ln=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return zt(t,n,r),qt((function(){return Ot(t,n,r)})),null},sn=function e(t,n){var r,o,a=t.__emotion_real===t,l=a&&t.__emotion_base||t;void 0!==n&&(r=n.label,o=n.target);var s=an(t,n,a),u=s||on(l),c=!u("as");return function(){var d=arguments,f=a&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==r&&f.push("label:"+r+";"),null==d[0]||void 0===d[0].raw)f.push.apply(f,d);else{var p=d[0];f.push(p[0]);for(var m=d.length,h=1;h<m;h++)f.push(d[h],p[h])}var g=Gt((function(e,t,n){var r=c&&e.as||l,a="",d=[],p=e;if(null==e.theme){for(var m in p={},e)p[m]=e[m];p.theme=i.useContext(Xt)}"string"==typeof e.className?a=Rt(t.registered,d,e.className):null!=e.className&&(a=e.className+" ");var h=Ht(f.concat(d),t.registered,p);a+=t.key+"-"+h.name,void 0!==o&&(a+=" "+o);var g=c&&void 0===s?on(r):u,y={};for(var v in e)c&&"as"===v||g(v)&&(y[v]=e[v]);return y.className=a,n&&(y.ref=n),i.createElement(i.Fragment,null,i.createElement(ln,{cache:t,serialized:h,isStringTag:"string"==typeof r}),i.createElement(r,y))}));return g.displayName=void 0!==r?r:"Styled("+("string"==typeof l?l:l.displayName||l.name||"Component")+")",g.defaultProps=t.defaultProps,g.__emotion_real=g,g.__emotion_base=l,g.__emotion_styles=f,g.__emotion_forwardProp=s,Object.defineProperty(g,"toString",{value:function(){return"."+o}}),g.withComponent=function(t,r){return e(t,Te({},n,r,{shouldForwardProp:an(g,r,!0)})).apply(void 0,f)},g}}.bind(null);function un(e,t){return sn(e,t)}["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){sn[e]=sn(e)}));const cn=[];function dn(e){return cn[0]=e,Ht(cn)}var fn=o(405);function pn(e){if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)}function mn(e){if(i.isValidElement(e)||(0,fn.Hy)(e)||!pn(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=mn(e[n])})),t}function hn(e,t,n={clone:!0}){const r=n.clone?{...e}:e;return pn(e)&&pn(t)&&Object.keys(t).forEach((o=>{i.isValidElement(t[o])||(0,fn.Hy)(t[o])?r[o]=t[o]:pn(t[o])&&Object.prototype.hasOwnProperty.call(e,o)&&pn(e[o])?r[o]=hn(e[o],t[o],n):n.clone?r[o]=pn(t[o])?mn(t[o]):t[o]:r[o]=t[o]})),r}function gn(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:r=5,...o}=e,a=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>({...e,[t.key]:t.val})),{})})(t),i=Object.keys(a);function l(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function s(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-r/100}${n})`}function u(e,o){const a=i.indexOf(o);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==a&&"number"==typeof t[i[a]]?t[i[a]]:o)-r/100}${n})`}return{keys:i,values:a,up:l,down:s,between:u,only:function(e){return i.indexOf(e)+1<i.length?u(e,i[i.indexOf(e)+1]):l(e)},not:function(e){const t=i.indexOf(e);return 0===t?l(i[1]):t===i.length-1?s(i[t]):u(e,i[i.indexOf(e)+1]).replace("@media","@media not all and")},unit:n,...o}}const yn={borderRadius:4},vn={xs:0,sm:600,md:900,lg:1200,xl:1536},bn={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${vn[e]}px)`},Sn={containerQueries:e=>({up:t=>{let n="number"==typeof t?t:vn[t]||t;return"number"==typeof n&&(n=`${n}px`),e?`@container ${e} (min-width:${n})`:`@container (min-width:${n})`}})};function kn(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||bn;return t.reduce(((r,o,a)=>(r[e.up(e.keys[a])]=n(t[a]),r)),{})}if("object"==typeof t){const e=r.breakpoints||bn;return Object.keys(t).reduce(((o,a)=>{if(i=e.keys,"@"===(l=a)||l.startsWith("@")&&(i.some((e=>l.startsWith(`@${e}`)))||l.match(/^@\d/))){const e=function(e,t){const n=t.match(/^@([^/]+)?\/?(.+)?$/);if(!n)return null;const[,r,o]=n,a=Number.isNaN(+r)?r||0:+r;return e.containerQueries(o).up(a)}(r.containerQueries?r:Sn,a);e&&(o[e]=n(t[a],a))}else if(Object.keys(e.values||vn).includes(a))o[e.up(a)]=n(t[a],a);else{const e=a;o[e]=t[e]}var i,l;return o}),{})}return n(t)}function wn(e={}){const t=e.keys?.reduce(((t,n)=>(t[e.up(n)]={},t)),{});return t||{}}function xn(e,t){return e.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),t)}function Cn({values:e,breakpoints:t,base:n}){const r=n||function(e,t){if("object"!=typeof e)return{};const n={},r=Object.keys(t);return Array.isArray(e)?r.forEach(((t,r)=>{r<e.length&&(n[t]=!0)})):r.forEach((t=>{null!=e[t]&&(n[t]=!0)})),n}(e,t),o=Object.keys(r);if(0===o.length)return e;let a;return o.reduce(((t,n,r)=>(Array.isArray(e)?(t[n]=null!=e[r]?e[r]:e[a],a=r):"object"==typeof e?(t[n]=null!=e[n]?e[n]:e[a],a=n):t[n]=e,t)),{})}function En(e,...t){const n=new URL(`https://mui.com/production-error/?code=${e}`);return t.forEach((e=>n.searchParams.append("args[]",e))),`Minified MUI error #${e}; visit ${n} for the full message.`}function An(e){if("string"!=typeof e)throw new Error(En(7));return e.charAt(0).toUpperCase()+e.slice(1)}function Pn(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function Tn(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:Pn(e,n)||r,t&&(o=t(o,r,e)),o}const _n=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:r,transform:o}=e,a=e=>{if(null==e[t])return null;const a=e[t],i=Pn(e.theme,r)||{};return kn(e,a,(e=>{let r=Tn(i,o,e);return e===r&&"string"==typeof e&&(r=Tn(i,o,`${t}${"default"===e?"":An(e)}`,e)),!1===n?r:{[n]:r}}))};return a.propTypes={},a.filterProps=[t],a},Rn=function(e,t){return t?hn(e,t,{clone:!1}):e},zn={m:"margin",p:"padding"},On={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},Mn={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},Nn=function(){const e={};return t=>(void 0===e[t]&&(e[t]=(e=>{if(e.length>2){if(!Mn[e])return[e];e=Mn[e]}const[t,n]=e.split(""),r=zn[t],o=On[n]||"";return Array.isArray(o)?o.map((e=>r+e)):[r+o]})(t)),e[t])}(),Fn=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],$n=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],Ln=[...Fn,...$n];function jn(e,t,n,r){const o=Pn(e,t,!0)??n;return"number"==typeof o||"string"==typeof o?e=>"string"==typeof e?e:"string"==typeof o?o.startsWith("var(")&&0===e?0:o.startsWith("var(")&&1===e?o:`calc(${e} * ${o})`:o*e:Array.isArray(o)?e=>{if("string"==typeof e)return e;const t=Math.abs(e),n=o[t];return e>=0?n:"number"==typeof n?-n:"string"==typeof n&&n.startsWith("var(")?`calc(-1 * ${n})`:`-${n}`}:"function"==typeof o?o:()=>{}}function In(e){return jn(e,"spacing",8)}function Dn(e,t){return"string"==typeof t||null==t?t:e(t)}function Bn(e,t){const n=In(e.theme);return Object.keys(e).map((r=>function(e,t,n,r){if(!t.includes(n))return null;const o=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=Dn(t,n),e)),{})}(Nn(n),r);return kn(e,e[n],o)}(e,t,r,n))).reduce(Rn,{})}function Vn(e){return Bn(e,Fn)}function Wn(e){return Bn(e,$n)}function Hn(e){return Bn(e,Ln)}function Un(e=8,t=In({spacing:e})){if(e.mui)return e;const n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}Vn.propTypes={},Vn.filterProps=Fn,Wn.propTypes={},Wn.filterProps=$n,Hn.propTypes={},Hn.filterProps=Ln;const qn=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?Rn(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};function Kn(e){return"number"!=typeof e?e:`${e}px solid`}function Qn(e,t){return _n({prop:e,themeKey:"borders",transform:t})}const Gn=Qn("border",Kn),Xn=Qn("borderTop",Kn),Yn=Qn("borderRight",Kn),Zn=Qn("borderBottom",Kn),Jn=Qn("borderLeft",Kn),er=Qn("borderColor"),tr=Qn("borderTopColor"),nr=Qn("borderRightColor"),rr=Qn("borderBottomColor"),or=Qn("borderLeftColor"),ar=Qn("outline",Kn),ir=Qn("outlineColor"),lr=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=jn(e.theme,"shape.borderRadius",4),n=e=>({borderRadius:Dn(t,e)});return kn(e,e.borderRadius,n)}return null};lr.propTypes={},lr.filterProps=["borderRadius"],qn(Gn,Xn,Yn,Zn,Jn,er,tr,nr,rr,or,lr,ar,ir);const sr=e=>{if(void 0!==e.gap&&null!==e.gap){const t=jn(e.theme,"spacing",8),n=e=>({gap:Dn(t,e)});return kn(e,e.gap,n)}return null};sr.propTypes={},sr.filterProps=["gap"];const ur=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=jn(e.theme,"spacing",8),n=e=>({columnGap:Dn(t,e)});return kn(e,e.columnGap,n)}return null};ur.propTypes={},ur.filterProps=["columnGap"];const cr=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=jn(e.theme,"spacing",8),n=e=>({rowGap:Dn(t,e)});return kn(e,e.rowGap,n)}return null};function dr(e,t){return"grey"===t?t:e}function fr(e){return e<=1&&0!==e?100*e+"%":e}cr.propTypes={},cr.filterProps=["rowGap"],qn(sr,ur,cr,_n({prop:"gridColumn"}),_n({prop:"gridRow"}),_n({prop:"gridAutoFlow"}),_n({prop:"gridAutoColumns"}),_n({prop:"gridAutoRows"}),_n({prop:"gridTemplateColumns"}),_n({prop:"gridTemplateRows"}),_n({prop:"gridTemplateAreas"}),_n({prop:"gridArea"})),qn(_n({prop:"color",themeKey:"palette",transform:dr}),_n({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:dr}),_n({prop:"backgroundColor",themeKey:"palette",transform:dr}));const pr=_n({prop:"width",transform:fr}),mr=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{const n=e.theme?.breakpoints?.values?.[t]||vn[t];return n?"px"!==e.theme?.breakpoints?.unit?{maxWidth:`${n}${e.theme.breakpoints.unit}`}:{maxWidth:n}:{maxWidth:fr(t)}};return kn(e,e.maxWidth,t)}return null};mr.filterProps=["maxWidth"];const hr=_n({prop:"minWidth",transform:fr}),gr=_n({prop:"height",transform:fr}),yr=_n({prop:"maxHeight",transform:fr}),vr=_n({prop:"minHeight",transform:fr}),br=(_n({prop:"size",cssProperty:"width",transform:fr}),_n({prop:"size",cssProperty:"height",transform:fr}),qn(pr,mr,hr,gr,yr,vr,_n({prop:"boxSizing"})),{border:{themeKey:"borders",transform:Kn},borderTop:{themeKey:"borders",transform:Kn},borderRight:{themeKey:"borders",transform:Kn},borderBottom:{themeKey:"borders",transform:Kn},borderLeft:{themeKey:"borders",transform:Kn},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:Kn},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:lr},color:{themeKey:"palette",transform:dr},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:dr},backgroundColor:{themeKey:"palette",transform:dr},p:{style:Wn},pt:{style:Wn},pr:{style:Wn},pb:{style:Wn},pl:{style:Wn},px:{style:Wn},py:{style:Wn},padding:{style:Wn},paddingTop:{style:Wn},paddingRight:{style:Wn},paddingBottom:{style:Wn},paddingLeft:{style:Wn},paddingX:{style:Wn},paddingY:{style:Wn},paddingInline:{style:Wn},paddingInlineStart:{style:Wn},paddingInlineEnd:{style:Wn},paddingBlock:{style:Wn},paddingBlockStart:{style:Wn},paddingBlockEnd:{style:Wn},m:{style:Vn},mt:{style:Vn},mr:{style:Vn},mb:{style:Vn},ml:{style:Vn},mx:{style:Vn},my:{style:Vn},margin:{style:Vn},marginTop:{style:Vn},marginRight:{style:Vn},marginBottom:{style:Vn},marginLeft:{style:Vn},marginX:{style:Vn},marginY:{style:Vn},marginInline:{style:Vn},marginInlineStart:{style:Vn},marginInlineEnd:{style:Vn},marginBlock:{style:Vn},marginBlockStart:{style:Vn},marginBlockEnd:{style:Vn},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:sr},rowGap:{style:cr},columnGap:{style:ur},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:fr},maxWidth:{style:mr},minWidth:{transform:fr},height:{transform:fr},maxHeight:{transform:fr},minHeight:{transform:fr},boxSizing:{},font:{themeKey:"font"},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}}),Sr=function(){function e(e,t,n,r){const o={[e]:t,theme:n},a=r[e];if(!a)return{[e]:t};const{cssProperty:i=e,themeKey:l,transform:s,style:u}=a;if(null==t)return null;if("typography"===l&&"inherit"===t)return{[e]:t};const c=Pn(n,l)||{};return u?u(o):kn(o,t,(t=>{let n=Tn(c,s,t);return t===n&&"string"==typeof t&&(n=Tn(c,s,`${e}${"default"===t?"":An(t)}`,t)),!1===i?n:{[i]:n}}))}return function t(n){const{sx:r,theme:o={}}=n||{};if(!r)return null;const a=o.unstable_sxConfig??br;function i(n){let r=n;if("function"==typeof n)r=n(o);else if("object"!=typeof n)return n;if(!r)return null;const i=wn(o.breakpoints),l=Object.keys(i);let s=i;return Object.keys(r).forEach((n=>{const i=function(e,t){return"function"==typeof e?e(t):e}(r[n],o);if(null!=i)if("object"==typeof i)if(a[n])s=Rn(s,e(n,i,o,a));else{const e=kn({theme:o},i,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,i)?s=Rn(s,e):s[n]=t({sx:i,theme:o})}else s=Rn(s,e(n,i,o,a))})),function(e,t){if(!e.containerQueries)return t;const n=Object.keys(t).filter((e=>e.startsWith("@container"))).sort(((e,t)=>{const n=/min-width:\s*([0-9.]+)/;return+(e.match(n)?.[1]||0)-+(t.match(n)?.[1]||0)}));return n.length?n.reduce(((e,n)=>{const r=t[n];return delete e[n],e[n]=r,e}),{...t}):t}(o,xn(l,s))}return Array.isArray(r)?r.map(i):i(r)}}();Sr.filterProps=["sx"];const kr=Sr;function wr(e,t){const n=this;if(n.vars){if(!n.colorSchemes?.[e]||"function"!=typeof n.getColorSchemeSelector)return{};let r=n.getColorSchemeSelector(e);return"&"===r?t:((r.includes("data-")||r.includes("."))&&(r=`*:where(${r.replace(/\s*&$/,"")}) &`),{[r]:t})}return n.palette.mode===e?t:{}}const xr=function(e={},...t){const{breakpoints:n={},palette:r={},spacing:o,shape:a={},...i}=e;let l=hn({breakpoints:gn(n),direction:"ltr",components:{},palette:{mode:"light",...r},spacing:Un(o),shape:{...yn,...a}},i);return l=function(e){const t=(e,t)=>e.replace("@media",t?`@container ${t}`:"@container");function n(n,r){n.up=(...n)=>t(e.breakpoints.up(...n),r),n.down=(...n)=>t(e.breakpoints.down(...n),r),n.between=(...n)=>t(e.breakpoints.between(...n),r),n.only=(...n)=>t(e.breakpoints.only(...n),r),n.not=(...n)=>{const o=t(e.breakpoints.not(...n),r);return o.includes("not all and")?o.replace("not all and ","").replace("min-width:","width<").replace("max-width:","width>").replace("and","or"):o}}const r={},o=e=>(n(r,e),r);return n(o),{...e,containerQueries:o}}(l),l.applyStyles=wr,l=t.reduce(((e,t)=>hn(e,t)),l),l.unstable_sxConfig={...br,...i?.unstable_sxConfig},l.unstable_sx=function(e){return kr({sx:e,theme:this})},l};function Cr(e){const{variants:t,...n}=e,r={variants:t,style:dn(n),isProcessed:!0};return r.style===n||t&&t.forEach((e=>{"function"!=typeof e.style&&(e.style=dn(e.style))})),r}const Er=xr();function Ar(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}function Pr(e){return e?(t,n)=>n[e]:null}function Tr(e,t){const n="function"==typeof t?t(e):t;if(Array.isArray(n))return n.flatMap((t=>Tr(e,t)));if(Array.isArray(n?.variants)){let t;if(n.isProcessed)t=n.style;else{const{variants:e,...r}=n;t=r}return _r(e,n.variants,[t])}return n?.isProcessed?n.style:n}function _r(e,t,n=[]){let r;e:for(let o=0;o<t.length;o+=1){const a=t[o];if("function"==typeof a.props){if(r??={...e,...e.ownerState,ownerState:e.ownerState},!a.props(r))continue}else for(const t in a.props)if(e[t]!==a.props[t]&&e.ownerState?.[t]!==a.props[t])continue e;"function"==typeof a.style?(r??={...e,...e.ownerState,ownerState:e.ownerState},n.push(a.style(r))):n.push(a.style)}return n}function Rr(e={}){const{themeId:t,defaultTheme:n=Er,rootShouldForwardProp:r=Ar,slotShouldForwardProp:o=Ar}=e;function a(e){!function(e,t,n){e.theme=function(e){for(const t in e)return!1;return!0}(e.theme)?n:e.theme[t]||e.theme}(e,t,n)}return(e,t={})=>{!function(e){Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=e.__emotion_styles.filter((e=>e!==kr)))}(e);const{name:n,slot:i,skipVariantsResolver:l,skipSx:s,overridesResolver:u=Pr(zr(i)),...c}=t,d=void 0!==l?l:i&&"Root"!==i&&"root"!==i||!1,f=s||!1;let p=Ar;"Root"===i||"root"===i?p=r:i?p=o:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(p=void 0);const m=un(e,{shouldForwardProp:p,label:void 0,...c}),h=e=>{if(e.__emotion_real===e)return e;if("function"==typeof e)return function(t){return Tr(t,e)};if(pn(e)){const t=Cr(e);return t.variants?function(e){return Tr(e,t)}:t.style}return e},g=(...t)=>{const r=[],o=t.map(h),i=[];if(r.push(a),n&&u&&i.push((function(e){const t=e.theme,r=t.components?.[n]?.styleOverrides;if(!r)return null;const o={};for(const t in r)o[t]=Tr(e,r[t]);return u(e,o)})),n&&!d&&i.push((function(e){const t=e.theme,r=t?.components?.[n]?.variants;return r?_r(e,r):null})),f||i.push(kr),Array.isArray(o[0])){const e=o.shift(),t=new Array(r.length).fill(""),n=new Array(i.length).fill("");let a;a=[...t,...e,...n],a.raw=[...t,...e.raw,...n],r.unshift(a)}const l=[...r,...o,...i],s=m(...l);return e.muiName&&(s.muiName=e.muiName),s};return m.withConfig&&(g.withConfig=m.withConfig),g}}function zr(e){return e?e.charAt(0).toLowerCase()+e.slice(1):e}function Or(e,t=0,n=1){return function(e,t=Number.MIN_SAFE_INTEGER,n=Number.MAX_SAFE_INTEGER){return Math.max(t,Math.min(e,n))}(e,t,n)}function Mr(e){if(e.type)return e;if("#"===e.charAt(0))return Mr(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(!["rgb","rgba","hsl","hsla","color"].includes(n))throw new Error(En(9,e));let r,o=e.substring(t+1,e.length-1);if("color"===n){if(o=o.split(" "),r=o.shift(),4===o.length&&"/"===o[3].charAt(0)&&(o[3]=o[3].slice(1)),!["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].includes(r))throw new Error(En(10,r))}else o=o.split(",");return o=o.map((e=>parseFloat(e))),{type:n,values:o,colorSpace:r}}const Nr=(e,t)=>{try{return(e=>{const t=Mr(e);return t.values.slice(0,3).map(((e,n)=>t.type.includes("hsl")&&0!==n?`${e}%`:e)).join(" ")})(e)}catch(t){return e}};function Fr(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return t.includes("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):t.includes("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=t.includes("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function $r(e){e=Mr(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,a=r*Math.min(o,1-o),i=(e,t=(e+n/30)%12)=>o-a*Math.max(Math.min(t-3,9-t,1),-1);let l="rgb";const s=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(l+="a",s.push(t[3])),Fr({type:l,values:s})}function Lr(e){let t="hsl"===(e=Mr(e)).type||"hsla"===e.type?Mr($r(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function jr(e,t){return e=Mr(e),t=Or(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,Fr(e)}function Ir(e,t,n){try{return jr(e,t)}catch(t){return e}}function Dr(e,t){if(e=Mr(e),t=Or(t),e.type.includes("hsl"))e.values[2]*=1-t;else if(e.type.includes("rgb")||e.type.includes("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return Fr(e)}function Br(e,t,n){try{return Dr(e,t)}catch(t){return e}}function Vr(e,t){if(e=Mr(e),t=Or(t),e.type.includes("hsl"))e.values[2]+=(100-e.values[2])*t;else if(e.type.includes("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(e.type.includes("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return Fr(e)}function Wr(e,t,n){try{return Vr(e,t)}catch(t){return e}}function Hr(e,t,n){try{return function(e,t=.15){return Lr(e)>.5?Dr(e,t):Vr(e,t)}(e,t)}catch(t){return e}}const Ur={black:"#000",white:"#fff"},qr={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},Kr="#f3e5f5",Qr="#ce93d8",Gr="#ba68c8",Xr="#ab47bc",Yr="#9c27b0",Zr="#7b1fa2",Jr="#e57373",eo="#ef5350",to="#f44336",no="#d32f2f",ro="#c62828",oo="#ffb74d",ao="#ffa726",io="#ff9800",lo="#f57c00",so="#e65100",uo="#e3f2fd",co="#90caf9",fo="#42a5f5",po="#1976d2",mo="#1565c0",ho="#4fc3f7",go="#29b6f6",yo="#03a9f4",vo="#0288d1",bo="#01579b",So="#81c784",ko="#66bb6a",wo="#4caf50",xo="#388e3c",Co="#2e7d32",Eo="#1b5e20";function Ao(){return{text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:Ur.white,default:Ur.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}}}const Po=Ao();function To(){return{text:{primary:Ur.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:Ur.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}}}const _o=To();function Ro(e,t,n,r){const o=r.light||r,a=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=Vr(e.main,o):"dark"===t&&(e.dark=Dr(e.main,a)))}function zo(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2,...o}=e,a=e.primary||function(e="light"){return"dark"===e?{main:co,light:uo,dark:fo}:{main:po,light:fo,dark:mo}}(t),i=e.secondary||function(e="light"){return"dark"===e?{main:Qr,light:Kr,dark:Xr}:{main:Yr,light:Gr,dark:Zr}}(t),l=e.error||function(e="light"){return"dark"===e?{main:to,light:Jr,dark:no}:{main:no,light:eo,dark:ro}}(t),s=e.info||function(e="light"){return"dark"===e?{main:go,light:ho,dark:vo}:{main:vo,light:yo,dark:bo}}(t),u=e.success||function(e="light"){return"dark"===e?{main:ko,light:So,dark:xo}:{main:Co,light:wo,dark:Eo}}(t),c=e.warning||function(e="light"){return"dark"===e?{main:ao,light:oo,dark:lo}:{main:"#ed6c02",light:io,dark:so}}(t);function d(e){const t=function(e,t){const n=Lr(e),r=Lr(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,_o.text.primary)>=n?_o.text.primary:Po.text.primary;return t}const f=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:a=700})=>{if(!(e={...e}).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error(En(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error(En(12,t?` (${t})`:"",JSON.stringify(e.main)));return Ro(e,"light",o,r),Ro(e,"dark",a,r),e.contrastText||(e.contrastText=d(e.main)),e};let p;return"light"===t?p=Ao():"dark"===t&&(p=To()),hn({common:{...Ur},mode:t,primary:f({color:a,name:"primary"}),secondary:f({color:i,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:f({color:l,name:"error"}),warning:f({color:c,name:"warning"}),info:f({color:s,name:"info"}),success:f({color:u,name:"success"}),grey:qr,contrastThreshold:n,getContrastText:d,augmentColor:f,tonalOffset:r,...p},o)}function Oo(e=""){function t(...n){if(!n.length)return"";const r=n[0];return"string"!=typeof r||r.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)?`, ${r}`:`, var(--${e?`${e}-`:""}${r}${t(...n.slice(1))})`}return(n,...r)=>`var(--${e?`${e}-`:""}${n}${t(...r)})`}function Mo(e){const t={};return Object.entries(e).forEach((e=>{const[n,r]=e;"object"==typeof r&&(t[n]=`${r.fontStyle?`${r.fontStyle} `:""}${r.fontVariant?`${r.fontVariant} `:""}${r.fontWeight?`${r.fontWeight} `:""}${r.fontStretch?`${r.fontStretch} `:""}${r.fontSize||""}${r.lineHeight?`/${r.lineHeight} `:""}${r.fontFamily||""}`)})),t}const No=(e,t,n,r=[])=>{let o=e;t.forEach(((e,a)=>{a===t.length-1?Array.isArray(o)?o[Number(e)]=n:o&&"object"==typeof o&&(o[e]=n):o&&"object"==typeof o&&(o[e]||(o[e]=r.includes(e)?[]:{}),o=o[e])}))};function Fo(e,t){const{prefix:n,shouldSkipGeneratingVar:r}=t||{},o={},a={},i={};var l,s;return l=(e,t,l)=>{if(!("string"!=typeof t&&"number"!=typeof t||r&&r(e,t))){const r=`--${n?`${n}-`:""}${e.join("-")}`,s=((e,t)=>"number"==typeof t?["lineHeight","fontWeight","opacity","zIndex"].some((t=>e.includes(t)))||e[e.length-1].toLowerCase().includes("opacity")?t:`${t}px`:t)(e,t);Object.assign(o,{[r]:s}),No(a,e,`var(${r})`,l),No(i,e,`var(${r}, ${s})`,l)}},s=e=>"vars"===e[0],function e(t,n=[],r=[]){Object.entries(t).forEach((([t,o])=>{(!s||s&&!s([...n,t]))&&null!=o&&("object"==typeof o&&Object.keys(o).length>0?e(o,[...n,t],Array.isArray(o)?[...r,t]:r):l([...n,t],o,r))}))}(e),{css:o,vars:a,varsWithDefaults:i}}const $o={textTransform:"uppercase"},Lo='"Roboto", "Helvetica", "Arial", sans-serif';function jo(e,t){const{fontFamily:n=Lo,fontSize:r=14,fontWeightLight:o=300,fontWeightRegular:a=400,fontWeightMedium:i=500,fontWeightBold:l=700,htmlFontSize:s=16,allVariants:u,pxToRem:c,...d}="function"==typeof t?t(e):t,f=r/14,p=c||(e=>e/s*f+"rem"),m=(e,t,r,o,a)=>{return{fontFamily:n,fontWeight:e,fontSize:p(t),lineHeight:r,...n===Lo?{letterSpacing:(i=o/t,Math.round(1e5*i)/1e5+"em")}:{},...a,...u};var i},h={h1:m(o,96,1.167,-1.5),h2:m(o,60,1.2,-.5),h3:m(a,48,1.167,0),h4:m(a,34,1.235,.25),h5:m(a,24,1.334,0),h6:m(i,20,1.6,.15),subtitle1:m(a,16,1.75,.15),subtitle2:m(i,14,1.57,.1),body1:m(a,16,1.5,.15),body2:m(a,14,1.43,.15),button:m(i,14,1.75,.4,$o),caption:m(a,12,1.66,.4),overline:m(a,12,2.66,1,$o),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return hn({htmlFontSize:s,pxToRem:p,fontFamily:n,fontSize:r,fontWeightLight:o,fontWeightRegular:a,fontWeightMedium:i,fontWeightBold:l,...h},d,{clone:!1})}function Io(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const Do=["none",Io(0,2,1,-1,0,1,1,0,0,1,3,0),Io(0,3,1,-2,0,2,2,0,0,1,5,0),Io(0,3,3,-2,0,3,4,0,0,1,8,0),Io(0,2,4,-1,0,4,5,0,0,1,10,0),Io(0,3,5,-1,0,5,8,0,0,1,14,0),Io(0,3,5,-1,0,6,10,0,0,1,18,0),Io(0,4,5,-2,0,7,10,1,0,2,16,1),Io(0,5,5,-3,0,8,10,1,0,3,14,2),Io(0,5,6,-3,0,9,12,1,0,3,16,2),Io(0,6,6,-3,0,10,14,1,0,4,18,3),Io(0,6,7,-4,0,11,15,1,0,4,20,3),Io(0,7,8,-4,0,12,17,2,0,5,22,4),Io(0,7,8,-4,0,13,19,2,0,5,24,4),Io(0,7,9,-4,0,14,21,2,0,5,26,4),Io(0,8,9,-5,0,15,22,2,0,6,28,5),Io(0,8,10,-5,0,16,24,2,0,6,30,5),Io(0,8,11,-5,0,17,26,2,0,6,32,5),Io(0,9,11,-5,0,18,28,2,0,7,34,6),Io(0,9,12,-6,0,19,29,2,0,7,36,6),Io(0,10,13,-6,0,20,31,3,0,8,38,7),Io(0,10,13,-6,0,21,33,3,0,8,40,7),Io(0,10,14,-6,0,22,35,3,0,8,42,7),Io(0,11,14,-7,0,23,36,3,0,9,44,8),Io(0,11,15,-7,0,24,38,3,0,9,46,8)],Bo={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Vo={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Wo(e){return`${Math.round(e)}ms`}function Ho(e){if(!e)return 0;const t=e/36;return Math.min(Math.round(10*(4+15*t**.25+t/5)),3e3)}function Uo(e){const t={...Bo,...e.easing},n={...Vo,...e.duration};return{getAutoHeightDuration:Ho,create:(e=["all"],r={})=>{const{duration:o=n.standard,easing:a=t.easeInOut,delay:i=0,...l}=r;return(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof o?o:Wo(o)} ${a} ${"string"==typeof i?i:Wo(i)}`)).join(",")},...e,easing:t,duration:n}}const qo={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};function Ko(e={}){const t={...e};return function e(t){const n=Object.entries(t);for(let o=0;o<n.length;o++){const[a,i]=n[o];!pn(r=i)&&void 0!==r&&"string"!=typeof r&&"boolean"!=typeof r&&"number"!=typeof r&&!Array.isArray(r)||a.startsWith("unstable_")?delete t[a]:pn(i)&&(t[a]={...i},e(t[a]))}var r}(t),`import { unstable_createBreakpoints as createBreakpoints, createTransitions } from '@mui/material/styles';\n\nconst theme = ${JSON.stringify(t,null,2)};\n\ntheme.breakpoints = createBreakpoints(theme.breakpoints || {});\ntheme.transitions = createTransitions(theme.transitions || {});\n\nexport default theme;`}const Qo=function(e={},...t){const{breakpoints:n,mixins:r={},spacing:o,palette:a={},transitions:i={},typography:l={},shape:s,...u}=e;if(e.vars&&void 0===e.generateThemeVars)throw new Error(En(20));const c=zo(a),d=xr(e);let f=hn(d,{mixins:(p=d.breakpoints,m=r,{toolbar:{minHeight:56,[p.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[p.up("sm")]:{minHeight:64}},...m}),palette:c,shadows:Do.slice(),typography:jo(c,l),transitions:Uo(i),zIndex:{...qo}});var p,m;return f=hn(f,u),f=t.reduce(((e,t)=>hn(e,t)),f),f.unstable_sxConfig={...br,...u?.unstable_sxConfig},f.unstable_sx=function(e){return kr({sx:e,theme:this})},f.toRuntimeSource=Ko,f};function Go(e){let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,Math.round(10*t)/1e3}const Xo=[...Array(25)].map(((e,t)=>{if(0===t)return"none";const n=Go(t);return`linear-gradient(rgba(255 255 255 / ${n}), rgba(255 255 255 / ${n}))`}));function Yo(e){return{inputPlaceholder:"dark"===e?.5:.42,inputUnderline:"dark"===e?.7:.42,switchTrackDisabled:"dark"===e?.2:.12,switchTrack:"dark"===e?.3:.38}}function Zo(e){return"dark"===e?Xo:[]}function Jo(e){return!!e[0].match(/(cssVarPrefix|colorSchemeSelector|rootSelector|typography|mixins|breakpoints|direction|transitions)/)||!!e[0].match(/sxConfig$/)||"palette"===e[0]&&!!e[1]?.match(/(mode|contrastThreshold|tonalOffset)/)}const ea=e=>(t,n)=>{const r=e.rootSelector||":root",o=e.colorSchemeSelector;let a=o;if("class"===o&&(a=".%s"),"data"===o&&(a="[data-%s]"),o?.startsWith("data-")&&!o.includes("%s")&&(a=`[${o}="%s"]`),e.defaultColorScheme===t){if("dark"===t){const o={};return(i=e.cssVarPrefix,[...[...Array(25)].map(((e,t)=>`--${i?`${i}-`:""}overlays-${t}`)),`--${i?`${i}-`:""}palette-AppBar-darkBg`,`--${i?`${i}-`:""}palette-AppBar-darkColor`]).forEach((e=>{o[e]=n[e],delete n[e]})),"media"===a?{[r]:n,"@media (prefers-color-scheme: dark)":{[r]:o}}:a?{[a.replace("%s",t)]:o,[`${r}, ${a.replace("%s",t)}`]:n}:{[r]:{...n,...o}}}if(a&&"media"!==a)return`${r}, ${a.replace("%s",String(t))}`}else if(t){if("media"===a)return{[`@media (prefers-color-scheme: ${String(t)})`]:{[r]:n}};if(a)return a.replace("%s",String(t))}var i;return r};function ta(e,t,n){!e[t]&&n&&(e[t]=n)}function na(e){return"string"==typeof e&&e.startsWith("hsl")?$r(e):e}function ra(e,t){`${t}Channel`in e||(e[`${t}Channel`]=Nr(na(e[t])))}const oa=e=>{try{return e()}catch(e){}};function aa(e,t,n,r){if(!t)return;t=!0===t?{}:t;const o="dark"===r?"dark":"light";if(!n)return void(e[r]=function(e){const{palette:t={mode:"light"},opacity:n,overlays:r,...o}=e,a=zo(t);return{palette:a,opacity:{...Yo(a.mode),...n},overlays:r||Zo(a.mode),...o}}({...t,palette:{mode:o,...t?.palette}}));const{palette:a,...i}=Qo({...n,palette:{mode:o,...t?.palette}});return e[r]={...t,palette:a,opacity:{...Yo(o),...t?.opacity},overlays:t?.overlays||Zo(o)},i}function ia(e={},...t){const{colorSchemes:n={light:!0},defaultColorScheme:r,disableCssColorScheme:o=!1,cssVarPrefix:a="mui",shouldSkipGeneratingVar:i=Jo,colorSchemeSelector:l=(n.light&&n.dark?"media":void 0),rootSelector:s=":root",...u}=e,c=Object.keys(n)[0],d=r||(n.light&&"light"!==c?"light":c),f=((e="mui")=>Oo(e))(a),{[d]:p,light:m,dark:h,...g}=n,y={...g};let v=p;if(("dark"===d&&!("dark"in n)||"light"===d&&!("light"in n))&&(v=!0),!v)throw new Error(En(21,d));const b=aa(y,v,u,d);m&&!y.light&&aa(y,m,void 0,"light"),h&&!y.dark&&aa(y,h,void 0,"dark");let S={defaultColorScheme:d,...b,cssVarPrefix:a,colorSchemeSelector:l,rootSelector:s,getCssVar:f,colorSchemes:y,font:{...Mo(b.typography),...b.font},spacing:(k=u.spacing,"number"==typeof k?`${k}px`:"string"==typeof k||"function"==typeof k||Array.isArray(k)?k:"8px")};var k;Object.keys(S.colorSchemes).forEach((e=>{const t=S.colorSchemes[e].palette,n=e=>{const n=e.split("-"),r=n[1],o=n[2];return f(e,t[r][o])};var r;if("light"===t.mode&&(ta(t.common,"background","#fff"),ta(t.common,"onBackground","#000")),"dark"===t.mode&&(ta(t.common,"background","#000"),ta(t.common,"onBackground","#fff")),r=t,["Alert","AppBar","Avatar","Button","Chip","FilledInput","LinearProgress","Skeleton","Slider","SnackbarContent","SpeedDialAction","StepConnector","StepContent","Switch","TableCell","Tooltip"].forEach((e=>{r[e]||(r[e]={})})),"light"===t.mode){ta(t.Alert,"errorColor",Br(t.error.light,.6)),ta(t.Alert,"infoColor",Br(t.info.light,.6)),ta(t.Alert,"successColor",Br(t.success.light,.6)),ta(t.Alert,"warningColor",Br(t.warning.light,.6)),ta(t.Alert,"errorFilledBg",n("palette-error-main")),ta(t.Alert,"infoFilledBg",n("palette-info-main")),ta(t.Alert,"successFilledBg",n("palette-success-main")),ta(t.Alert,"warningFilledBg",n("palette-warning-main")),ta(t.Alert,"errorFilledColor",oa((()=>t.getContrastText(t.error.main)))),ta(t.Alert,"infoFilledColor",oa((()=>t.getContrastText(t.info.main)))),ta(t.Alert,"successFilledColor",oa((()=>t.getContrastText(t.success.main)))),ta(t.Alert,"warningFilledColor",oa((()=>t.getContrastText(t.warning.main)))),ta(t.Alert,"errorStandardBg",Wr(t.error.light,.9)),ta(t.Alert,"infoStandardBg",Wr(t.info.light,.9)),ta(t.Alert,"successStandardBg",Wr(t.success.light,.9)),ta(t.Alert,"warningStandardBg",Wr(t.warning.light,.9)),ta(t.Alert,"errorIconColor",n("palette-error-main")),ta(t.Alert,"infoIconColor",n("palette-info-main")),ta(t.Alert,"successIconColor",n("palette-success-main")),ta(t.Alert,"warningIconColor",n("palette-warning-main")),ta(t.AppBar,"defaultBg",n("palette-grey-100")),ta(t.Avatar,"defaultBg",n("palette-grey-400")),ta(t.Button,"inheritContainedBg",n("palette-grey-300")),ta(t.Button,"inheritContainedHoverBg",n("palette-grey-A100")),ta(t.Chip,"defaultBorder",n("palette-grey-400")),ta(t.Chip,"defaultAvatarColor",n("palette-grey-700")),ta(t.Chip,"defaultIconColor",n("palette-grey-700")),ta(t.FilledInput,"bg","rgba(0, 0, 0, 0.06)"),ta(t.FilledInput,"hoverBg","rgba(0, 0, 0, 0.09)"),ta(t.FilledInput,"disabledBg","rgba(0, 0, 0, 0.12)"),ta(t.LinearProgress,"primaryBg",Wr(t.primary.main,.62)),ta(t.LinearProgress,"secondaryBg",Wr(t.secondary.main,.62)),ta(t.LinearProgress,"errorBg",Wr(t.error.main,.62)),ta(t.LinearProgress,"infoBg",Wr(t.info.main,.62)),ta(t.LinearProgress,"successBg",Wr(t.success.main,.62)),ta(t.LinearProgress,"warningBg",Wr(t.warning.main,.62)),ta(t.Skeleton,"bg",`rgba(${n("palette-text-primaryChannel")} / 0.11)`),ta(t.Slider,"primaryTrack",Wr(t.primary.main,.62)),ta(t.Slider,"secondaryTrack",Wr(t.secondary.main,.62)),ta(t.Slider,"errorTrack",Wr(t.error.main,.62)),ta(t.Slider,"infoTrack",Wr(t.info.main,.62)),ta(t.Slider,"successTrack",Wr(t.success.main,.62)),ta(t.Slider,"warningTrack",Wr(t.warning.main,.62));const e=Hr(t.background.default,.8);ta(t.SnackbarContent,"bg",e),ta(t.SnackbarContent,"color",oa((()=>t.getContrastText(e)))),ta(t.SpeedDialAction,"fabHoverBg",Hr(t.background.paper,.15)),ta(t.StepConnector,"border",n("palette-grey-400")),ta(t.StepContent,"border",n("palette-grey-400")),ta(t.Switch,"defaultColor",n("palette-common-white")),ta(t.Switch,"defaultDisabledColor",n("palette-grey-100")),ta(t.Switch,"primaryDisabledColor",Wr(t.primary.main,.62)),ta(t.Switch,"secondaryDisabledColor",Wr(t.secondary.main,.62)),ta(t.Switch,"errorDisabledColor",Wr(t.error.main,.62)),ta(t.Switch,"infoDisabledColor",Wr(t.info.main,.62)),ta(t.Switch,"successDisabledColor",Wr(t.success.main,.62)),ta(t.Switch,"warningDisabledColor",Wr(t.warning.main,.62)),ta(t.TableCell,"border",Wr(Ir(t.divider,1),.88)),ta(t.Tooltip,"bg",Ir(t.grey[700],.92))}if("dark"===t.mode){ta(t.Alert,"errorColor",Wr(t.error.light,.6)),ta(t.Alert,"infoColor",Wr(t.info.light,.6)),ta(t.Alert,"successColor",Wr(t.success.light,.6)),ta(t.Alert,"warningColor",Wr(t.warning.light,.6)),ta(t.Alert,"errorFilledBg",n("palette-error-dark")),ta(t.Alert,"infoFilledBg",n("palette-info-dark")),ta(t.Alert,"successFilledBg",n("palette-success-dark")),ta(t.Alert,"warningFilledBg",n("palette-warning-dark")),ta(t.Alert,"errorFilledColor",oa((()=>t.getContrastText(t.error.dark)))),ta(t.Alert,"infoFilledColor",oa((()=>t.getContrastText(t.info.dark)))),ta(t.Alert,"successFilledColor",oa((()=>t.getContrastText(t.success.dark)))),ta(t.Alert,"warningFilledColor",oa((()=>t.getContrastText(t.warning.dark)))),ta(t.Alert,"errorStandardBg",Br(t.error.light,.9)),ta(t.Alert,"infoStandardBg",Br(t.info.light,.9)),ta(t.Alert,"successStandardBg",Br(t.success.light,.9)),ta(t.Alert,"warningStandardBg",Br(t.warning.light,.9)),ta(t.Alert,"errorIconColor",n("palette-error-main")),ta(t.Alert,"infoIconColor",n("palette-info-main")),ta(t.Alert,"successIconColor",n("palette-success-main")),ta(t.Alert,"warningIconColor",n("palette-warning-main")),ta(t.AppBar,"defaultBg",n("palette-grey-900")),ta(t.AppBar,"darkBg",n("palette-background-paper")),ta(t.AppBar,"darkColor",n("palette-text-primary")),ta(t.Avatar,"defaultBg",n("palette-grey-600")),ta(t.Button,"inheritContainedBg",n("palette-grey-800")),ta(t.Button,"inheritContainedHoverBg",n("palette-grey-700")),ta(t.Chip,"defaultBorder",n("palette-grey-700")),ta(t.Chip,"defaultAvatarColor",n("palette-grey-300")),ta(t.Chip,"defaultIconColor",n("palette-grey-300")),ta(t.FilledInput,"bg","rgba(255, 255, 255, 0.09)"),ta(t.FilledInput,"hoverBg","rgba(255, 255, 255, 0.13)"),ta(t.FilledInput,"disabledBg","rgba(255, 255, 255, 0.12)"),ta(t.LinearProgress,"primaryBg",Br(t.primary.main,.5)),ta(t.LinearProgress,"secondaryBg",Br(t.secondary.main,.5)),ta(t.LinearProgress,"errorBg",Br(t.error.main,.5)),ta(t.LinearProgress,"infoBg",Br(t.info.main,.5)),ta(t.LinearProgress,"successBg",Br(t.success.main,.5)),ta(t.LinearProgress,"warningBg",Br(t.warning.main,.5)),ta(t.Skeleton,"bg",`rgba(${n("palette-text-primaryChannel")} / 0.13)`),ta(t.Slider,"primaryTrack",Br(t.primary.main,.5)),ta(t.Slider,"secondaryTrack",Br(t.secondary.main,.5)),ta(t.Slider,"errorTrack",Br(t.error.main,.5)),ta(t.Slider,"infoTrack",Br(t.info.main,.5)),ta(t.Slider,"successTrack",Br(t.success.main,.5)),ta(t.Slider,"warningTrack",Br(t.warning.main,.5));const e=Hr(t.background.default,.98);ta(t.SnackbarContent,"bg",e),ta(t.SnackbarContent,"color",oa((()=>t.getContrastText(e)))),ta(t.SpeedDialAction,"fabHoverBg",Hr(t.background.paper,.15)),ta(t.StepConnector,"border",n("palette-grey-600")),ta(t.StepContent,"border",n("palette-grey-600")),ta(t.Switch,"defaultColor",n("palette-grey-300")),ta(t.Switch,"defaultDisabledColor",n("palette-grey-600")),ta(t.Switch,"primaryDisabledColor",Br(t.primary.main,.55)),ta(t.Switch,"secondaryDisabledColor",Br(t.secondary.main,.55)),ta(t.Switch,"errorDisabledColor",Br(t.error.main,.55)),ta(t.Switch,"infoDisabledColor",Br(t.info.main,.55)),ta(t.Switch,"successDisabledColor",Br(t.success.main,.55)),ta(t.Switch,"warningDisabledColor",Br(t.warning.main,.55)),ta(t.TableCell,"border",Br(Ir(t.divider,1),.68)),ta(t.Tooltip,"bg",Ir(t.grey[700],.92))}ra(t.background,"default"),ra(t.background,"paper"),ra(t.common,"background"),ra(t.common,"onBackground"),ra(t,"divider"),Object.keys(t).forEach((e=>{const n=t[e];"tonalOffset"!==e&&n&&"object"==typeof n&&(n.main&&ta(t[e],"mainChannel",Nr(na(n.main))),n.light&&ta(t[e],"lightChannel",Nr(na(n.light))),n.dark&&ta(t[e],"darkChannel",Nr(na(n.dark))),n.contrastText&&ta(t[e],"contrastTextChannel",Nr(na(n.contrastText))),"text"===e&&(ra(t[e],"primary"),ra(t[e],"secondary")),"action"===e&&(n.active&&ra(t[e],"active"),n.selected&&ra(t[e],"selected")))}))})),S=t.reduce(((e,t)=>hn(e,t)),S);const w={prefix:a,disableCssColorScheme:o,shouldSkipGeneratingVar:i,getSelector:ea(S)},{vars:x,generateThemeVars:C,generateStyleSheets:E}=function(e,t={}){const{getSelector:n=g,disableCssColorScheme:r,colorSchemeSelector:o}=t,{colorSchemes:a={},components:i,defaultColorScheme:l="light",...s}=e,{vars:u,css:c,varsWithDefaults:d}=Fo(s,t);let f=d;const p={},{[l]:m,...h}=a;if(Object.entries(h||{}).forEach((([e,n])=>{const{vars:r,css:o,varsWithDefaults:a}=Fo(n,t);f=hn(f,a),p[e]={css:o,vars:r}})),m){const{css:e,vars:n,varsWithDefaults:r}=Fo(m,t);f=hn(f,r),p[l]={css:e,vars:n}}function g(t,n){let r=o;if("class"===o&&(r=".%s"),"data"===o&&(r="[data-%s]"),o?.startsWith("data-")&&!o.includes("%s")&&(r=`[${o}="%s"]`),t){if("media"===r){if(e.defaultColorScheme===t)return":root";const r=a[t]?.palette?.mode||t;return{[`@media (prefers-color-scheme: ${r})`]:{":root":n}}}if(r)return e.defaultColorScheme===t?`:root, ${r.replace("%s",String(t))}`:r.replace("%s",String(t))}return":root"}return{vars:f,generateThemeVars:()=>{let e={...u};return Object.entries(p).forEach((([,{vars:t}])=>{e=hn(e,t)})),e},generateStyleSheets:()=>{const t=[],o=e.defaultColorScheme||"light";function i(e,n){Object.keys(n).length&&t.push("string"==typeof e?{[e]:{...n}}:e)}i(n(void 0,{...c}),c);const{[o]:l,...s}=p;if(l){const{css:e}=l,t=a[o]?.palette?.mode,s=!r&&t?{colorScheme:t,...e}:{...e};i(n(o,{...s}),s)}return Object.entries(s).forEach((([e,{css:t}])=>{const o=a[e]?.palette?.mode,l=!r&&o?{colorScheme:o,...t}:{...t};i(n(e,{...l}),l)})),t}}}(S,w);return S.vars=x,Object.entries(S.colorSchemes[S.defaultColorScheme]).forEach((([e,t])=>{S[e]=t})),S.generateThemeVars=C,S.generateStyleSheets=E,S.generateSpacing=function(){return Un(u.spacing,In(this))},S.getColorSchemeSelector=function(e){return function(t){return"media"===e?`@media (prefers-color-scheme: ${t})`:e?e.startsWith("data-")&&!e.includes("%s")?`[${e}="${t}"] &`:"class"===e?`.${t} &`:"data"===e?`[data-${t}] &`:`${e.replace("%s",t)} &`:"&"}}(l),S.spacing=S.generateSpacing(),S.shouldSkipGeneratingVar=i,S.unstable_sxConfig={...br,...u?.unstable_sxConfig},S.unstable_sx=function(e){return kr({sx:e,theme:this})},S.toRuntimeSource=Ko,S}function la(e,t,n){e.colorSchemes&&n&&(e.colorSchemes[t]={...!0!==n&&n,palette:zo({...!0===n?{}:n.palette,mode:t})})}function sa(e={},...t){const{palette:n,cssVariables:r=!1,colorSchemes:o=(n?void 0:{light:!0}),defaultColorScheme:a=n?.mode,...i}=e,l=a||"light",s=o?.[l],u={...o,...n?{[l]:{..."boolean"!=typeof s&&s,palette:n}}:void 0};if(!1===r){if(!("colorSchemes"in e))return Qo(e,...t);let r=n;"palette"in e||u[l]&&(!0!==u[l]?r=u[l].palette:"dark"===l&&(r={mode:"dark"}));const o=Qo({...e,palette:r},...t);return o.defaultColorScheme=l,o.colorSchemes=u,"light"===o.palette.mode&&(o.colorSchemes.light={...!0!==u.light&&u.light,palette:o.palette},la(o,"dark",u.dark)),"dark"===o.palette.mode&&(o.colorSchemes.dark={...!0!==u.dark&&u.dark,palette:o.palette},la(o,"light",u.light)),o}return n||"light"in u||"light"!==l||(u.light=!0),ia({...i,colorSchemes:u,defaultColorScheme:l,..."boolean"!=typeof r&&r},...t)}const ua=sa(),ca="$$material",da=function(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e},fa=e=>da(e)&&"classes"!==e,pa=Rr({themeId:ca,defaultTheme:ua,rootShouldForwardProp:fa});function ma(e,t){const n={...t};for(const r in e)if(Object.prototype.hasOwnProperty.call(e,r)){const o=r;if("components"===o||"slots"===o)n[o]={...e[o],...n[o]};else if("componentsProps"===o||"slotProps"===o){const r=e[o],a=t[o];if(a)if(r){n[o]={...a};for(const e in r)if(Object.prototype.hasOwnProperty.call(r,e)){const t=e;n[o][t]=ma(r[t],a[t])}}else n[o]=a;else n[o]=r||{}}else void 0===n[o]&&(n[o]=e[o])}return n}const ha=i.createContext(void 0);const ga=function({value:e,children:t}){return(0,a.jsx)(ha.Provider,{value:e,children:t})};function ya(e){return function({props:e,name:t}){return function(e){const{theme:t,name:n,props:r}=e;if(!t||!t.components||!t.components[n])return r;const o=t.components[n];return o.defaultProps?ma(o.defaultProps,r):o.styleOverrides||o.variants?r:ma(o,r)}({props:e,name:t,theme:{components:i.useContext(ha)}})}(e)}function va(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}function ba(...e){const t=i.useRef(void 0),n=i.useCallback((t=>{const n=e.map((e=>{if(null==e)return null;if("function"==typeof e){const n=e,r=n(t);return"function"==typeof r?r:()=>{n(null)}}return e.current=t,()=>{e.current=null}}));return()=>{n.forEach((e=>e?.()))}}),e);return i.useMemo((()=>e.every((e=>null==e))?null:e=>{t.current&&(t.current(),t.current=void 0),null!=e&&(t.current=n(e))}),e)}const Sa="undefined"!=typeof window?i.useLayoutEffect:i.useEffect,ka=function(e){const t=i.useRef(e);return Sa((()=>{t.current=e})),i.useRef(((...e)=>(0,t.current)(...e))).current};function wa(e){return e&&e.ownerDocument||document}function xa(e){return wa(e).defaultView||window}function Ca(e){return parseInt(e,10)||0}const Ea={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"};function Aa(e){return function(e){for(const t in e)return!1;return!0}(e)||0===e.outerHeightStyle&&!e.overflowing}const Pa=i.forwardRef((function(e,t){const{onChange:n,maxRows:r,minRows:o=1,style:l,value:s,...u}=e,{current:c}=i.useRef(null!=s),d=i.useRef(null),f=ba(t,d),p=i.useRef(null),m=i.useRef(null),h=i.useCallback((()=>{const t=d.current,n=m.current;if(!t||!n)return;const a=xa(t).getComputedStyle(t);if("0px"===a.width)return{outerHeightStyle:0,overflowing:!1};n.style.width=a.width,n.value=t.value||e.placeholder||"x","\n"===n.value.slice(-1)&&(n.value+=" ");const i=a.boxSizing,l=Ca(a.paddingBottom)+Ca(a.paddingTop),s=Ca(a.borderBottomWidth)+Ca(a.borderTopWidth),u=n.scrollHeight;n.value="x";const c=n.scrollHeight;let f=u;return o&&(f=Math.max(Number(o)*c,f)),r&&(f=Math.min(Number(r)*c,f)),f=Math.max(f,c),{outerHeightStyle:f+("border-box"===i?l+s:0),overflowing:Math.abs(f-u)<=1}}),[r,o,e.placeholder]),g=ka((()=>{const e=d.current,t=h();if(!e||!t||Aa(t))return!1;const n=t.outerHeightStyle;return null!=p.current&&p.current!==n})),y=i.useCallback((()=>{const e=d.current,t=h();if(!e||!t||Aa(t))return;const n=t.outerHeightStyle;p.current!==n&&(p.current=n,e.style.height=`${n}px`),e.style.overflow=t.overflowing?"hidden":""}),[h]),v=i.useRef(-1);return Sa((()=>{const e=va(y),t=d?.current;if(!t)return;const n=xa(t);let r;return n.addEventListener("resize",e),"undefined"!=typeof ResizeObserver&&(r=new ResizeObserver((()=>{g()&&(r.unobserve(t),cancelAnimationFrame(v.current),y(),v.current=requestAnimationFrame((()=>{r.observe(t)})))})),r.observe(t)),()=>{e.clear(),cancelAnimationFrame(v.current),n.removeEventListener("resize",e),r&&r.disconnect()}}),[h,y,g]),Sa((()=>{y()})),(0,a.jsxs)(i.Fragment,{children:[(0,a.jsx)("textarea",{value:s,onChange:e=>{c||y();const t=e.target,r=t.value.length,o=t.value.endsWith("\n"),a=t.selectionStart===r;o&&a&&t.setSelectionRange(r,r),n&&n(e)},ref:f,rows:o,style:l,...u}),(0,a.jsx)("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:m,tabIndex:-1,style:{...Ea,...l,paddingTop:0,paddingBottom:0}})]})})),Ta=Pa,_a=function(e){return"string"==typeof e};function Ra({props:e,states:t,muiFormControl:n}){return t.reduce(((t,r)=>(t[r]=e[r],n&&void 0===e[r]&&(t[r]=n[r]),t)),{})}const za=i.createContext(void 0);function Oa(){return i.useContext(za)}function Ma(e){const{sx:t,...n}=e,{systemProps:r,otherProps:o}=(e=>{const t={systemProps:{},otherProps:{}},n=e?.theme?.unstable_sxConfig??br;return Object.keys(e).forEach((r=>{n[r]?t.systemProps[r]=e[r]:t.otherProps[r]=e[r]})),t})(n);let a;return a=Array.isArray(t)?[r,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return pn(n)?{...r,...n}:r}:{...r,...t},{...o,sx:a}}o(146);var Na,Fa,$a=function(e,t){var n=arguments;if(null==t||!Yt.call(t,"css"))return i.createElement.apply(void 0,n);var r=n.length,o=new Array(r);o[0]=en,o[1]=function(e,t){var n={};for(var r in t)Yt.call(t,r)&&(n[r]=t[r]);return n[Zt]=e,n}(e,t);for(var a=2;a<r;a++)o[a]=n[a];return i.createElement.apply(null,o)};Na=$a||($a={}),Fa||(Fa=Na.JSX||(Na.JSX={}));var La=Gt((function(e,t){var n=Ht([e.styles],void 0,i.useContext(Xt)),r=i.useRef();return Kt((function(){var e=t.key+"-global",o=new t.sheet.constructor({key:e,nonce:t.sheet.nonce,container:t.sheet.container,speedy:t.sheet.isSpeedy}),a=!1,i=document.querySelector('style[data-emotion="'+e+" "+n.name+'"]');return t.sheet.tags.length&&(o.before=t.sheet.tags[0]),null!==i&&(a=!0,i.setAttribute("data-emotion",e),o.hydrate([i])),r.current=[o,a],function(){o.flush()}}),[t]),Kt((function(){var e=r.current,o=e[0];if(e[1])e[1]=!1;else{if(void 0!==n.next&&Ot(t,n.next,!0),o.tags.length){var a=o.tags[o.tags.length-1].nextElementSibling;o.before=a,o.flush()}t.insert("",n,o,!1)}}),[t,n.name]),null}));function ja(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Ht(t)}function Ia(){var e=ja.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}function Da(e){const{styles:t,defaultTheme:n={}}=e,r="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,a.jsx)(La,{styles:r})}const Ba=function(e=null){const t=i.useContext(Xt);return t&&(n=t,0!==Object.keys(n).length)?t:e;var n},Va=xr(),Wa=function(e=Va){return Ba(e)},Ha=function({styles:e,themeId:t,defaultTheme:n={}}){const r=Wa(n),o="function"==typeof e?e(t&&r[t]||r):e;return(0,a.jsx)(Da,{styles:o})},Ua=function(e){return(0,a.jsx)(Ha,{...e,defaultTheme:ua,themeId:ca})};function qa(e){return function(t){return(0,a.jsx)(Ua,{styles:"function"==typeof e?n=>e({theme:n,...t}):e})}}const Ka={theme:void 0},Qa=function(e){let t,n;return function(r){let o=t;return void 0!==o&&r.theme===n||(Ka.theme=r.theme,o=Cr(e(Ka)),t=o,n=r.theme),o}},Ga=An,Xa=ba,Ya=Sa;function Za(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function Ja(e,t=!1){return e&&(Za(e.value)&&""!==e.value||t&&Za(e.defaultValue)&&""!==e.defaultValue)}const ei=e=>e,ti=(()=>{let e=ei;return{configure(t){e=t},generate:t=>e(t),reset(){e=ei}}})(),ni={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function ri(e,t,n="Mui"){const r=ni[t];return r?`${n}-${r}`:`${ti.generate(e)}-${t}`}function oi(e,t,n="Mui"){const r={};return t.forEach((t=>{r[t]=ri(e,t,n)})),r}function ai(e){return ri("MuiInputBase",e)}const ii=oi("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]);var li;const si=(e,t)=>{const{ownerState:n}=e;return[t.root,n.formControl&&t.formControl,n.startAdornment&&t.adornedStart,n.endAdornment&&t.adornedEnd,n.error&&t.error,"small"===n.size&&t.sizeSmall,n.multiline&&t.multiline,n.color&&t[`color${Ga(n.color)}`],n.fullWidth&&t.fullWidth,n.hiddenLabel&&t.hiddenLabel]},ui=(e,t)=>{const{ownerState:n}=e;return[t.input,"small"===n.size&&t.inputSizeSmall,n.multiline&&t.inputMultiline,"search"===n.type&&t.inputTypeSearch,n.startAdornment&&t.inputAdornedStart,n.endAdornment&&t.inputAdornedEnd,n.hiddenLabel&&t.inputHiddenLabel]},ci=pa("div",{name:"MuiInputBase",slot:"Root",overridesResolver:si})(Qa((({theme:e})=>({...e.typography.body1,color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${ii.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"},variants:[{props:({ownerState:e})=>e.multiline,style:{padding:"4px 0 5px"}},{props:({ownerState:e,size:t})=>e.multiline&&"small"===t,style:{paddingTop:1}},{props:({ownerState:e})=>e.fullWidth,style:{width:"100%"}}]})))),di=pa("input",{name:"MuiInputBase",slot:"Input",overridesResolver:ui})(Qa((({theme:e})=>{const t="light"===e.palette.mode,n={color:"currentColor",...e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:t?.42:.5},transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},r={opacity:"0 !important"},o=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:t?.42:.5};return{font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%","&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&::-ms-input-placeholder":n,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${ii.formControl} &`]:{"&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&::-ms-input-placeholder":r,"&:focus::-webkit-input-placeholder":o,"&:focus::-moz-placeholder":o,"&:focus::-ms-input-placeholder":o},[`&.${ii.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},variants:[{props:({ownerState:e})=>!e.disableInjectingGlobalStyles,style:{animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}}},{props:{size:"small"},style:{paddingTop:1}},{props:({ownerState:e})=>e.multiline,style:{height:"auto",resize:"none",padding:0,paddingTop:0}},{props:{type:"search"},style:{MozAppearance:"textfield"}}]}}))),fi=qa({"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}),pi=i.forwardRef((function(e,t){const n=ya({props:e,name:"MuiInputBase"}),{"aria-describedby":r,autoComplete:o,autoFocus:l,className:s,color:u,components:c={},componentsProps:d={},defaultValue:f,disabled:p,disableInjectingGlobalStyles:m,endAdornment:h,error:g,fullWidth:y=!1,id:v,inputComponent:b="input",inputProps:S={},inputRef:k,margin:w,maxRows:x,minRows:C,multiline:E=!1,name:A,onBlur:P,onChange:T,onClick:_,onFocus:R,onKeyDown:z,onKeyUp:O,placeholder:M,readOnly:N,renderSuffix:F,rows:$,size:L,slotProps:j={},slots:I={},startAdornment:D,type:B="text",value:V,...W}=n,H=null!=S.value?S.value:V,{current:U}=i.useRef(null!=H),q=i.useRef(),K=i.useCallback((e=>{}),[]),Q=Xa(q,k,S.ref,K),[G,X]=i.useState(!1),Y=Oa(),Z=Ra({props:n,muiFormControl:Y,states:["color","disabled","error","hiddenLabel","size","required","filled"]});Z.focused=Y?Y.focused:G,i.useEffect((()=>{!Y&&p&&G&&(X(!1),P&&P())}),[Y,p,G,P]);const J=Y&&Y.onFilled,ee=Y&&Y.onEmpty,te=i.useCallback((e=>{Ja(e)?J&&J():ee&&ee()}),[J,ee]);Ya((()=>{U&&te({value:H})}),[H,te,U]),i.useEffect((()=>{te(q.current)}),[]);let ne=b,re=S;E&&"input"===ne&&(re=$?{type:void 0,minRows:$,maxRows:$,...re}:{type:void 0,maxRows:x,minRows:C,...re},ne=Ta),i.useEffect((()=>{Y&&Y.setAdornedStart(Boolean(D))}),[Y,D]);const oe={...n,color:Z.color||"primary",disabled:Z.disabled,endAdornment:h,error:Z.error,focused:Z.focused,formControl:Y,fullWidth:y,hiddenLabel:Z.hiddenLabel,multiline:E,size:Z.size,startAdornment:D,type:B},ae=(e=>{const{classes:t,color:n,disabled:r,error:o,endAdornment:a,focused:i,formControl:l,fullWidth:s,hiddenLabel:u,multiline:c,readOnly:d,size:f,startAdornment:p,type:m}=e;return Ce({root:["root",`color${Ga(n)}`,r&&"disabled",o&&"error",s&&"fullWidth",i&&"focused",l&&"formControl",f&&"medium"!==f&&`size${Ga(f)}`,c&&"multiline",p&&"adornedStart",a&&"adornedEnd",u&&"hiddenLabel",d&&"readOnly"],input:["input",r&&"disabled","search"===m&&"inputTypeSearch",c&&"inputMultiline","small"===f&&"inputSizeSmall",u&&"inputHiddenLabel",p&&"inputAdornedStart",a&&"inputAdornedEnd",d&&"readOnly"]},ai,t)})(oe),ie=I.root||c.Root||ci,le=j.root||d.root||{},se=I.input||c.Input||di;return re={...re,...j.input??d.input},(0,a.jsxs)(i.Fragment,{children:[!m&&"function"==typeof fi&&(li||(li=(0,a.jsx)(fi,{}))),(0,a.jsxs)(ie,{...le,ref:t,onClick:e=>{q.current&&e.currentTarget===e.target&&q.current.focus(),_&&_(e)},...W,...!_a(ie)&&{ownerState:{...oe,...le.ownerState}},className:xe(ae.root,le.className,s,N&&"MuiInputBase-readOnly"),children:[D,(0,a.jsx)(za.Provider,{value:null,children:(0,a.jsx)(se,{"aria-invalid":Z.error,"aria-describedby":r,autoComplete:o,autoFocus:l,defaultValue:f,disabled:Z.disabled,id:v,onAnimationStart:e=>{te("mui-auto-fill-cancel"===e.animationName?q.current:{value:"x"})},name:A,placeholder:M,readOnly:N,required:Z.required,rows:$,value:H,onKeyDown:z,onKeyUp:O,type:B,...re,...!_a(se)&&{as:ne,ownerState:{...oe,...re.ownerState}},ref:Q,className:xe(ae.input,re.className,N&&"MuiInputBase-readOnly"),onBlur:e=>{P&&P(e),S.onBlur&&S.onBlur(e),Y&&Y.onBlur?Y.onBlur(e):X(!1)},onChange:(e,...t)=>{if(!U){const t=e.target||q.current;if(null==t)throw new Error(En(1));te({value:t.value})}S.onChange&&S.onChange(e,...t),T&&T(e,...t)},onFocus:e=>{R&&R(e),S.onFocus&&S.onFocus(e),Y&&Y.onFocus?Y.onFocus(e):X(!0)}})}),h,F?F({...Z,startAdornment:D}):null]})]})})),mi=pi;function hi(e=[]){return([,t])=>t&&function(e,t=[]){if(!function(e){return"string"==typeof e.main}(e))return!1;for(const n of t)if(!e.hasOwnProperty(n)||"string"!=typeof e[n])return!1;return!0}(t,e)}function gi(e){return ri("MuiInput",e)}const yi={...ii,...oi("MuiInput",["root","underline","input"])},vi=pa(ci,{shouldForwardProp:e=>fa(e)||"classes"===e,name:"MuiInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...si(e,t),!n.disableUnderline&&t.underline]}})(Qa((({theme:e})=>{let t="light"===e.palette.mode?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return e.vars&&(t=`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`),{position:"relative",variants:[{props:({ownerState:e})=>e.formControl,style:{"label + &":{marginTop:16}}},{props:({ownerState:e})=>!e.disableUnderline,style:{"&::after":{left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${yi.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${yi.error}`]:{"&::before, &::after":{borderBottomColor:(e.vars||e).palette.error.main}},"&::before":{borderBottom:`1px solid ${t}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${yi.disabled}, .${yi.error}):before`]:{borderBottom:`2px solid ${(e.vars||e).palette.text.primary}`,"@media (hover: none)":{borderBottom:`1px solid ${t}`}},[`&.${yi.disabled}:before`]:{borderBottomStyle:"dotted"}}},...Object.entries(e.palette).filter(hi()).map((([t])=>({props:{color:t,disableUnderline:!1},style:{"&::after":{borderBottom:`2px solid ${(e.vars||e).palette[t].main}`}}})))]}}))),bi=pa(di,{name:"MuiInput",slot:"Input",overridesResolver:ui})({}),Si=i.forwardRef((function(e,t){const n=ya({props:e,name:"MuiInput"}),{disableUnderline:r=!1,components:o={},componentsProps:i,fullWidth:l=!1,inputComponent:s="input",multiline:u=!1,slotProps:c,slots:d={},type:f="text",...p}=n,m=(e=>{const{classes:t,disableUnderline:n}=e,r=Ce({root:["root",!n&&"underline"],input:["input"]},gi,t);return{...t,...r}})(n),h={root:{ownerState:{disableUnderline:r}}},g=c??i?hn(c??i,h):h,y=d.root??o.Root??vi,v=d.input??o.Input??bi;return(0,a.jsx)(mi,{slots:{root:y,input:v},slotProps:g,fullWidth:l,inputComponent:s,multiline:u,ref:t,type:f,...p,classes:m})}));Si.muiName="Input";const ki=Si;function wi(e){return ri("MuiFilledInput",e)}const xi={...ii,...oi("MuiFilledInput",["root","underline","input","adornedStart","adornedEnd","sizeSmall","multiline","hiddenLabel"])},Ci=pa(ci,{shouldForwardProp:e=>fa(e)||"classes"===e,name:"MuiFilledInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...si(e,t),!n.disableUnderline&&t.underline]}})(Qa((({theme:e})=>{const t="light"===e.palette.mode,n=t?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",r=t?"rgba(0, 0, 0, 0.06)":"rgba(255, 255, 255, 0.09)",o=t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.13)",a=t?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)";return{position:"relative",backgroundColor:e.vars?e.vars.palette.FilledInput.bg:r,borderTopLeftRadius:(e.vars||e).shape.borderRadius,borderTopRightRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:e.vars?e.vars.palette.FilledInput.hoverBg:o,"@media (hover: none)":{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:r}},[`&.${xi.focused}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:r},[`&.${xi.disabled}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.disabledBg:a},variants:[{props:({ownerState:e})=>!e.disableUnderline,style:{"&::after":{left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${xi.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${xi.error}`]:{"&::before, &::after":{borderBottomColor:(e.vars||e).palette.error.main}},"&::before":{borderBottom:`1px solid ${e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`:n}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${xi.disabled}, .${xi.error}):before`]:{borderBottom:`1px solid ${(e.vars||e).palette.text.primary}`},[`&.${xi.disabled}:before`]:{borderBottomStyle:"dotted"}}},...Object.entries(e.palette).filter(hi()).map((([t])=>({props:{disableUnderline:!1,color:t},style:{"&::after":{borderBottom:`2px solid ${(e.vars||e).palette[t]?.main}`}}}))),{props:({ownerState:e})=>e.startAdornment,style:{paddingLeft:12}},{props:({ownerState:e})=>e.endAdornment,style:{paddingRight:12}},{props:({ownerState:e})=>e.multiline,style:{padding:"25px 12px 8px"}},{props:({ownerState:e,size:t})=>e.multiline&&"small"===t,style:{paddingTop:21,paddingBottom:4}},{props:({ownerState:e})=>e.multiline&&e.hiddenLabel,style:{paddingTop:16,paddingBottom:17}},{props:({ownerState:e})=>e.multiline&&e.hiddenLabel&&"small"===e.size,style:{paddingTop:8,paddingBottom:9}}]}}))),Ei=pa(di,{name:"MuiFilledInput",slot:"Input",overridesResolver:ui})(Qa((({theme:e})=>({paddingTop:25,paddingRight:12,paddingBottom:8,paddingLeft:12,...!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},...e.vars&&{"&:-webkit-autofill":{borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},variants:[{props:{size:"small"},style:{paddingTop:21,paddingBottom:4}},{props:({ownerState:e})=>e.hiddenLabel,style:{paddingTop:16,paddingBottom:17}},{props:({ownerState:e})=>e.startAdornment,style:{paddingLeft:0}},{props:({ownerState:e})=>e.endAdornment,style:{paddingRight:0}},{props:({ownerState:e})=>e.hiddenLabel&&"small"===e.size,style:{paddingTop:8,paddingBottom:9}},{props:({ownerState:e})=>e.multiline,style:{paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0}}]})))),Ai=i.forwardRef((function(e,t){const n=ya({props:e,name:"MuiFilledInput"}),{disableUnderline:r=!1,components:o={},componentsProps:i,fullWidth:l=!1,hiddenLabel:s,inputComponent:u="input",multiline:c=!1,slotProps:d,slots:f={},type:p="text",...m}=n,h={...n,disableUnderline:r,fullWidth:l,inputComponent:u,multiline:c,type:p},g=(e=>{const{classes:t,disableUnderline:n,startAdornment:r,endAdornment:o,size:a,hiddenLabel:i,multiline:l}=e,s=Ce({root:["root",!n&&"underline",r&&"adornedStart",o&&"adornedEnd","small"===a&&`size${Ga(a)}`,i&&"hiddenLabel",l&&"multiline"],input:["input"]},wi,t);return{...t,...s}})(n),y={root:{ownerState:h},input:{ownerState:h}},v=d??i?hn(y,d??i):y,b=f.root??o.Root??Ci,S=f.input??o.Input??Ei;return(0,a.jsx)(mi,{slots:{root:b,input:S},slotProps:v,fullWidth:l,inputComponent:u,multiline:c,ref:t,type:p,...m,classes:g})}));Ai.muiName="Input";const Pi=Ai;var Ti;const _i=pa("fieldset",{shouldForwardProp:fa})({textAlign:"left",position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden",minWidth:"0%"}),Ri=pa("legend",{shouldForwardProp:fa})(Qa((({theme:e})=>({float:"unset",width:"auto",overflow:"hidden",variants:[{props:({ownerState:e})=>!e.withLabel,style:{padding:0,lineHeight:"11px",transition:e.transitions.create("width",{duration:150,easing:e.transitions.easing.easeOut})}},{props:({ownerState:e})=>e.withLabel,style:{display:"block",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:e.transitions.create("max-width",{duration:50,easing:e.transitions.easing.easeOut}),whiteSpace:"nowrap","& > span":{paddingLeft:5,paddingRight:5,display:"inline-block",opacity:0,visibility:"visible"}}},{props:({ownerState:e})=>e.withLabel&&e.notched,style:{maxWidth:"100%",transition:e.transitions.create("max-width",{duration:100,easing:e.transitions.easing.easeOut,delay:50})}}]}))));function zi(e){return ri("MuiOutlinedInput",e)}const Oi={...ii,...oi("MuiOutlinedInput",["root","notchedOutline","input"])},Mi=function(e,t,n){return void 0===e||"string"==typeof e?t:{...t,ownerState:{...t.ownerState,...n}}},Ni=function(e,t,n){return"function"==typeof e?e(t,n):e},Fi=function(e,t=[]){if(void 0===e)return{};const n={};return Object.keys(e).filter((n=>n.match(/^on[A-Z]/)&&"function"==typeof e[n]&&!t.includes(n))).forEach((t=>{n[t]=e[t]})),n},$i=function(e){if(void 0===e)return{};const t={};return Object.keys(e).filter((t=>!(t.match(/^on[A-Z]/)&&"function"==typeof e[t]))).forEach((n=>{t[n]=e[n]})),t},Li=function(e){const{getSlotProps:t,additionalProps:n,externalSlotProps:r,externalForwardedProps:o,className:a}=e;if(!t){const e=xe(n?.className,a,o?.className,r?.className),t={...n?.style,...o?.style,...r?.style},i={...n,...o,...r};return e.length>0&&(i.className=e),Object.keys(t).length>0&&(i.style=t),{props:i,internalRef:void 0}}const i=Fi({...o,...r}),l=$i(r),s=$i(o),u=t(i),c=xe(u?.className,n?.className,a,o?.className,r?.className),d={...u?.style,...n?.style,...o?.style,...r?.style},f={...u,...n,...s,...l};return c.length>0&&(f.className=c),Object.keys(d).length>0&&(f.style=d),{props:f,internalRef:u.ref}};function ji(e,t){const{className:n,elementType:r,ownerState:o,externalForwardedProps:a,internalForwardedProps:i,shouldForwardComponentProp:l=!1,...s}=t,{component:u,slots:c={[e]:void 0},slotProps:d={[e]:void 0},...f}=a,p=c[e]||r,m=Ni(d[e],o),{props:{component:h,...g},internalRef:y}=Li({className:n,...s,externalForwardedProps:"root"===e?f:void 0,externalSlotProps:m}),v=ba(y,m?.ref,t.ref),b="root"===e?h||u:h;return[p,Mi(p,{..."root"===e&&!u&&!c[e]&&i,..."root"!==e&&!c[e]&&i,...g,...b&&!l&&{as:b},...b&&l&&{component:b},ref:v},o)]}const Ii=pa(ci,{shouldForwardProp:e=>fa(e)||"classes"===e,name:"MuiOutlinedInput",slot:"Root",overridesResolver:si})(Qa((({theme:e})=>{const t="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{position:"relative",borderRadius:(e.vars||e).shape.borderRadius,[`&:hover .${Oi.notchedOutline}`]:{borderColor:(e.vars||e).palette.text.primary},"@media (hover: none)":{[`&:hover .${Oi.notchedOutline}`]:{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:t}},[`&.${Oi.focused} .${Oi.notchedOutline}`]:{borderWidth:2},variants:[...Object.entries(e.palette).filter(hi()).map((([t])=>({props:{color:t},style:{[`&.${Oi.focused} .${Oi.notchedOutline}`]:{borderColor:(e.vars||e).palette[t].main}}}))),{props:{},style:{[`&.${Oi.error} .${Oi.notchedOutline}`]:{borderColor:(e.vars||e).palette.error.main},[`&.${Oi.disabled} .${Oi.notchedOutline}`]:{borderColor:(e.vars||e).palette.action.disabled}}},{props:({ownerState:e})=>e.startAdornment,style:{paddingLeft:14}},{props:({ownerState:e})=>e.endAdornment,style:{paddingRight:14}},{props:({ownerState:e})=>e.multiline,style:{padding:"16.5px 14px"}},{props:({ownerState:e,size:t})=>e.multiline&&"small"===t,style:{padding:"8.5px 14px"}}]}}))),Di=pa((function(e){const{children:t,classes:n,className:r,label:o,notched:i,...l}=e,s=null!=o&&""!==o,u={...e,notched:i,withLabel:s};return(0,a.jsx)(_i,{"aria-hidden":!0,className:r,ownerState:u,...l,children:(0,a.jsx)(Ri,{ownerState:u,children:s?(0,a.jsx)("span",{children:o}):Ti||(Ti=(0,a.jsx)("span",{className:"notranslate","aria-hidden":!0,children:"​"}))})})}),{name:"MuiOutlinedInput",slot:"NotchedOutline"})(Qa((({theme:e})=>{const t="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:t}}))),Bi=pa(di,{name:"MuiOutlinedInput",slot:"Input",overridesResolver:ui})(Qa((({theme:e})=>({padding:"16.5px 14px",...!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderRadius:"inherit"}},...e.vars&&{"&:-webkit-autofill":{borderRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},variants:[{props:{size:"small"},style:{padding:"8.5px 14px"}},{props:({ownerState:e})=>e.multiline,style:{padding:0}},{props:({ownerState:e})=>e.startAdornment,style:{paddingLeft:0}},{props:({ownerState:e})=>e.endAdornment,style:{paddingRight:0}}]})))),Vi=i.forwardRef((function(e,t){const n=ya({props:e,name:"MuiOutlinedInput"}),{components:r={},fullWidth:o=!1,inputComponent:l="input",label:s,multiline:u=!1,notched:c,slots:d={},slotProps:f={},type:p="text",...m}=n,h=(e=>{const{classes:t}=e,n=Ce({root:["root"],notchedOutline:["notchedOutline"],input:["input"]},zi,t);return{...t,...n}})(n),g=Oa(),y=Ra({props:n,muiFormControl:g,states:["color","disabled","error","focused","hiddenLabel","size","required"]}),v={...n,color:y.color||"primary",disabled:y.disabled,error:y.error,focused:y.focused,formControl:g,fullWidth:o,hiddenLabel:y.hiddenLabel,multiline:u,size:y.size,type:p},b=d.root??r.Root??Ii,S=d.input??r.Input??Bi,[k,w]=ji("notchedOutline",{elementType:Di,className:h.notchedOutline,shouldForwardComponentProp:!0,ownerState:v,externalForwardedProps:{slots:d,slotProps:f},additionalProps:{label:null!=s&&""!==s&&y.required?(0,a.jsxs)(i.Fragment,{children:[s," ","*"]}):s}});return(0,a.jsx)(mi,{slots:{root:b,input:S},slotProps:f,renderSuffix:e=>(0,a.jsx)(k,{...w,notched:void 0!==c?c:Boolean(e.startAdornment||e.filled||e.focused)}),fullWidth:o,inputComponent:l,multiline:u,ref:t,type:p,...m,classes:{...h,notchedOutline:null}})}));Vi.muiName="Input";const Wi=Vi;function Hi(e){return ri("MuiFormLabel",e)}const Ui=oi("MuiFormLabel",["root","colorSecondary","focused","disabled","error","filled","required","asterisk"]),qi=pa("label",{name:"MuiFormLabel",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"secondary"===n.color&&t.colorSecondary,n.filled&&t.filled]}})(Qa((({theme:e})=>({color:(e.vars||e).palette.text.secondary,...e.typography.body1,lineHeight:"1.4375em",padding:0,position:"relative",variants:[...Object.entries(e.palette).filter(hi()).map((([t])=>({props:{color:t},style:{[`&.${Ui.focused}`]:{color:(e.vars||e).palette[t].main}}}))),{props:{},style:{[`&.${Ui.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${Ui.error}`]:{color:(e.vars||e).palette.error.main}}}]})))),Ki=pa("span",{name:"MuiFormLabel",slot:"Asterisk"})(Qa((({theme:e})=>({[`&.${Ui.error}`]:{color:(e.vars||e).palette.error.main}})))),Qi=i.forwardRef((function(e,t){const n=ya({props:e,name:"MuiFormLabel"}),{children:r,className:o,color:i,component:l="label",disabled:s,error:u,filled:c,focused:d,required:f,...p}=n,m=Ra({props:n,muiFormControl:Oa(),states:["color","required","focused","disabled","error","filled"]}),h={...n,color:m.color||"primary",component:l,disabled:m.disabled,error:m.error,filled:m.filled,focused:m.focused,required:m.required},g=(e=>{const{classes:t,color:n,focused:r,disabled:o,error:a,filled:i,required:l}=e;return Ce({root:["root",`color${Ga(n)}`,o&&"disabled",a&&"error",i&&"filled",r&&"focused",l&&"required"],asterisk:["asterisk",a&&"error"]},Hi,t)})(h);return(0,a.jsxs)(qi,{as:l,ownerState:h,className:xe(g.root,o),ref:t,...p,children:[r,m.required&&(0,a.jsxs)(Ki,{ownerState:h,"aria-hidden":!0,className:g.asterisk,children:[" ","*"]})]})}));function Gi(e){return ri("MuiInputLabel",e)}oi("MuiInputLabel",["root","focused","disabled","error","required","asterisk","formControl","sizeSmall","shrink","animated","standard","filled","outlined"]);const Xi=pa(Qi,{shouldForwardProp:e=>fa(e)||"classes"===e,name:"MuiInputLabel",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`& .${Ui.asterisk}`]:t.asterisk},t.root,n.formControl&&t.formControl,"small"===n.size&&t.sizeSmall,n.shrink&&t.shrink,!n.disableAnimation&&t.animated,n.focused&&t.focused,t[n.variant]]}})(Qa((({theme:e})=>({display:"block",transformOrigin:"top left",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",maxWidth:"100%",variants:[{props:({ownerState:e})=>e.formControl,style:{position:"absolute",left:0,top:0,transform:"translate(0, 20px) scale(1)"}},{props:{size:"small"},style:{transform:"translate(0, 17px) scale(1)"}},{props:({ownerState:e})=>e.shrink,style:{transform:"translate(0, -1.5px) scale(0.75)",transformOrigin:"top left",maxWidth:"133%"}},{props:({ownerState:e})=>!e.disableAnimation,style:{transition:e.transitions.create(["color","transform","max-width"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})}},{props:{variant:"filled"},style:{zIndex:1,pointerEvents:"none",transform:"translate(12px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"}},{props:{variant:"filled",size:"small"},style:{transform:"translate(12px, 13px) scale(1)"}},{props:({variant:e,ownerState:t})=>"filled"===e&&t.shrink,style:{userSelect:"none",pointerEvents:"auto",transform:"translate(12px, 7px) scale(0.75)",maxWidth:"calc(133% - 24px)"}},{props:({variant:e,ownerState:t,size:n})=>"filled"===e&&t.shrink&&"small"===n,style:{transform:"translate(12px, 4px) scale(0.75)"}},{props:{variant:"outlined"},style:{zIndex:1,pointerEvents:"none",transform:"translate(14px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"}},{props:{variant:"outlined",size:"small"},style:{transform:"translate(14px, 9px) scale(1)"}},{props:({variant:e,ownerState:t})=>"outlined"===e&&t.shrink,style:{userSelect:"none",pointerEvents:"auto",maxWidth:"calc(133% - 32px)",transform:"translate(14px, -9px) scale(0.75)"}}]})))),Yi=i.forwardRef((function(e,t){const n=ya({name:"MuiInputLabel",props:e}),{disableAnimation:r=!1,margin:o,shrink:i,variant:l,className:s,...u}=n,c=Oa();let d=i;void 0===d&&c&&(d=c.filled||c.focused||c.adornedStart);const f=Ra({props:n,muiFormControl:c,states:["size","variant","required","focused"]}),p={...n,disableAnimation:r,formControl:c,shrink:d,size:f.size,variant:f.variant,required:f.required,focused:f.focused},m=(e=>{const{classes:t,formControl:n,size:r,shrink:o,disableAnimation:a,variant:i,required:l}=e,s=Ce({root:["root",n&&"formControl",!a&&"animated",o&&"shrink",r&&"medium"!==r&&`size${Ga(r)}`,i],asterisk:[l&&"asterisk"]},Gi,t);return{...t,...s}})(p);return(0,a.jsx)(Xi,{"data-shrink":d,ref:t,className:xe(m.root,s),...u,ownerState:p,classes:m})})),Zi=function(e,t){return i.isValidElement(e)&&-1!==t.indexOf(e.type.muiName??e.type?._payload?.value?.muiName)};function Ji(e){return ri("MuiFormControl",e)}oi("MuiFormControl",["root","marginNone","marginNormal","marginDense","fullWidth","disabled"]);const el=pa("div",{name:"MuiFormControl",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[`margin${Ga(n.margin)}`],n.fullWidth&&t.fullWidth]}})({display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top",variants:[{props:{margin:"normal"},style:{marginTop:16,marginBottom:8}},{props:{margin:"dense"},style:{marginTop:8,marginBottom:4}},{props:{fullWidth:!0},style:{width:"100%"}}]}),tl=i.forwardRef((function(e,t){const n=ya({props:e,name:"MuiFormControl"}),{children:r,className:o,color:l="primary",component:s="div",disabled:u=!1,error:c=!1,focused:d,fullWidth:f=!1,hiddenLabel:p=!1,margin:m="none",required:h=!1,size:g="medium",variant:y="outlined",...v}=n,b={...n,color:l,component:s,disabled:u,error:c,fullWidth:f,hiddenLabel:p,margin:m,required:h,size:g,variant:y},S=(e=>{const{classes:t,margin:n,fullWidth:r}=e;return Ce({root:["root","none"!==n&&`margin${Ga(n)}`,r&&"fullWidth"]},Ji,t)})(b),[k,w]=i.useState((()=>{let e=!1;return r&&i.Children.forEach(r,(t=>{if(!Zi(t,["Input","Select"]))return;const n=Zi(t,["Select"])?t.props.input:t;n&&n.props.startAdornment&&(e=!0)})),e})),[x,C]=i.useState((()=>{let e=!1;return r&&i.Children.forEach(r,(t=>{Zi(t,["Input","Select"])&&(Ja(t.props,!0)||Ja(t.props.inputProps,!0))&&(e=!0)})),e})),[E,A]=i.useState(!1);u&&E&&A(!1);const P=void 0===d||u?E:d;let T;i.useRef(!1);const _=i.useCallback((()=>{C(!0)}),[]),R=i.useCallback((()=>{C(!1)}),[]),z=i.useMemo((()=>({adornedStart:k,setAdornedStart:w,color:l,disabled:u,error:c,filled:x,focused:P,fullWidth:f,hiddenLabel:p,size:g,onBlur:()=>{A(!1)},onFocus:()=>{A(!0)},onEmpty:R,onFilled:_,registerEffect:T,required:h,variant:y})),[k,l,u,c,x,P,f,p,T,R,_,h,g,y]);return(0,a.jsx)(za.Provider,{value:z,children:(0,a.jsx)(el,{as:s,ownerState:b,className:xe(S.root,o),ref:t,...v,children:r})})})),nl=tl;function rl(e){return ri("MuiFormHelperText",e)}const ol=oi("MuiFormHelperText",["root","error","disabled","sizeSmall","sizeMedium","contained","focused","filled","required"]);var al;const il=pa("p",{name:"MuiFormHelperText",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.size&&t[`size${Ga(n.size)}`],n.contained&&t.contained,n.filled&&t.filled]}})(Qa((({theme:e})=>({color:(e.vars||e).palette.text.secondary,...e.typography.caption,textAlign:"left",marginTop:3,marginRight:0,marginBottom:0,marginLeft:0,[`&.${ol.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${ol.error}`]:{color:(e.vars||e).palette.error.main},variants:[{props:{size:"small"},style:{marginTop:4}},{props:({ownerState:e})=>e.contained,style:{marginLeft:14,marginRight:14}}]})))),ll=i.forwardRef((function(e,t){const n=ya({props:e,name:"MuiFormHelperText"}),{children:r,className:o,component:i="p",disabled:l,error:s,filled:u,focused:c,margin:d,required:f,variant:p,...m}=n,h=Ra({props:n,muiFormControl:Oa(),states:["variant","size","disabled","error","filled","focused","required"]}),g={...n,component:i,contained:"filled"===h.variant||"outlined"===h.variant,variant:h.variant,size:h.size,disabled:h.disabled,error:h.error,filled:h.filled,focused:h.focused,required:h.required};delete g.ownerState;const y=(e=>{const{classes:t,contained:n,size:r,disabled:o,error:a,filled:i,focused:l,required:s}=e;return Ce({root:["root",o&&"disabled",a&&"error",r&&`size${Ga(r)}`,n&&"contained",l&&"focused",i&&"filled",s&&"required"]},rl,t)})(g);return(0,a.jsx)(il,{as:i,className:xe(y.root,o),ref:t,...m,ownerState:g,children:" "===r?al||(al=(0,a.jsx)("span",{className:"notranslate","aria-hidden":!0,children:"​"})):r})}));function sl(e){return parseInt(i.version,10)>=19?e?.props?.ref||null:e?.ref||null}const ul=wa,cl=i.createContext(),dl=function({value:e,...t}){return(0,a.jsx)(cl.Provider,{value:e??!0,...t})},fl=i.createContext({});function pl(e){return ri("MuiList",e)}oi("MuiList",["root","padding","dense","subheader"]);const ml=pa("ul",{name:"MuiList",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disablePadding&&t.padding,n.dense&&t.dense,n.subheader&&t.subheader]}})({listStyle:"none",margin:0,padding:0,position:"relative",variants:[{props:({ownerState:e})=>!e.disablePadding,style:{paddingTop:8,paddingBottom:8}},{props:({ownerState:e})=>e.subheader,style:{paddingTop:0}}]}),hl=i.forwardRef((function(e,t){const n=ya({props:e,name:"MuiList"}),{children:r,className:o,component:l="ul",dense:s=!1,disablePadding:u=!1,subheader:c,...d}=n,f=i.useMemo((()=>({dense:s})),[s]),p={...n,component:l,dense:s,disablePadding:u},m=(e=>{const{classes:t,disablePadding:n,dense:r,subheader:o}=e;return Ce({root:["root",!n&&"padding",r&&"dense",o&&"subheader"]},pl,t)})(p);return(0,a.jsx)(fl.Provider,{value:f,children:(0,a.jsxs)(ml,{as:l,className:xe(m.root,o),ref:t,ownerState:p,...d,children:[c,r]})})}));function gl(e=window){const t=e.document.documentElement.clientWidth;return e.innerWidth-t}const yl=gl,vl=xa;function bl(e,t,n){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function Sl(e,t,n){return e===t?n?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function kl(e,t){if(void 0===t)return!0;let n=e.innerText;return void 0===n&&(n=e.textContent),n=n.trim().toLowerCase(),0!==n.length&&(t.repeating?n[0]===t.keys[0]:n.startsWith(t.keys.join("")))}function wl(e,t,n,r,o,a){let i=!1,l=o(e,t,!!t&&n);for(;l;){if(l===e.firstChild){if(i)return!1;i=!0}const t=!r&&(l.disabled||"true"===l.getAttribute("aria-disabled"));if(l.hasAttribute("tabindex")&&kl(l,a)&&!t)return l.focus(),!0;l=o(e,l,n)}return!1}const xl=i.forwardRef((function(e,t){const{actions:n,autoFocus:r=!1,autoFocusItem:o=!1,children:l,className:s,disabledItemsFocusable:u=!1,disableListWrap:c=!1,onKeyDown:d,variant:f="selectedMenu",...p}=e,m=i.useRef(null),h=i.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});Ya((()=>{r&&m.current.focus()}),[r]),i.useImperativeHandle(n,(()=>({adjustStyleForScrollbar:(e,{direction:t})=>{const n=!m.current.style.width;if(e.clientHeight<m.current.clientHeight&&n){const n=`${yl(vl(e))}px`;m.current.style["rtl"===t?"paddingLeft":"paddingRight"]=n,m.current.style.width=`calc(100% + ${n})`}return m.current}})),[]);const g=Xa(m,t);let y=-1;i.Children.forEach(l,((e,t)=>{i.isValidElement(e)?(e.props.disabled||("selectedMenu"===f&&e.props.selected||-1===y)&&(y=t),y===t&&(e.props.disabled||e.props.muiSkipListHighlight||e.type.muiSkipListHighlight)&&(y+=1,y>=l.length&&(y=-1))):y===t&&(y+=1,y>=l.length&&(y=-1))}));const v=i.Children.map(l,((e,t)=>{if(t===y){const t={};return o&&(t.autoFocus=!0),void 0===e.props.tabIndex&&"selectedMenu"===f&&(t.tabIndex=0),i.cloneElement(e,t)}return e}));return(0,a.jsx)(hl,{role:"menu",ref:g,className:s,onKeyDown:e=>{const t=m.current,n=e.key;if(e.ctrlKey||e.metaKey||e.altKey)return void(d&&d(e));const r=ul(t).activeElement;if("ArrowDown"===n)e.preventDefault(),wl(t,r,c,u,bl);else if("ArrowUp"===n)e.preventDefault(),wl(t,r,c,u,Sl);else if("Home"===n)e.preventDefault(),wl(t,null,c,u,bl);else if("End"===n)e.preventDefault(),wl(t,null,c,u,Sl);else if(1===n.length){const o=h.current,a=n.toLowerCase(),i=performance.now();o.keys.length>0&&(i-o.lastTime>500?(o.keys=[],o.repeating=!0,o.previousKeyMatched=!0):o.repeating&&a!==o.keys[0]&&(o.repeating=!1)),o.lastTime=i,o.keys.push(a);const l=r&&!o.repeating&&kl(r,o);o.previousKeyMatched&&(l||wl(t,r,!1,u,bl,o))?e.preventDefault():o.previousKeyMatched=!1}d&&d(e)},tabIndex:r?0:-1,...p,children:v})})),Cl=va,El={};function Al(e,t){const n=i.useRef(El);return n.current===El&&(n.current=e(t)),n}const Pl=[];class Tl{static create(){return new Tl}currentId=null;start(e,t){this.clear(),this.currentId=setTimeout((()=>{this.currentId=null,t()}),e)}clear=()=>{null!==this.currentId&&(clearTimeout(this.currentId),this.currentId=null)};disposeEffect=()=>this.clear}function _l(){const e=Al(Tl.create).current;var t;return t=e.disposeEffect,i.useEffect(t,Pl),e}function Rl(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(-1!==t.indexOf(r))continue;n[r]=e[r]}return n}function zl(e,t){return zl=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},zl(e,t)}function Ol(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,zl(e,t)}var Ml=o(961);const Nl=i.createContext(null);var Fl="unmounted",$l="exited",Ll="entering",jl="entered",Il="exiting",Dl=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var o,a=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o=$l,r.appearStatus=Ll):o=jl:o=t.unmountOnExit||t.mountOnEnter?Fl:$l,r.state={status:o},r.nextCallback=null,r}Ol(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===Fl?{status:$l}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==Ll&&n!==jl&&(t=Ll):n!==Ll&&n!==jl||(t=Il)}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),t===Ll){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:Ml.findDOMNode(this);n&&function(e){e.scrollTop}(n)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===$l&&this.setState({status:Fl})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,o=this.props.nodeRef?[r]:[Ml.findDOMNode(this),r],a=o[0],i=o[1],l=this.getTimeouts(),s=r?l.appear:l.enter;e||n?(this.props.onEnter(a,i),this.safeSetState({status:Ll},(function(){t.props.onEntering(a,i),t.onTransitionEnd(s,(function(){t.safeSetState({status:jl},(function(){t.props.onEntered(a,i)}))}))}))):this.safeSetState({status:jl},(function(){t.props.onEntered(a)}))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:Ml.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:Il},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:$l},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:$l},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:Ml.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],a=o[0],i=o[1];this.props.addEndListener(a,i)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if(e===Fl)return null;var t=this.props,n=t.children,r=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,Rl(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return i.createElement(Nl.Provider,{value:null},"function"==typeof n?n(e,r):i.cloneElement(i.Children.only(n),r))},t}(i.Component);function Bl(){}Dl.contextType=Nl,Dl.propTypes={},Dl.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Bl,onEntering:Bl,onEntered:Bl,onExit:Bl,onExiting:Bl,onExited:Bl},Dl.UNMOUNTED=Fl,Dl.EXITED=$l,Dl.ENTERING=Ll,Dl.ENTERED=jl,Dl.EXITING=Il;const Vl=Dl;function Wl(){const e=Wa(ua);return e[ca]||e}const Hl=e=>e.scrollTop;function Ul(e,t){const{timeout:n,easing:r,style:o={}}=e;return{duration:o.transitionDuration??("number"==typeof n?n:n[t.mode]||0),easing:o.transitionTimingFunction??("object"==typeof r?r[t.mode]:r),delay:o.transitionDelay}}function ql(e){return`scale(${e}, ${e**2})`}const Kl={entering:{opacity:1,transform:ql(1)},entered:{opacity:1,transform:"none"}},Ql="undefined"!=typeof navigator&&/^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent)&&/(os |version\/)15(.|_)4/i.test(navigator.userAgent),Gl=i.forwardRef((function(e,t){const{addEndListener:n,appear:r=!0,children:o,easing:l,in:s,onEnter:u,onEntered:c,onEntering:d,onExit:f,onExited:p,onExiting:m,style:h,timeout:g="auto",TransitionComponent:y=Vl,...v}=e,b=_l(),S=i.useRef(),k=Wl(),w=i.useRef(null),x=Xa(w,sl(o),t),C=e=>t=>{if(e){const n=w.current;void 0===t?e(n):e(n,t)}},E=C(d),A=C(((e,t)=>{Hl(e);const{duration:n,delay:r,easing:o}=Ul({style:h,timeout:g,easing:l},{mode:"enter"});let a;"auto"===g?(a=k.transitions.getAutoHeightDuration(e.clientHeight),S.current=a):a=n,e.style.transition=[k.transitions.create("opacity",{duration:a,delay:r}),k.transitions.create("transform",{duration:Ql?a:.666*a,delay:r,easing:o})].join(","),u&&u(e,t)})),P=C(c),T=C(m),_=C((e=>{const{duration:t,delay:n,easing:r}=Ul({style:h,timeout:g,easing:l},{mode:"exit"});let o;"auto"===g?(o=k.transitions.getAutoHeightDuration(e.clientHeight),S.current=o):o=t,e.style.transition=[k.transitions.create("opacity",{duration:o,delay:n}),k.transitions.create("transform",{duration:Ql?o:.666*o,delay:Ql?n:n||.333*o,easing:r})].join(","),e.style.opacity=0,e.style.transform=ql(.75),f&&f(e)})),R=C(p);return(0,a.jsx)(y,{appear:r,in:s,nodeRef:w,onEnter:A,onEntered:P,onEntering:E,onExit:_,onExited:R,onExiting:T,addEndListener:e=>{"auto"===g&&b.start(S.current||0,e),n&&n(w.current,e)},timeout:"auto"===g?null:g,...v,children:(e,{ownerState:t,...n})=>i.cloneElement(o,{style:{opacity:0,transform:ql(.75),visibility:"exited"!==e||s?void 0:"hidden",...Kl[e],...h,...o.props.style},ref:x,...n})})}));Gl&&(Gl.muiSupportAuto=!0);const Xl=Gl,Yl=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'].join(",");function Zl(e){const t=[],n=[];return Array.from(e.querySelectorAll(Yl)).forEach(((e,r)=>{const o=function(e){const t=parseInt(e.getAttribute("tabindex")||"",10);return Number.isNaN(t)?"true"===e.contentEditable||("AUDIO"===e.nodeName||"VIDEO"===e.nodeName||"DETAILS"===e.nodeName)&&null===e.getAttribute("tabindex")?0:e.tabIndex:t}(e);-1!==o&&function(e){return!(e.disabled||"INPUT"===e.tagName&&"hidden"===e.type||function(e){if("INPUT"!==e.tagName||"radio"!==e.type)return!1;if(!e.name)return!1;const t=t=>e.ownerDocument.querySelector(`input[type="radio"]${t}`);let n=t(`[name="${e.name}"]:checked`);return n||(n=t(`[name="${e.name}"]`)),n!==e}(e))}(e)&&(0===o?t.push(e):n.push({documentOrder:r,tabIndex:o,node:e}))})),n.sort(((e,t)=>e.tabIndex===t.tabIndex?e.documentOrder-t.documentOrder:e.tabIndex-t.tabIndex)).map((e=>e.node)).concat(t)}function Jl(){return!0}const es=function(e){const{children:t,disableAutoFocus:n=!1,disableEnforceFocus:r=!1,disableRestoreFocus:o=!1,getTabbable:l=Zl,isEnabled:s=Jl,open:u}=e,c=i.useRef(!1),d=i.useRef(null),f=i.useRef(null),p=i.useRef(null),m=i.useRef(null),h=i.useRef(!1),g=i.useRef(null),y=ba(sl(t),g),v=i.useRef(null);i.useEffect((()=>{u&&g.current&&(h.current=!n)}),[n,u]),i.useEffect((()=>{if(!u||!g.current)return;const e=wa(g.current);return g.current.contains(e.activeElement)||(g.current.hasAttribute("tabIndex")||g.current.setAttribute("tabIndex","-1"),h.current&&g.current.focus()),()=>{o||(p.current&&p.current.focus&&(c.current=!0,p.current.focus()),p.current=null)}}),[u]),i.useEffect((()=>{if(!u||!g.current)return;const e=wa(g.current),t=t=>{v.current=t,!r&&s()&&"Tab"===t.key&&e.activeElement===g.current&&t.shiftKey&&(c.current=!0,f.current&&f.current.focus())},n=()=>{const t=g.current;if(null===t)return;if(!e.hasFocus()||!s()||c.current)return void(c.current=!1);if(t.contains(e.activeElement))return;if(r&&e.activeElement!==d.current&&e.activeElement!==f.current)return;if(e.activeElement!==m.current)m.current=null;else if(null!==m.current)return;if(!h.current)return;let n=[];if(e.activeElement!==d.current&&e.activeElement!==f.current||(n=l(g.current)),n.length>0){const e=Boolean(v.current?.shiftKey&&"Tab"===v.current?.key),t=n[0],r=n[n.length-1];"string"!=typeof t&&"string"!=typeof r&&(e?r.focus():t.focus())}else t.focus()};e.addEventListener("focusin",n),e.addEventListener("keydown",t,!0);const o=setInterval((()=>{e.activeElement&&"BODY"===e.activeElement.tagName&&n()}),50);return()=>{clearInterval(o),e.removeEventListener("focusin",n),e.removeEventListener("keydown",t,!0)}}),[n,r,o,s,u,l]);const b=e=>{null===p.current&&(p.current=e.relatedTarget),h.current=!0};return(0,a.jsxs)(i.Fragment,{children:[(0,a.jsx)("div",{tabIndex:u?0:-1,onFocus:b,ref:d,"data-testid":"sentinelStart"}),i.cloneElement(t,{ref:y,onFocus:e=>{null===p.current&&(p.current=e.relatedTarget),h.current=!0,m.current=e.target;const n=t.props.onFocus;n&&n(e)}}),(0,a.jsx)("div",{tabIndex:u?0:-1,onFocus:b,ref:f,"data-testid":"sentinelEnd"})]})};function ts(e,t){"function"==typeof e?e(t):e&&(e.current=t)}const ns=i.forwardRef((function(e,t){const{children:n,container:r,disablePortal:o=!1}=e,[a,l]=i.useState(null),s=ba(i.isValidElement(n)?sl(n):null,t);if(Sa((()=>{o||l(function(e){return"function"==typeof e?e():e}(r)||document.body)}),[r,o]),Sa((()=>{if(a&&!o)return ts(t,a),()=>{ts(t,null)}}),[t,a,o]),o){if(i.isValidElement(n)){const e={ref:s};return i.cloneElement(n,e)}return n}return a?Ml.createPortal(n,a):a})),rs={entering:{opacity:1},entered:{opacity:1}},os=i.forwardRef((function(e,t){const n=Wl(),r={enter:n.transitions.duration.enteringScreen,exit:n.transitions.duration.leavingScreen},{addEndListener:o,appear:l=!0,children:s,easing:u,in:c,onEnter:d,onEntered:f,onEntering:p,onExit:m,onExited:h,onExiting:g,style:y,timeout:v=r,TransitionComponent:b=Vl,...S}=e,k=i.useRef(null),w=Xa(k,sl(s),t),x=e=>t=>{if(e){const n=k.current;void 0===t?e(n):e(n,t)}},C=x(p),E=x(((e,t)=>{Hl(e);const r=Ul({style:y,timeout:v,easing:u},{mode:"enter"});e.style.webkitTransition=n.transitions.create("opacity",r),e.style.transition=n.transitions.create("opacity",r),d&&d(e,t)})),A=x(f),P=x(g),T=x((e=>{const t=Ul({style:y,timeout:v,easing:u},{mode:"exit"});e.style.webkitTransition=n.transitions.create("opacity",t),e.style.transition=n.transitions.create("opacity",t),m&&m(e)})),_=x(h);return(0,a.jsx)(b,{appear:l,in:c,nodeRef:k,onEnter:E,onEntered:A,onEntering:C,onExit:T,onExited:_,onExiting:P,addEndListener:e=>{o&&o(k.current,e)},timeout:v,...S,children:(e,{ownerState:t,...n})=>i.cloneElement(s,{style:{opacity:0,visibility:"exited"!==e||c?void 0:"hidden",...rs[e],...y,...s.props.style},ref:w,...n})})})),as=os;function is(e){return ri("MuiBackdrop",e)}oi("MuiBackdrop",["root","invisible"]);const ls=pa("div",{name:"MuiBackdrop",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.invisible&&t.invisible]}})({position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent",variants:[{props:{invisible:!0},style:{backgroundColor:"transparent"}}]}),ss=i.forwardRef((function(e,t){const n=ya({props:e,name:"MuiBackdrop"}),{children:r,className:o,component:i="div",invisible:l=!1,open:s,components:u={},componentsProps:c={},slotProps:d={},slots:f={},TransitionComponent:p,transitionDuration:m,...h}=n,g={...n,component:i,invisible:l},y=(e=>{const{classes:t,invisible:n}=e;return Ce({root:["root",n&&"invisible"]},is,t)})(g),v={slots:{transition:p,root:u.Root,...f},slotProps:{...c,...d}},[b,S]=ji("root",{elementType:ls,externalForwardedProps:v,className:xe(y.root,o),ownerState:g}),[k,w]=ji("transition",{elementType:as,externalForwardedProps:v,ownerState:g});return(0,a.jsx)(k,{in:s,timeout:m,...h,...w,children:(0,a.jsx)(b,{"aria-hidden":!0,...S,classes:y,ref:t,children:r})})}));function us(...e){return e.reduce(((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)}),(()=>{}))}function cs(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function ds(e){return parseInt(xa(e).getComputedStyle(e).paddingRight,10)||0}function fs(e,t,n,r,o){const a=[t,n,...r];[].forEach.call(e.children,(e=>{const t=!a.includes(e),n=!function(e){const t=["TEMPLATE","SCRIPT","STYLE","LINK","MAP","META","NOSCRIPT","PICTURE","COL","COLGROUP","PARAM","SLOT","SOURCE","TRACK"].includes(e.tagName),n="INPUT"===e.tagName&&"hidden"===e.getAttribute("type");return t||n}(e);t&&n&&cs(e,o)}))}function ps(e,t){let n=-1;return e.some(((e,r)=>!!t(e)&&(n=r,!0))),n}const ms=()=>{},hs=new class{constructor(){this.modals=[],this.containers=[]}add(e,t){let n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&cs(e.modalRef,!1);const r=function(e){const t=[];return[].forEach.call(e.children,(e=>{"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);fs(t,e.mount,e.modalRef,r,!0);const o=ps(this.containers,(e=>e.container===t));return-1!==o?(this.containers[o].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblings:r}),n)}mount(e,t){const n=ps(this.containers,(t=>t.modals.includes(e))),r=this.containers[n];r.restore||(r.restore=function(e,t){const n=[],r=e.container;if(!t.disableScrollLock){if(function(e){const t=wa(e);return t.body===e?xa(e).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(r)){const e=gl(xa(r));n.push({value:r.style.paddingRight,property:"padding-right",el:r}),r.style.paddingRight=`${ds(r)+e}px`;const t=wa(r).querySelectorAll(".mui-fixed");[].forEach.call(t,(t=>{n.push({value:t.style.paddingRight,property:"padding-right",el:t}),t.style.paddingRight=`${ds(t)+e}px`}))}let e;if(r.parentNode instanceof DocumentFragment)e=wa(r).body;else{const t=r.parentElement,n=xa(r);e="HTML"===t?.nodeName&&"scroll"===n.getComputedStyle(t).overflowY?t:r}n.push({value:e.style.overflow,property:"overflow",el:e},{value:e.style.overflowX,property:"overflow-x",el:e},{value:e.style.overflowY,property:"overflow-y",el:e}),e.style.overflow="hidden"}return()=>{n.forEach((({value:e,el:t,property:n})=>{e?t.style.setProperty(n,e):t.style.removeProperty(n)}))}}(r,t))}remove(e,t=!0){const n=this.modals.indexOf(e);if(-1===n)return n;const r=ps(this.containers,(t=>t.modals.includes(e))),o=this.containers[r];if(o.modals.splice(o.modals.indexOf(e),1),this.modals.splice(n,1),0===o.modals.length)o.restore&&o.restore(),e.modalRef&&cs(e.modalRef,t),fs(o.container,e.mount,e.modalRef,o.hiddenSiblings,!1),this.containers.splice(r,1);else{const e=o.modals[o.modals.length-1];e.modalRef&&cs(e.modalRef,!1)}return n}isTopModal(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}};function gs(e){return ri("MuiModal",e)}oi("MuiModal",["root","hidden","backdrop"]);const ys=pa("div",{name:"MuiModal",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.open&&n.exited&&t.hidden]}})(Qa((({theme:e})=>({position:"fixed",zIndex:(e.vars||e).zIndex.modal,right:0,bottom:0,top:0,left:0,variants:[{props:({ownerState:e})=>!e.open&&e.exited,style:{visibility:"hidden"}}]})))),vs=pa(ss,{name:"MuiModal",slot:"Backdrop"})({zIndex:-1}),bs=i.forwardRef((function(e,t){const n=ya({name:"MuiModal",props:e}),{BackdropComponent:r=vs,BackdropProps:o,classes:l,className:s,closeAfterTransition:u=!1,children:c,container:d,component:f,components:p={},componentsProps:m={},disableAutoFocus:h=!1,disableEnforceFocus:g=!1,disableEscapeKeyDown:y=!1,disablePortal:v=!1,disableRestoreFocus:b=!1,disableScrollLock:S=!1,hideBackdrop:k=!1,keepMounted:w=!1,onClose:x,onTransitionEnter:C,onTransitionExited:E,open:A,slotProps:P={},slots:T={},theme:_,...R}=n,z={...n,closeAfterTransition:u,disableAutoFocus:h,disableEnforceFocus:g,disableEscapeKeyDown:y,disablePortal:v,disableRestoreFocus:b,disableScrollLock:S,hideBackdrop:k,keepMounted:w},{getRootProps:O,getBackdropProps:M,getTransitionProps:N,portalRef:F,isTopModal:$,exited:L,hasTransition:j}=function(e){const{container:t,disableEscapeKeyDown:n=!1,disableScrollLock:r=!1,closeAfterTransition:o=!1,onTransitionEnter:a,onTransitionExited:l,children:s,onClose:u,open:c,rootRef:d}=e,f=i.useRef({}),p=i.useRef(null),m=i.useRef(null),h=ba(m,d),[g,y]=i.useState(!c),v=function(e){return!!e&&e.props.hasOwnProperty("in")}(s);let b=!0;"false"!==e["aria-hidden"]&&!1!==e["aria-hidden"]||(b=!1);const S=()=>(f.current.modalRef=m.current,f.current.mount=p.current,f.current),k=()=>{hs.mount(S(),{disableScrollLock:r}),m.current&&(m.current.scrollTop=0)},w=ka((()=>{const e=function(e){return"function"==typeof e?e():e}(t)||wa(p.current).body;hs.add(S(),e),m.current&&k()})),x=()=>hs.isTopModal(S()),C=ka((e=>{p.current=e,e&&(c&&x()?k():m.current&&cs(m.current,b))})),E=i.useCallback((()=>{hs.remove(S(),b)}),[b]);i.useEffect((()=>()=>{E()}),[E]),i.useEffect((()=>{c?w():v&&o||E()}),[c,E,v,o,w]);const A=e=>t=>{e.onKeyDown?.(t),"Escape"===t.key&&229!==t.which&&x()&&(n||(t.stopPropagation(),u&&u(t,"escapeKeyDown")))},P=e=>t=>{e.onClick?.(t),t.target===t.currentTarget&&u&&u(t,"backdropClick")};return{getRootProps:(t={})=>{const n=Fi(e);delete n.onTransitionEnter,delete n.onTransitionExited;const r={...n,...t};return{role:"presentation",...r,onKeyDown:A(r),ref:h}},getBackdropProps:(e={})=>{const t=e;return{"aria-hidden":!0,...t,onClick:P(t),open:c}},getTransitionProps:()=>({onEnter:us((()=>{y(!1),a&&a()}),s?.props.onEnter??ms),onExited:us((()=>{y(!0),l&&l(),o&&E()}),s?.props.onExited??ms)}),rootRef:h,portalRef:C,isTopModal:x,exited:g,hasTransition:v}}({...z,rootRef:t}),I={...z,exited:L},D=(e=>{const{open:t,exited:n,classes:r}=e;return Ce({root:["root",!t&&n&&"hidden"],backdrop:["backdrop"]},gs,r)})(I),B={};if(void 0===c.props.tabIndex&&(B.tabIndex="-1"),j){const{onEnter:e,onExited:t}=N();B.onEnter=e,B.onExited=t}const V={slots:{root:p.Root,backdrop:p.Backdrop,...T},slotProps:{...m,...P}},[W,H]=ji("root",{ref:t,elementType:ys,externalForwardedProps:{...V,...R,component:f},getSlotProps:O,ownerState:I,className:xe(s,D?.root,!I.open&&I.exited&&D?.hidden)}),[U,q]=ji("backdrop",{ref:o?.ref,elementType:r,externalForwardedProps:V,shouldForwardComponentProp:!0,additionalProps:o,getSlotProps:e=>M({...e,onClick:t=>{e?.onClick&&e.onClick(t)}}),className:xe(o?.className,D?.backdrop),ownerState:I});return w||A||j&&!L?(0,a.jsx)(ns,{ref:F,container:d,disablePortal:v,children:(0,a.jsxs)(W,{...H,children:[!k&&r?(0,a.jsx)(U,{...q}):null,(0,a.jsx)(es,{disableEnforceFocus:g,disableAutoFocus:h,disableRestoreFocus:b,isEnabled:$,open:A,children:i.cloneElement(c,B)})]})}):null})),Ss=bs;function ks(e){return ri("MuiPaper",e)}oi("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const ws=pa("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})(Qa((({theme:e})=>({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow"),variants:[{props:({ownerState:e})=>!e.square,style:{borderRadius:e.shape.borderRadius}},{props:{variant:"outlined"},style:{border:`1px solid ${(e.vars||e).palette.divider}`}},{props:{variant:"elevation"},style:{boxShadow:"var(--Paper-shadow)",backgroundImage:"var(--Paper-overlay)"}}]})))),xs=i.forwardRef((function(e,t){const n=ya({props:e,name:"MuiPaper"}),r=Wl(),{className:o,component:i="div",elevation:l=1,square:s=!1,variant:u="elevation",...c}=n,d={...n,component:i,elevation:l,square:s,variant:u},f=(e=>{const{square:t,elevation:n,variant:r,classes:o}=e;return Ce({root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]},ks,o)})(d);return(0,a.jsx)(ws,{as:i,ownerState:d,className:xe(f.root,o),ref:t,...c,style:{..."elevation"===u&&{"--Paper-shadow":(r.vars||r).shadows[l],...r.vars&&{"--Paper-overlay":r.vars.overlays?.[l]},...!r.vars&&"dark"===r.palette.mode&&{"--Paper-overlay":`linear-gradient(${jr("#fff",Go(l))}, ${jr("#fff",Go(l))})`}},...c.style}})}));function Cs(e){return ri("MuiPopover",e)}function Es(e,t){if(!e)return t;function n(e,t){const n={};return Object.keys(t).forEach((r=>{(function(e,t){const n=e.charCodeAt(2);return"o"===e[0]&&"n"===e[1]&&n>=65&&n<=90&&"function"==typeof t})(r,t[r])&&"function"==typeof e[r]&&(n[r]=(...n)=>{e[r](...n),t[r](...n)})})),n}if("function"==typeof e||"function"==typeof t)return r=>{const o="function"==typeof t?t(r):t,a="function"==typeof e?e({...r,...o}):e,i=xe(r?.className,o?.className,a?.className),l=n(a,o);return{...o,...a,...l,...!!i&&{className:i},...o?.style&&a?.style&&{style:{...o.style,...a.style}},...o?.sx&&a?.sx&&{sx:[...Array.isArray(o.sx)?o.sx:[o.sx],...Array.isArray(a.sx)?a.sx:[a.sx]]}}};const r=t,o=n(e,r),a=xe(r?.className,e?.className);return{...t,...e,...o,...!!a&&{className:a},...r?.style&&e?.style&&{style:{...r.style,...e.style}},...r?.sx&&e?.sx&&{sx:[...Array.isArray(r.sx)?r.sx:[r.sx],...Array.isArray(e.sx)?e.sx:[e.sx]]}}}function As(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function Ps(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function Ts(e){return[e.horizontal,e.vertical].map((e=>"number"==typeof e?`${e}px`:e)).join(" ")}function _s(e){return"function"==typeof e?e():e}oi("MuiPopover",["root","paper"]);const Rs=pa(Ss,{name:"MuiPopover",slot:"Root"})({}),zs=pa(xs,{name:"MuiPopover",slot:"Paper"})({position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}),Os=i.forwardRef((function(e,t){const n=ya({props:e,name:"MuiPopover"}),{action:r,anchorEl:o,anchorOrigin:l={vertical:"top",horizontal:"left"},anchorPosition:s,anchorReference:u="anchorEl",children:c,className:d,container:f,elevation:p=8,marginThreshold:m=16,open:h,PaperProps:g={},slots:y={},slotProps:v={},transformOrigin:b={vertical:"top",horizontal:"left"},TransitionComponent:S,transitionDuration:k="auto",TransitionProps:w={},disableScrollLock:x=!1,...C}=n,E=i.useRef(),A={...n,anchorOrigin:l,anchorReference:u,elevation:p,marginThreshold:m,transformOrigin:b,TransitionComponent:S,transitionDuration:k,TransitionProps:w},P=(e=>{const{classes:t}=e;return Ce({root:["root"],paper:["paper"]},Cs,t)})(A),T=i.useCallback((()=>{if("anchorPosition"===u)return s;const e=_s(o),t=(e&&1===e.nodeType?e:ul(E.current).body).getBoundingClientRect();return{top:t.top+As(t,l.vertical),left:t.left+Ps(t,l.horizontal)}}),[o,l.horizontal,l.vertical,s,u]),_=i.useCallback((e=>({vertical:As(e,b.vertical),horizontal:Ps(e,b.horizontal)})),[b.horizontal,b.vertical]),R=i.useCallback((e=>{const t={width:e.offsetWidth,height:e.offsetHeight},n=_(t);if("none"===u)return{top:null,left:null,transformOrigin:Ts(n)};const r=T();let a=r.top-n.vertical,i=r.left-n.horizontal;const l=a+t.height,s=i+t.width,c=vl(_s(o)),d=c.innerHeight-m,f=c.innerWidth-m;if(null!==m&&a<m){const e=a-m;a-=e,n.vertical+=e}else if(null!==m&&l>d){const e=l-d;a-=e,n.vertical+=e}if(null!==m&&i<m){const e=i-m;i-=e,n.horizontal+=e}else if(s>f){const e=s-f;i-=e,n.horizontal+=e}return{top:`${Math.round(a)}px`,left:`${Math.round(i)}px`,transformOrigin:Ts(n)}}),[o,u,T,_,m]),[z,O]=i.useState(h),M=i.useCallback((()=>{const e=E.current;if(!e)return;const t=R(e);null!==t.top&&e.style.setProperty("top",t.top),null!==t.left&&(e.style.left=t.left),e.style.transformOrigin=t.transformOrigin,O(!0)}),[R]);i.useEffect((()=>(x&&window.addEventListener("scroll",M),()=>window.removeEventListener("scroll",M))),[o,x,M]),i.useEffect((()=>{h&&M()})),i.useImperativeHandle(r,(()=>h?{updatePosition:()=>{M()}}:null),[h,M]),i.useEffect((()=>{if(!h)return;const e=Cl((()=>{M()})),t=vl(_s(o));return t.addEventListener("resize",e),()=>{e.clear(),t.removeEventListener("resize",e)}}),[o,h,M]);let N=k;const F={slots:{transition:S,...y},slotProps:{transition:w,paper:g,...v}},[$,L]=ji("transition",{elementType:Xl,externalForwardedProps:F,ownerState:A,getSlotProps:e=>({...e,onEntering:(t,n)=>{e.onEntering?.(t,n),M()},onExited:t=>{e.onExited?.(t),O(!1)}}),additionalProps:{appear:!0,in:h}});"auto"!==k||$.muiSupportAuto||(N=void 0);const j=f||(o?ul(_s(o)).body:void 0),[I,{slots:D,slotProps:B,...V}]=ji("root",{ref:t,elementType:Rs,externalForwardedProps:{...F,...C},shouldForwardComponentProp:!0,additionalProps:{slots:{backdrop:y.backdrop},slotProps:{backdrop:Es("function"==typeof v.backdrop?v.backdrop(A):v.backdrop,{invisible:!0})},container:j,open:h},ownerState:A,className:xe(P.root,d)}),[W,H]=ji("paper",{ref:E,className:P.paper,elementType:zs,externalForwardedProps:F,shouldForwardComponentProp:!0,additionalProps:{elevation:p,style:z?void 0:{opacity:0}},ownerState:A});return(0,a.jsx)(I,{...V,...!_a(I)&&{slots:D,slotProps:B,disableScrollLock:x},children:(0,a.jsx)($,{...L,timeout:N,children:(0,a.jsx)(W,{...H,children:c})})})}));function Ms(e){return ri("MuiMenu",e)}oi("MuiMenu",["root","paper","list"]);const Ns={vertical:"top",horizontal:"right"},Fs={vertical:"top",horizontal:"left"},$s=pa(Os,{shouldForwardProp:e=>fa(e)||"classes"===e,name:"MuiMenu",slot:"Root"})({}),Ls=pa(zs,{name:"MuiMenu",slot:"Paper"})({maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}),js=pa(xl,{name:"MuiMenu",slot:"List"})({outline:0}),Is=i.forwardRef((function(e,t){const n=ya({props:e,name:"MuiMenu"}),{autoFocus:r=!0,children:o,className:l,disableAutoFocusItem:s=!1,MenuListProps:u={},onClose:c,open:d,PaperProps:f={},PopoverClasses:p,transitionDuration:m="auto",TransitionProps:{onEntering:h,...g}={},variant:y="selectedMenu",slots:v={},slotProps:b={},...S}=n,k=i.useContext(cl)??!1,w={...n,autoFocus:r,disableAutoFocusItem:s,MenuListProps:u,onEntering:h,PaperProps:f,transitionDuration:m,TransitionProps:g,variant:y},x=(e=>{const{classes:t}=e;return Ce({root:["root"],paper:["paper"],list:["list"]},Ms,t)})(w),C=r&&!s&&d,E=i.useRef(null);let A=-1;i.Children.map(o,((e,t)=>{i.isValidElement(e)&&(e.props.disabled||("selectedMenu"===y&&e.props.selected||-1===A)&&(A=t))}));const P={slots:v,slotProps:{list:u,transition:g,paper:f,...b}},T=function(e){const{elementType:t,externalSlotProps:n,ownerState:r,skipResolvingSlotProps:o=!1,...a}=e,i=o?{}:Ni(n,r),{props:l,internalRef:s}=Li({...a,externalSlotProps:i}),u=ba(s,i?.ref,e.additionalProps?.ref);return Mi(t,{...l,ref:u},r)}({elementType:v.root,externalSlotProps:b.root,ownerState:w,className:[x.root,l]}),[_,R]=ji("paper",{className:x.paper,elementType:Ls,externalForwardedProps:P,shouldForwardComponentProp:!0,ownerState:w}),[z,O]=ji("list",{className:xe(x.list,u.className),elementType:js,shouldForwardComponentProp:!0,externalForwardedProps:P,getSlotProps:e=>({...e,onKeyDown:t=>{(e=>{"Tab"===e.key&&(e.preventDefault(),c&&c(e,"tabKeyDown"))})(t),e.onKeyDown?.(t)}}),ownerState:w}),M="function"==typeof P.slotProps.transition?P.slotProps.transition(w):P.slotProps.transition;return(0,a.jsx)($s,{onClose:c,anchorOrigin:{vertical:"bottom",horizontal:k?"right":"left"},transformOrigin:k?Ns:Fs,slots:{root:v.root,paper:_,backdrop:v.backdrop,...v.transition&&{transition:v.transition}},slotProps:{root:T,paper:R,backdrop:"function"==typeof b.backdrop?b.backdrop(w):b.backdrop,transition:{...M,onEntering:(...e)=>{((e,t)=>{E.current&&E.current.adjustStyleForScrollbar(e,{direction:k?"rtl":"ltr"}),h&&h(e,t)})(...e),M?.onEntering?.(...e)}}},open:d,ref:t,transitionDuration:m,ownerState:w,...S,classes:p,children:(0,a.jsx)(z,{actions:E,autoFocus:r&&(-1===A||s),autoFocusItem:C,variant:y,...O,children:o})})}));function Ds(e){return ri("MuiNativeSelect",e)}const Bs=oi("MuiNativeSelect",["root","select","multiple","filled","outlined","standard","disabled","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]),Vs=pa("select")((({theme:e})=>({MozAppearance:"none",WebkitAppearance:"none",userSelect:"none",borderRadius:0,cursor:"pointer","&:focus":{borderRadius:0},[`&.${Bs.disabled}`]:{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:(e.vars||e).palette.background.paper},variants:[{props:({ownerState:e})=>"filled"!==e.variant&&"outlined"!==e.variant,style:{"&&&":{paddingRight:24,minWidth:16}}},{props:{variant:"filled"},style:{"&&&":{paddingRight:32}}},{props:{variant:"outlined"},style:{borderRadius:(e.vars||e).shape.borderRadius,"&:focus":{borderRadius:(e.vars||e).shape.borderRadius},"&&&":{paddingRight:32}}}]}))),Ws=pa(Vs,{name:"MuiNativeSelect",slot:"Select",shouldForwardProp:fa,overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.select,t[n.variant],n.error&&t.error,{[`&.${Bs.multiple}`]:t.multiple}]}})({}),Hs=pa("svg")((({theme:e})=>({position:"absolute",right:0,top:"calc(50% - .5em)",pointerEvents:"none",color:(e.vars||e).palette.action.active,[`&.${Bs.disabled}`]:{color:(e.vars||e).palette.action.disabled},variants:[{props:({ownerState:e})=>e.open,style:{transform:"rotate(180deg)"}},{props:{variant:"filled"},style:{right:7}},{props:{variant:"outlined"},style:{right:7}}]}))),Us=pa(Hs,{name:"MuiNativeSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${Ga(n.variant)}`],n.open&&t.iconOpen]}})({}),qs=i.forwardRef((function(e,t){const{className:n,disabled:r,error:o,IconComponent:l,inputRef:s,variant:u="standard",...c}=e,d={...e,disabled:r,variant:u,error:o},f=(e=>{const{classes:t,variant:n,disabled:r,multiple:o,open:a,error:i}=e;return Ce({select:["select",n,r&&"disabled",o&&"multiple",i&&"error"],icon:["icon",`icon${Ga(n)}`,a&&"iconOpen",r&&"disabled"]},Ds,t)})(d);return(0,a.jsxs)(i.Fragment,{children:[(0,a.jsx)(Ws,{ownerState:d,className:xe(f.select,n),disabled:r,ref:s||t,...c}),e.multiple?null:(0,a.jsx)(Us,{as:l,ownerState:d,className:f.icon})]})})),Ks=function(e){const{controlled:t,default:n,name:r,state:o="value"}=e,{current:a}=i.useRef(void 0!==t),[l,s]=i.useState(n);return[a?t:l,i.useCallback((e=>{a||s(e)}),[])]};function Qs(e){return ri("MuiSelect",e)}const Gs=oi("MuiSelect",["root","select","multiple","filled","outlined","standard","disabled","focused","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]);var Xs;const Ys=pa(Vs,{name:"MuiSelect",slot:"Select",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`&.${Gs.select}`]:t.select},{[`&.${Gs.select}`]:t[n.variant]},{[`&.${Gs.error}`]:t.error},{[`&.${Gs.multiple}`]:t.multiple}]}})({[`&.${Gs.select}`]:{height:"auto",minHeight:"1.4375em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}}),Zs=pa(Hs,{name:"MuiSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${Ga(n.variant)}`],n.open&&t.iconOpen]}})({}),Js=pa("input",{shouldForwardProp:e=>da(e)&&"classes"!==e,name:"MuiSelect",slot:"NativeInput"})({bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%",boxSizing:"border-box"});function eu(e,t){return"object"==typeof t&&null!==t?e===t:String(e)===String(t)}function tu(e){return null==e||"string"==typeof e&&!e.trim()}const nu=i.forwardRef((function(e,t){const{"aria-describedby":n,"aria-label":r,autoFocus:o,autoWidth:l,children:s,className:u,defaultOpen:c,defaultValue:d,disabled:f,displayEmpty:p,error:m=!1,IconComponent:h,inputRef:g,labelId:y,MenuProps:v={},multiple:b,name:S,onBlur:k,onChange:w,onClose:x,onFocus:C,onOpen:E,open:A,readOnly:P,renderValue:T,required:_,SelectDisplayProps:R={},tabIndex:z,type:O,value:M,variant:N="standard",...F}=e,[$,L]=Ks({controlled:M,default:d,name:"Select"}),[j,I]=Ks({controlled:A,default:c,name:"Select"}),D=i.useRef(null),B=i.useRef(null),[V,W]=i.useState(null),{current:H}=i.useRef(null!=A),[U,q]=i.useState(),K=Xa(t,g),Q=i.useCallback((e=>{B.current=e,e&&W(e)}),[]),G=V?.parentNode;i.useImperativeHandle(K,(()=>({focus:()=>{B.current.focus()},node:D.current,value:$})),[$]),i.useEffect((()=>{c&&j&&V&&!H&&(q(l?null:G.clientWidth),B.current.focus())}),[V,l]),i.useEffect((()=>{o&&B.current.focus()}),[o]),i.useEffect((()=>{if(!y)return;const e=ul(B.current).getElementById(y);if(e){const t=()=>{getSelection().isCollapsed&&B.current.focus()};return e.addEventListener("click",t),()=>{e.removeEventListener("click",t)}}}),[y]);const X=(e,t)=>{e?E&&E(t):x&&x(t),H||(q(l?null:G.clientWidth),I(e))},Y=i.Children.toArray(s),Z=e=>t=>{let n;if(t.currentTarget.hasAttribute("tabindex")){if(b){n=Array.isArray($)?$.slice():[];const t=$.indexOf(e.props.value);-1===t?n.push(e.props.value):n.splice(t,1)}else n=e.props.value;if(e.props.onClick&&e.props.onClick(t),$!==n&&(L(n),w)){const r=t.nativeEvent||t,o=new r.constructor(r.type,r);Object.defineProperty(o,"target",{writable:!0,value:{value:n,name:S}}),w(o,e)}b||X(!1,t)}},J=null!==V&&j;let ee,te;delete F["aria-invalid"];const ne=[];let re=!1,oe=!1;(Ja({value:$})||p)&&(T?ee=T($):re=!0);const ae=Y.map((e=>{if(!i.isValidElement(e))return null;let t;if(b){if(!Array.isArray($))throw new Error(En(2));t=$.some((t=>eu(t,e.props.value))),t&&re&&ne.push(e.props.children)}else t=eu($,e.props.value),t&&re&&(te=e.props.children);return t&&(oe=!0),i.cloneElement(e,{"aria-selected":t?"true":"false",onClick:Z(e),onKeyUp:t=>{" "===t.key&&t.preventDefault(),e.props.onKeyUp&&e.props.onKeyUp(t)},role:"option",selected:t,value:void 0,"data-value":e.props.value})}));re&&(ee=b?0===ne.length?null:ne.reduce(((e,t,n)=>(e.push(t),n<ne.length-1&&e.push(", "),e)),[]):te);let ie,le=U;!l&&H&&V&&(le=G.clientWidth),ie=void 0!==z?z:f?null:0;const se=R.id||(S?`mui-component-select-${S}`:void 0),ue={...e,variant:N,value:$,open:J,error:m},ce=(e=>{const{classes:t,variant:n,disabled:r,multiple:o,open:a,error:i}=e;return Ce({select:["select",n,r&&"disabled",o&&"multiple",i&&"error"],icon:["icon",`icon${Ga(n)}`,a&&"iconOpen",r&&"disabled"],nativeInput:["nativeInput"]},Qs,t)})(ue),de={...v.PaperProps,...v.slotProps?.paper},fe=Pe();return(0,a.jsxs)(i.Fragment,{children:[(0,a.jsx)(Ys,{as:"div",ref:Q,tabIndex:ie,role:"combobox","aria-controls":J?fe:void 0,"aria-disabled":f?"true":void 0,"aria-expanded":J?"true":"false","aria-haspopup":"listbox","aria-label":r,"aria-labelledby":[y,se].filter(Boolean).join(" ")||void 0,"aria-describedby":n,"aria-required":_?"true":void 0,"aria-invalid":m?"true":void 0,onKeyDown:e=>{P||[" ","ArrowUp","ArrowDown","Enter"].includes(e.key)&&(e.preventDefault(),X(!0,e))},onMouseDown:f||P?null:e=>{0===e.button&&(e.preventDefault(),B.current.focus(),X(!0,e))},onBlur:e=>{!J&&k&&(Object.defineProperty(e,"target",{writable:!0,value:{value:$,name:S}}),k(e))},onFocus:C,...R,ownerState:ue,className:xe(R.className,ce.select,u),id:se,children:tu(ee)?Xs||(Xs=(0,a.jsx)("span",{className:"notranslate","aria-hidden":!0,children:"​"})):ee}),(0,a.jsx)(Js,{"aria-invalid":m,value:Array.isArray($)?$.join(","):$,name:S,ref:D,"aria-hidden":!0,onChange:e=>{const t=Y.find((t=>t.props.value===e.target.value));void 0!==t&&(L(t.props.value),w&&w(e,t))},tabIndex:-1,disabled:f,className:ce.nativeInput,autoFocus:o,required:_,...F,ownerState:ue}),(0,a.jsx)(Zs,{as:h,className:ce.icon,ownerState:ue}),(0,a.jsx)(Is,{id:`menu-${S||""}`,anchorEl:G,open:J,onClose:e=>{X(!1,e)},anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"},...v,slotProps:{...v.slotProps,list:{"aria-labelledby":y,role:"listbox","aria-multiselectable":b?"true":void 0,disableListWrap:!0,id:fe,...v.MenuListProps},paper:{...de,style:{minWidth:le,...null!=de?de.style:null}}},children:ae})]})})),ru=nu;function ou(e){return ri("MuiSvgIcon",e)}oi("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);const au=pa("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${Ga(n.color)}`],t[`fontSize${Ga(n.fontSize)}`]]}})(Qa((({theme:e})=>({userSelect:"none",width:"1em",height:"1em",display:"inline-block",flexShrink:0,transition:e.transitions?.create?.("fill",{duration:(e.vars??e).transitions?.duration?.shorter}),variants:[{props:e=>!e.hasSvgAsChild,style:{fill:"currentColor"}},{props:{fontSize:"inherit"},style:{fontSize:"inherit"}},{props:{fontSize:"small"},style:{fontSize:e.typography?.pxToRem?.(20)||"1.25rem"}},{props:{fontSize:"medium"},style:{fontSize:e.typography?.pxToRem?.(24)||"1.5rem"}},{props:{fontSize:"large"},style:{fontSize:e.typography?.pxToRem?.(35)||"2.1875rem"}},...Object.entries((e.vars??e).palette).filter((([,e])=>e&&e.main)).map((([t])=>({props:{color:t},style:{color:(e.vars??e).palette?.[t]?.main}}))),{props:{color:"action"},style:{color:(e.vars??e).palette?.action?.active}},{props:{color:"disabled"},style:{color:(e.vars??e).palette?.action?.disabled}},{props:{color:"inherit"},style:{color:void 0}}]})))),iu=i.forwardRef((function(e,t){const n=ya({props:e,name:"MuiSvgIcon"}),{children:r,className:o,color:l="inherit",component:s="svg",fontSize:u="medium",htmlColor:c,inheritViewBox:d=!1,titleAccess:f,viewBox:p="0 0 24 24",...m}=n,h=i.isValidElement(r)&&"svg"===r.type,g={...n,color:l,component:s,fontSize:u,instanceFontSize:e.fontSize,inheritViewBox:d,viewBox:p,hasSvgAsChild:h},y={};d||(y.viewBox=p);const v=(e=>{const{color:t,fontSize:n,classes:r}=e;return Ce({root:["root","inherit"!==t&&`color${Ga(t)}`,`fontSize${Ga(n)}`]},ou,r)})(g);return(0,a.jsxs)(au,{as:s,className:xe(v.root,o),focusable:"false",color:c,"aria-hidden":!f||void 0,role:f?"img":void 0,ref:t,...y,...m,...h&&r.props,ownerState:g,children:[h?r.props.children:r,f?(0,a.jsx)("title",{children:f}):null]})}));iu.muiName="SvgIcon";const lu=iu,su=function(e){function t(t,n){return(0,a.jsx)(lu,{"data-testid":void 0,ref:n,...t,children:e})}return t.muiName=lu.muiName,i.memo(i.forwardRef(t))}((0,a.jsx)("path",{d:"M7 10l5 5 5-5z"})),uu={name:"MuiSelect",slot:"Root",shouldForwardProp:e=>fa(e)&&"variant"!==e},cu=pa(ki,uu)(""),du=pa(Wi,uu)(""),fu=pa(Pi,uu)(""),pu=i.forwardRef((function(e,t){const n=ya({name:"MuiSelect",props:e}),{autoWidth:r=!1,children:o,classes:l={},className:s,defaultOpen:u=!1,displayEmpty:c=!1,IconComponent:d=su,id:f,input:p,inputProps:m,label:h,labelId:g,MenuProps:y,multiple:v=!1,native:b=!1,onClose:S,onOpen:k,open:w,renderValue:x,SelectDisplayProps:C,variant:E="outlined",...A}=n,P=b?qs:ru,T=Ra({props:n,muiFormControl:Oa(),states:["variant","error"]}),_=T.variant||E,R={...n,variant:_,classes:l},z=(e=>{const{classes:t}=e,n=Ce({root:["root"]},Qs,t);return{...t,...n}})(R),{root:O,...M}=z,N=p||{standard:(0,a.jsx)(cu,{ownerState:R}),outlined:(0,a.jsx)(du,{label:h,ownerState:R}),filled:(0,a.jsx)(fu,{ownerState:R})}[_],F=Xa(t,sl(N));return(0,a.jsx)(i.Fragment,{children:i.cloneElement(N,{inputComponent:P,inputProps:{children:o,error:T.error,IconComponent:d,variant:_,type:void 0,multiple:v,...b?{id:f}:{autoWidth:r,defaultOpen:u,displayEmpty:c,labelId:g,MenuProps:y,onClose:S,onOpen:k,open:w,renderValue:x,SelectDisplayProps:{id:f,...C}},...m,classes:m?hn(M,m.classes):M,...p?p.props.inputProps:{}},...(v&&b||c)&&"outlined"===_?{notched:!0}:{},ref:F,className:xe(N.props.className,s,z.root),...!p&&{variant:_},...A})})}));pu.muiName="Select";const mu=pu;function hu(e){return ri("MuiTextField",e)}oi("MuiTextField",["root"]);const gu={standard:ki,filled:Pi,outlined:Wi},yu=pa(nl,{name:"MuiTextField",slot:"Root"})({}),vu=i.forwardRef((function(e,t){const n=ya({props:e,name:"MuiTextField"}),{autoComplete:r,autoFocus:o=!1,children:i,className:l,color:s="primary",defaultValue:u,disabled:c=!1,error:d=!1,FormHelperTextProps:f,fullWidth:p=!1,helperText:m,id:h,InputLabelProps:g,inputProps:y,InputProps:v,inputRef:b,label:S,maxRows:k,minRows:w,multiline:x=!1,name:C,onBlur:E,onChange:A,onFocus:P,placeholder:T,required:_=!1,rows:R,select:z=!1,SelectProps:O,slots:M={},slotProps:N={},type:F,value:$,variant:L="outlined",...j}=n,I={...n,autoFocus:o,color:s,disabled:c,error:d,fullWidth:p,multiline:x,required:_,select:z,variant:L},D=(e=>{const{classes:t}=e;return Ce({root:["root"]},hu,t)})(I),B=Pe(h),V=m&&B?`${B}-helper-text`:void 0,W=S&&B?`${B}-label`:void 0,H=gu[L],U={slots:M,slotProps:{input:v,inputLabel:g,htmlInput:y,formHelperText:f,select:O,...N}},q={},K=U.slotProps.inputLabel;"outlined"===L&&(K&&void 0!==K.shrink&&(q.notched=K.shrink),q.label=S),z&&(O&&O.native||(q.id=void 0),q["aria-describedby"]=void 0);const[Q,G]=ji("root",{elementType:yu,shouldForwardComponentProp:!0,externalForwardedProps:{...U,...j},ownerState:I,className:xe(D.root,l),ref:t,additionalProps:{disabled:c,error:d,fullWidth:p,required:_,color:s,variant:L}}),[X,Y]=ji("input",{elementType:H,externalForwardedProps:U,additionalProps:q,ownerState:I}),[Z,J]=ji("inputLabel",{elementType:Yi,externalForwardedProps:U,ownerState:I}),[ee,te]=ji("htmlInput",{elementType:"input",externalForwardedProps:U,ownerState:I}),[ne,re]=ji("formHelperText",{elementType:ll,externalForwardedProps:U,ownerState:I}),[oe,ae]=ji("select",{elementType:mu,externalForwardedProps:U,ownerState:I}),ie=(0,a.jsx)(X,{"aria-describedby":V,autoComplete:r,autoFocus:o,defaultValue:u,fullWidth:p,multiline:x,name:C,rows:R,maxRows:k,minRows:w,type:F,value:$,id:B,inputRef:b,onBlur:E,onChange:A,onFocus:P,placeholder:T,inputProps:te,slots:{input:M.htmlInput?ee:void 0},...Y});return(0,a.jsxs)(Q,{...G,children:[null!=S&&""!==S&&(0,a.jsx)(Z,{htmlFor:B,id:W,...J,children:S}),z?(0,a.jsx)(oe,{"aria-describedby":V,id:B,labelId:W,value:$,input:ie,...ae,children:i}):ie,m&&(0,a.jsx)(ne,{id:V,...re,children:m})]})})),bu=oi("MuiBox",["root"]),Su=sa(),ku=function(e={}){const{themeId:t,defaultTheme:n,defaultClassName:r="MuiBox-root",generateClassName:o}=e,l=un("div",{shouldForwardProp:e=>"theme"!==e&&"sx"!==e&&"as"!==e})(kr);return i.forwardRef((function(e,i){const s=Wa(n),{className:u,component:c="div",...d}=Ma(e);return(0,a.jsx)(l,{as:c,ref:i,className:xe(u,o?o(r):r),theme:t&&s[t]||s,...d})}))}({themeId:ca,defaultTheme:Su,defaultClassName:bu.root,generateClassName:ti.generate}),wu=ku,xu=({name:e,control:t,label:n,placeholder:r,type:o="text",rules:i})=>(0,a.jsx)(L,{name:e,control:t,rules:i,render:({field:e,fieldState:{error:t}})=>(0,a.jsx)(wu,{sx:{width:"100%"},children:(0,a.jsx)(vu,Object.assign({},e,{label:n,placeholder:r,type:o,error:!!t,helperText:null==t?void 0:t.message,fullWidth:!0,variant:"outlined"}))})});function Cu(e){return ri("MuiTypography",e)}oi("MuiTypography",["root","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","button","caption","overline","alignLeft","alignRight","alignCenter","alignJustify","noWrap","gutterBottom","paragraph"]);const Eu={primary:!0,secondary:!0,error:!0,info:!0,success:!0,warning:!0,textPrimary:!0,textSecondary:!0,textDisabled:!0},Au=Ma,Pu=pa("span",{name:"MuiTypography",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.variant&&t[n.variant],"inherit"!==n.align&&t[`align${Ga(n.align)}`],n.noWrap&&t.noWrap,n.gutterBottom&&t.gutterBottom,n.paragraph&&t.paragraph]}})(Qa((({theme:e})=>({margin:0,variants:[{props:{variant:"inherit"},style:{font:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}},...Object.entries(e.typography).filter((([e,t])=>"inherit"!==e&&t&&"object"==typeof t)).map((([e,t])=>({props:{variant:e},style:t}))),...Object.entries(e.palette).filter(hi()).map((([t])=>({props:{color:t},style:{color:(e.vars||e).palette[t].main}}))),...Object.entries(e.palette?.text||{}).filter((([,e])=>"string"==typeof e)).map((([t])=>({props:{color:`text${Ga(t)}`},style:{color:(e.vars||e).palette.text[t]}}))),{props:({ownerState:e})=>"inherit"!==e.align,style:{textAlign:"var(--Typography-textAlign)"}},{props:({ownerState:e})=>e.noWrap,style:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"}},{props:({ownerState:e})=>e.gutterBottom,style:{marginBottom:"0.35em"}},{props:({ownerState:e})=>e.paragraph,style:{marginBottom:16}}]})))),Tu={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",inherit:"p"},_u=i.forwardRef((function(e,t){const{color:n,...r}=ya({props:e,name:"MuiTypography"}),o=Au({...r,...!Eu[n]&&{color:n}}),{align:i="inherit",className:l,component:s,gutterBottom:u=!1,noWrap:c=!1,paragraph:d=!1,variant:f="body1",variantMapping:p=Tu,...m}=o,h={...o,align:i,color:n,className:l,component:s,gutterBottom:u,noWrap:c,paragraph:d,variant:f,variantMapping:p},g=s||(d?"p":p[f]||Tu[f])||"span",y=(e=>{const{align:t,gutterBottom:n,noWrap:r,paragraph:o,variant:a,classes:i}=e;return Ce({root:["root",a,"inherit"!==e.align&&`align${Ga(t)}`,n&&"gutterBottom",r&&"noWrap",o&&"paragraph"]},Cu,i)})(h);return(0,a.jsx)(Pu,{as:g,ref:t,className:xe(y.root,l),...m,ownerState:h,style:{..."inherit"!==i&&{"--Typography-textAlign":i},...m.style}})})),Ru=Rr();function zu({props:e,name:t,defaultTheme:n,themeId:r}){let o=Wa(n);return r&&(o=o[r]||o),function(e){const{theme:t,name:n,props:r}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?ma(t.components[n].defaultProps,r):r}({theme:o,name:t,props:e})}const Ou=xr(),Mu=Ru("div",{name:"MuiStack",slot:"Root"});function Nu(e){return zu({props:e,name:"MuiStack",defaultTheme:Ou})}function Fu(e,t){const n=i.Children.toArray(e).filter(Boolean);return n.reduce(((e,r,o)=>(e.push(r),o<n.length-1&&e.push(i.cloneElement(t,{key:`separator-${o}`})),e)),[])}const $u=({ownerState:e,theme:t})=>{let n={display:"flex",flexDirection:"column",...kn({theme:t},Cn({values:e.direction,breakpoints:t.breakpoints.values}),(e=>({flexDirection:e})))};if(e.spacing){const r=In(t),o=Object.keys(t.breakpoints.values).reduce(((t,n)=>(("object"==typeof e.spacing&&null!=e.spacing[n]||"object"==typeof e.direction&&null!=e.direction[n])&&(t[n]=!0),t)),{}),a=Cn({values:e.direction,base:o}),i=Cn({values:e.spacing,base:o});"object"==typeof a&&Object.keys(a).forEach(((e,t,n)=>{if(!a[e]){const r=t>0?a[n[t-1]]:"column";a[e]=r}})),n=hn(n,kn({theme:t},i,((t,n)=>{return e.useFlexGap?{gap:Dn(r,t)}:{"& > :not(style):not(style)":{margin:0},"& > :not(style) ~ :not(style)":{[`margin${o=n?a[n]:e.direction,{row:"Left","row-reverse":"Right",column:"Top","column-reverse":"Bottom"}[o]}`]:Dn(r,t)}};var o})))}return n=function(e,...t){const n=wn(e),r=[n,...t].reduce(((e,t)=>hn(e,t)),{});return xn(Object.keys(n),r)}(t.breakpoints,n),n},Lu=function(e={}){const{createStyledComponent:t=Mu,useThemeProps:n=Nu,componentName:r="MuiStack"}=e,o=t($u),l=i.forwardRef((function(e,t){const i=Ma(n(e)),{component:l="div",direction:s="column",spacing:u=0,divider:c,children:d,className:f,useFlexGap:p=!1,...m}=i,h={direction:s,spacing:u,useFlexGap:p},g=Ce({root:["root"]},(e=>ri(r,e)),{});return(0,a.jsx)(o,{as:l,ownerState:h,ref:t,className:xe(g.root,f),...m,children:c?Fu(d,c):d})}));return l}({createStyledComponent:pa("div",{name:"MuiStack",slot:"Root"}),useThemeProps:e=>ya({props:e,name:"MuiStack"})}),ju=Lu,Iu=Pe;function Du(e){try{return e.matches(":focus-visible")}catch(e){}return!1}const Bu=ka;class Vu{static create(){return new Vu}static use(){const e=Al(Vu.create).current,[t,n]=i.useState(!1);return e.shouldMount=t,e.setShouldMount=n,i.useEffect(e.mountEffect,[t]),e}constructor(){this.ref={current:null},this.mounted=null,this.didMount=!1,this.shouldMount=!1,this.setShouldMount=null}mount(){return this.mounted||(this.mounted=function(){let e,t;const n=new Promise(((n,r)=>{e=n,t=r}));return n.resolve=e,n.reject=t,n}(),this.shouldMount=!0,this.setShouldMount(this.shouldMount)),this.mounted}mountEffect=()=>{this.shouldMount&&!this.didMount&&null!==this.ref.current&&(this.didMount=!0,this.mounted.resolve())};start(...e){this.mount().then((()=>this.ref.current?.start(...e)))}stop(...e){this.mount().then((()=>this.ref.current?.stop(...e)))}pulsate(...e){this.mount().then((()=>this.ref.current?.pulsate(...e)))}}function Wu(e,t){var n=Object.create(null);return e&&i.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&(0,i.isValidElement)(e)?t(e):e}(e)})),n}function Hu(e,t,n){return null!=n[t]?n[t]:e.props[t]}function Uu(e,t,n){var r=Wu(e.children),o=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),a=[];for(var i in e)i in t?a.length&&(o[i]=a,a=[]):a.push(i);var l={};for(var s in t){if(o[s])for(r=0;r<o[s].length;r++){var u=o[s][r];l[o[s][r]]=n(u)}l[s]=n(s)}for(r=0;r<a.length;r++)l[a[r]]=n(a[r]);return l}(t,r);return Object.keys(o).forEach((function(a){var l=o[a];if((0,i.isValidElement)(l)){var s=a in t,u=a in r,c=t[a],d=(0,i.isValidElement)(c)&&!c.props.in;!u||s&&!d?u||!s||d?u&&s&&(0,i.isValidElement)(c)&&(o[a]=(0,i.cloneElement)(l,{onExited:n.bind(null,l),in:c.props.in,exit:Hu(l,"exit",e),enter:Hu(l,"enter",e)})):o[a]=(0,i.cloneElement)(l,{in:!1}):o[a]=(0,i.cloneElement)(l,{onExited:n.bind(null,l),in:!0,exit:Hu(l,"exit",e),enter:Hu(l,"enter",e)})}})),o}var qu=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Ku=function(e){function t(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}Ol(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,r,o=t.children,a=t.handleExited;return{children:t.firstRender?(n=e,r=a,Wu(n.children,(function(e){return(0,i.cloneElement)(e,{onExited:r.bind(null,e),in:!0,appear:Hu(e,"appear",n),enter:Hu(e,"enter",n),exit:Hu(e,"exit",n)})}))):Uu(e,o,a),firstRender:!1}},n.handleExited=function(e,t){var n=Wu(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=Te({},t.children);return delete n[e.key],{children:n}})))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=Rl(e,["component","childFactory"]),o=this.state.contextValue,a=qu(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?i.createElement(Nl.Provider,{value:o},a):i.createElement(Nl.Provider,{value:o},i.createElement(t,r,a))},t}(i.Component);Ku.propTypes={},Ku.defaultProps={component:"div",childFactory:function(e){return e}};const Qu=Ku,Gu=oi("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),Xu=Ia`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`,Yu=Ia`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`,Zu=Ia`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`,Ju=pa("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),ec=pa((function(e){const{className:t,classes:n,pulsate:r=!1,rippleX:o,rippleY:l,rippleSize:s,in:u,onExited:c,timeout:d}=e,[f,p]=i.useState(!1),m=xe(t,n.ripple,n.rippleVisible,r&&n.ripplePulsate),h={width:s,height:s,top:-s/2+l,left:-s/2+o},g=xe(n.child,f&&n.childLeaving,r&&n.childPulsate);return u||f||p(!0),i.useEffect((()=>{if(!u&&null!=c){const e=setTimeout(c,d);return()=>{clearTimeout(e)}}}),[c,u,d]),(0,a.jsx)("span",{className:m,style:h,children:(0,a.jsx)("span",{className:g})})}),{name:"MuiTouchRipple",slot:"Ripple"})`
  opacity: 0;
  position: absolute;

  &.${Gu.rippleVisible} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${Xu};
    animation-duration: ${550}ms;
    animation-timing-function: ${({theme:e})=>e.transitions.easing.easeInOut};
  }

  &.${Gu.ripplePulsate} {
    animation-duration: ${({theme:e})=>e.transitions.duration.shorter}ms;
  }

  & .${Gu.child} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${Gu.childLeaving} {
    opacity: 0;
    animation-name: ${Yu};
    animation-duration: ${550}ms;
    animation-timing-function: ${({theme:e})=>e.transitions.easing.easeInOut};
  }

  & .${Gu.childPulsate} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${Zu};
    animation-duration: 2500ms;
    animation-timing-function: ${({theme:e})=>e.transitions.easing.easeInOut};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`,tc=i.forwardRef((function(e,t){const n=ya({props:e,name:"MuiTouchRipple"}),{center:r=!1,classes:o={},className:l,...s}=n,[u,c]=i.useState([]),d=i.useRef(0),f=i.useRef(null);i.useEffect((()=>{f.current&&(f.current(),f.current=null)}),[u]);const p=i.useRef(!1),m=_l(),h=i.useRef(null),g=i.useRef(null),y=i.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:i,cb:l}=e;c((e=>[...e,(0,a.jsx)(ec,{classes:{ripple:xe(o.ripple,Gu.ripple),rippleVisible:xe(o.rippleVisible,Gu.rippleVisible),ripplePulsate:xe(o.ripplePulsate,Gu.ripplePulsate),child:xe(o.child,Gu.child),childLeaving:xe(o.childLeaving,Gu.childLeaving),childPulsate:xe(o.childPulsate,Gu.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:i},d.current)])),d.current+=1,f.current=l}),[o]),v=i.useCallback(((e={},t={},n=()=>{})=>{const{pulsate:o=!1,center:a=r||t.pulsate,fakeElement:i=!1}=t;if("mousedown"===e?.type&&p.current)return void(p.current=!1);"touchstart"===e?.type&&(p.current=!0);const l=i?null:g.current,s=l?l.getBoundingClientRect():{width:0,height:0,left:0,top:0};let u,c,d;if(a||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)u=Math.round(s.width/2),c=Math.round(s.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;u=Math.round(t-s.left),c=Math.round(n-s.top)}if(a)d=Math.sqrt((2*s.width**2+s.height**2)/3),d%2==0&&(d+=1);else{const e=2*Math.max(Math.abs((l?l.clientWidth:0)-u),u)+2,t=2*Math.max(Math.abs((l?l.clientHeight:0)-c),c)+2;d=Math.sqrt(e**2+t**2)}e?.touches?null===h.current&&(h.current=()=>{y({pulsate:o,rippleX:u,rippleY:c,rippleSize:d,cb:n})},m.start(80,(()=>{h.current&&(h.current(),h.current=null)}))):y({pulsate:o,rippleX:u,rippleY:c,rippleSize:d,cb:n})}),[r,y,m]),b=i.useCallback((()=>{v({},{pulsate:!0})}),[v]),S=i.useCallback(((e,t)=>{if(m.clear(),"touchend"===e?.type&&h.current)return h.current(),h.current=null,void m.start(0,(()=>{S(e,t)}));h.current=null,c((e=>e.length>0?e.slice(1):e)),f.current=t}),[m]);return i.useImperativeHandle(t,(()=>({pulsate:b,start:v,stop:S})),[b,v,S]),(0,a.jsx)(Ju,{className:xe(Gu.root,o.root,l),ref:g,...s,children:(0,a.jsx)(Qu,{component:null,exit:!0,children:u})})})),nc=tc;function rc(e){return ri("MuiButtonBase",e)}const oc=oi("MuiButtonBase",["root","disabled","focusVisible"]),ac=pa("button",{name:"MuiButtonBase",slot:"Root"})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${oc.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}});function ic(e,t,n,r=!1){return Bu((o=>(n&&n(o),r||e[t](o),!0)))}const lc=i.forwardRef((function(e,t){const n=ya({props:e,name:"MuiButtonBase"}),{action:r,centerRipple:o=!1,children:l,className:s,component:u="button",disabled:c=!1,disableRipple:d=!1,disableTouchRipple:f=!1,focusRipple:p=!1,focusVisibleClassName:m,LinkComponent:h="a",onBlur:g,onClick:y,onContextMenu:v,onDragLeave:b,onFocus:S,onFocusVisible:k,onKeyDown:w,onKeyUp:x,onMouseDown:C,onMouseLeave:E,onMouseUp:A,onTouchEnd:P,onTouchMove:T,onTouchStart:_,tabIndex:R=0,TouchRippleProps:z,touchRippleRef:O,type:M,...N}=n,F=i.useRef(null),$=Vu.use(),L=Xa($.ref,O),[j,I]=i.useState(!1);c&&j&&I(!1),i.useImperativeHandle(r,(()=>({focusVisible:()=>{I(!0),F.current.focus()}})),[]);const D=$.shouldMount&&!d&&!c;i.useEffect((()=>{j&&p&&!d&&$.pulsate()}),[d,p,j,$]);const B=ic($,"start",C,f),V=ic($,"stop",v,f),W=ic($,"stop",b,f),H=ic($,"stop",A,f),U=ic($,"stop",(e=>{j&&e.preventDefault(),E&&E(e)}),f),q=ic($,"start",_,f),K=ic($,"stop",P,f),Q=ic($,"stop",T,f),G=ic($,"stop",(e=>{Du(e.target)||I(!1),g&&g(e)}),!1),X=Bu((e=>{F.current||(F.current=e.currentTarget),Du(e.target)&&(I(!0),k&&k(e)),S&&S(e)})),Y=()=>{const e=F.current;return u&&"button"!==u&&!("A"===e.tagName&&e.href)},Z=Bu((e=>{p&&!e.repeat&&j&&" "===e.key&&$.stop(e,(()=>{$.start(e)})),e.target===e.currentTarget&&Y()&&" "===e.key&&e.preventDefault(),w&&w(e),e.target===e.currentTarget&&Y()&&"Enter"===e.key&&!c&&(e.preventDefault(),y&&y(e))})),J=Bu((e=>{p&&" "===e.key&&j&&!e.defaultPrevented&&$.stop(e,(()=>{$.pulsate(e)})),x&&x(e),y&&e.target===e.currentTarget&&Y()&&" "===e.key&&!e.defaultPrevented&&y(e)}));let ee=u;"button"===ee&&(N.href||N.to)&&(ee=h);const te={};"button"===ee?(te.type=void 0===M?"button":M,te.disabled=c):(N.href||N.to||(te.role="button"),c&&(te["aria-disabled"]=c));const ne=Xa(t,F),re={...n,centerRipple:o,component:u,disabled:c,disableRipple:d,disableTouchRipple:f,focusRipple:p,tabIndex:R,focusVisible:j},oe=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:o}=e,a=Ce({root:["root",t&&"disabled",n&&"focusVisible"]},rc,o);return n&&r&&(a.root+=` ${r}`),a})(re);return(0,a.jsxs)(ac,{as:ee,className:xe(oe.root,s),ownerState:re,onBlur:G,onClick:y,onContextMenu:V,onFocus:X,onKeyDown:Z,onKeyUp:J,onMouseDown:B,onMouseLeave:U,onMouseUp:H,onDragLeave:W,onTouchEnd:K,onTouchMove:Q,onTouchStart:q,ref:ne,tabIndex:c?-1:R,type:M,...te,...N,children:[l,D?(0,a.jsx)(nc,{ref:L,center:o,...z}):null]})}));function sc(e){return ri("MuiCircularProgress",e)}oi("MuiCircularProgress",["root","determinate","indeterminate","colorPrimary","colorSecondary","svg","circle","circleDeterminate","circleIndeterminate","circleDisableShrink"]);const uc=Ia`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`,cc=Ia`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: -126px;
  }
`,dc="string"!=typeof uc?ja`
        animation: ${uc} 1.4s linear infinite;
      `:null,fc="string"!=typeof cc?ja`
        animation: ${cc} 1.4s ease-in-out infinite;
      `:null,pc=pa("span",{name:"MuiCircularProgress",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`color${Ga(n.color)}`]]}})(Qa((({theme:e})=>({display:"inline-block",variants:[{props:{variant:"determinate"},style:{transition:e.transitions.create("transform")}},{props:{variant:"indeterminate"},style:dc||{animation:`${uc} 1.4s linear infinite`}},...Object.entries(e.palette).filter(hi()).map((([t])=>({props:{color:t},style:{color:(e.vars||e).palette[t].main}})))]})))),mc=pa("svg",{name:"MuiCircularProgress",slot:"Svg"})({display:"block"}),hc=pa("circle",{name:"MuiCircularProgress",slot:"Circle",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.circle,t[`circle${Ga(n.variant)}`],n.disableShrink&&t.circleDisableShrink]}})(Qa((({theme:e})=>({stroke:"currentColor",variants:[{props:{variant:"determinate"},style:{transition:e.transitions.create("stroke-dashoffset")}},{props:{variant:"indeterminate"},style:{strokeDasharray:"80px, 200px",strokeDashoffset:0}},{props:({ownerState:e})=>"indeterminate"===e.variant&&!e.disableShrink,style:fc||{animation:`${cc} 1.4s ease-in-out infinite`}}]})))),gc=i.forwardRef((function(e,t){const n=ya({props:e,name:"MuiCircularProgress"}),{className:r,color:o="primary",disableShrink:i=!1,size:l=40,style:s,thickness:u=3.6,value:c=0,variant:d="indeterminate",...f}=n,p={...n,color:o,disableShrink:i,size:l,thickness:u,value:c,variant:d},m=(e=>{const{classes:t,variant:n,color:r,disableShrink:o}=e;return Ce({root:["root",n,`color${Ga(r)}`],svg:["svg"],circle:["circle",`circle${Ga(n)}`,o&&"circleDisableShrink"]},sc,t)})(p),h={},g={},y={};if("determinate"===d){const e=2*Math.PI*((44-u)/2);h.strokeDasharray=e.toFixed(3),y["aria-valuenow"]=Math.round(c),h.strokeDashoffset=`${((100-c)/100*e).toFixed(3)}px`,g.transform="rotate(-90deg)"}return(0,a.jsx)(pc,{className:xe(m.root,r),style:{width:l,height:l,...g,...s},ownerState:p,ref:t,role:"progressbar",...y,...f,children:(0,a.jsx)(mc,{className:m.svg,ownerState:p,viewBox:"22 22 44 44",children:(0,a.jsx)(hc,{className:m.circle,style:h,ownerState:p,cx:44,cy:44,r:(44-u)/2,fill:"none",strokeWidth:u})})})}));function yc(e){return ri("MuiButton",e)}const vc=oi("MuiButton",["root","text","textInherit","textPrimary","textSecondary","textSuccess","textError","textInfo","textWarning","outlined","outlinedInherit","outlinedPrimary","outlinedSecondary","outlinedSuccess","outlinedError","outlinedInfo","outlinedWarning","contained","containedInherit","containedPrimary","containedSecondary","containedSuccess","containedError","containedInfo","containedWarning","disableElevation","focusVisible","disabled","colorInherit","colorPrimary","colorSecondary","colorSuccess","colorError","colorInfo","colorWarning","textSizeSmall","textSizeMedium","textSizeLarge","outlinedSizeSmall","outlinedSizeMedium","outlinedSizeLarge","containedSizeSmall","containedSizeMedium","containedSizeLarge","sizeMedium","sizeSmall","sizeLarge","fullWidth","startIcon","endIcon","icon","iconSizeSmall","iconSizeMedium","iconSizeLarge","loading","loadingWrapper","loadingIconPlaceholder","loadingIndicator","loadingPositionCenter","loadingPositionStart","loadingPositionEnd"]),bc=i.createContext({}),Sc=i.createContext(void 0),kc=[{props:{size:"small"},style:{"& > *:nth-of-type(1)":{fontSize:18}}},{props:{size:"medium"},style:{"& > *:nth-of-type(1)":{fontSize:20}}},{props:{size:"large"},style:{"& > *:nth-of-type(1)":{fontSize:22}}}],wc=pa(lc,{shouldForwardProp:e=>fa(e)||"classes"===e,name:"MuiButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${Ga(n.color)}`],t[`size${Ga(n.size)}`],t[`${n.variant}Size${Ga(n.size)}`],"inherit"===n.color&&t.colorInherit,n.disableElevation&&t.disableElevation,n.fullWidth&&t.fullWidth,n.loading&&t.loading]}})(Qa((({theme:e})=>{const t="light"===e.palette.mode?e.palette.grey[300]:e.palette.grey[800],n="light"===e.palette.mode?e.palette.grey.A100:e.palette.grey[700];return{...e.typography.button,minWidth:64,padding:"6px 16px",border:0,borderRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create(["background-color","box-shadow","border-color","color"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none"},[`&.${vc.disabled}`]:{color:(e.vars||e).palette.action.disabled},variants:[{props:{variant:"contained"},style:{color:"var(--variant-containedColor)",backgroundColor:"var(--variant-containedBg)",boxShadow:(e.vars||e).shadows[2],"&:hover":{boxShadow:(e.vars||e).shadows[4],"@media (hover: none)":{boxShadow:(e.vars||e).shadows[2]}},"&:active":{boxShadow:(e.vars||e).shadows[8]},[`&.${vc.focusVisible}`]:{boxShadow:(e.vars||e).shadows[6]},[`&.${vc.disabled}`]:{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground}}},{props:{variant:"outlined"},style:{padding:"5px 15px",border:"1px solid currentColor",borderColor:"var(--variant-outlinedBorder, currentColor)",backgroundColor:"var(--variant-outlinedBg)",color:"var(--variant-outlinedColor)",[`&.${vc.disabled}`]:{border:`1px solid ${(e.vars||e).palette.action.disabledBackground}`}}},{props:{variant:"text"},style:{padding:"6px 8px",color:"var(--variant-textColor)",backgroundColor:"var(--variant-textBg)"}},...Object.entries(e.palette).filter(hi()).map((([t])=>({props:{color:t},style:{"--variant-textColor":(e.vars||e).palette[t].main,"--variant-outlinedColor":(e.vars||e).palette[t].main,"--variant-outlinedBorder":e.vars?`rgba(${e.vars.palette[t].mainChannel} / 0.5)`:jr(e.palette[t].main,.5),"--variant-containedColor":(e.vars||e).palette[t].contrastText,"--variant-containedBg":(e.vars||e).palette[t].main,"@media (hover: hover)":{"&:hover":{"--variant-containedBg":(e.vars||e).palette[t].dark,"--variant-textBg":e.vars?`rgba(${e.vars.palette[t].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:jr(e.palette[t].main,e.palette.action.hoverOpacity),"--variant-outlinedBorder":(e.vars||e).palette[t].main,"--variant-outlinedBg":e.vars?`rgba(${e.vars.palette[t].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:jr(e.palette[t].main,e.palette.action.hoverOpacity)}}}}))),{props:{color:"inherit"},style:{color:"inherit",borderColor:"currentColor","--variant-containedBg":e.vars?e.vars.palette.Button.inheritContainedBg:t,"@media (hover: hover)":{"&:hover":{"--variant-containedBg":e.vars?e.vars.palette.Button.inheritContainedHoverBg:n,"--variant-textBg":e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:jr(e.palette.text.primary,e.palette.action.hoverOpacity),"--variant-outlinedBg":e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:jr(e.palette.text.primary,e.palette.action.hoverOpacity)}}}},{props:{size:"small",variant:"text"},style:{padding:"4px 5px",fontSize:e.typography.pxToRem(13)}},{props:{size:"large",variant:"text"},style:{padding:"8px 11px",fontSize:e.typography.pxToRem(15)}},{props:{size:"small",variant:"outlined"},style:{padding:"3px 9px",fontSize:e.typography.pxToRem(13)}},{props:{size:"large",variant:"outlined"},style:{padding:"7px 21px",fontSize:e.typography.pxToRem(15)}},{props:{size:"small",variant:"contained"},style:{padding:"4px 10px",fontSize:e.typography.pxToRem(13)}},{props:{size:"large",variant:"contained"},style:{padding:"8px 22px",fontSize:e.typography.pxToRem(15)}},{props:{disableElevation:!0},style:{boxShadow:"none","&:hover":{boxShadow:"none"},[`&.${vc.focusVisible}`]:{boxShadow:"none"},"&:active":{boxShadow:"none"},[`&.${vc.disabled}`]:{boxShadow:"none"}}},{props:{fullWidth:!0},style:{width:"100%"}},{props:{loadingPosition:"center"},style:{transition:e.transitions.create(["background-color","box-shadow","border-color"],{duration:e.transitions.duration.short}),[`&.${vc.loading}`]:{color:"transparent"}}}]}}))),xc=pa("span",{name:"MuiButton",slot:"StartIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.startIcon,n.loading&&t.startIconLoadingStart,t[`iconSize${Ga(n.size)}`]]}})((({theme:e})=>({display:"inherit",marginRight:8,marginLeft:-4,variants:[{props:{size:"small"},style:{marginLeft:-2}},{props:{loadingPosition:"start",loading:!0},style:{transition:e.transitions.create(["opacity"],{duration:e.transitions.duration.short}),opacity:0}},{props:{loadingPosition:"start",loading:!0,fullWidth:!0},style:{marginRight:-8}},...kc]}))),Cc=pa("span",{name:"MuiButton",slot:"EndIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.endIcon,n.loading&&t.endIconLoadingEnd,t[`iconSize${Ga(n.size)}`]]}})((({theme:e})=>({display:"inherit",marginRight:-4,marginLeft:8,variants:[{props:{size:"small"},style:{marginRight:-2}},{props:{loadingPosition:"end",loading:!0},style:{transition:e.transitions.create(["opacity"],{duration:e.transitions.duration.short}),opacity:0}},{props:{loadingPosition:"end",loading:!0,fullWidth:!0},style:{marginLeft:-8}},...kc]}))),Ec=pa("span",{name:"MuiButton",slot:"LoadingIndicator"})((({theme:e})=>({display:"none",position:"absolute",visibility:"visible",variants:[{props:{loading:!0},style:{display:"flex"}},{props:{loadingPosition:"start"},style:{left:14}},{props:{loadingPosition:"start",size:"small"},style:{left:10}},{props:{variant:"text",loadingPosition:"start"},style:{left:6}},{props:{loadingPosition:"center"},style:{left:"50%",transform:"translate(-50%)",color:(e.vars||e).palette.action.disabled}},{props:{loadingPosition:"end"},style:{right:14}},{props:{loadingPosition:"end",size:"small"},style:{right:10}},{props:{variant:"text",loadingPosition:"end"},style:{right:6}},{props:{loadingPosition:"start",fullWidth:!0},style:{position:"relative",left:-10}},{props:{loadingPosition:"end",fullWidth:!0},style:{position:"relative",right:-10}}]}))),Ac=pa("span",{name:"MuiButton",slot:"LoadingIconPlaceholder"})({display:"inline-block",width:"1em",height:"1em"}),Pc=i.forwardRef((function(e,t){const n=i.useContext(bc),r=i.useContext(Sc),o=ya({props:ma(n,e),name:"MuiButton"}),{children:l,color:s="primary",component:u="button",className:c,disabled:d=!1,disableElevation:f=!1,disableFocusRipple:p=!1,endIcon:m,focusVisibleClassName:h,fullWidth:g=!1,id:y,loading:v=null,loadingIndicator:b,loadingPosition:S="center",size:k="medium",startIcon:w,type:x,variant:C="text",...E}=o,A=Iu(y),P=b??(0,a.jsx)(gc,{"aria-labelledby":A,color:"inherit",size:16}),T={...o,color:s,component:u,disabled:d,disableElevation:f,disableFocusRipple:p,fullWidth:g,loading:v,loadingIndicator:P,loadingPosition:S,size:k,type:x,variant:C},_=(e=>{const{color:t,disableElevation:n,fullWidth:r,size:o,variant:a,loading:i,loadingPosition:l,classes:s}=e,u=Ce({root:["root",i&&"loading",a,`${a}${Ga(t)}`,`size${Ga(o)}`,`${a}Size${Ga(o)}`,`color${Ga(t)}`,n&&"disableElevation",r&&"fullWidth",i&&`loadingPosition${Ga(l)}`],startIcon:["icon","startIcon",`iconSize${Ga(o)}`],endIcon:["icon","endIcon",`iconSize${Ga(o)}`],loadingIndicator:["loadingIndicator"],loadingWrapper:["loadingWrapper"]},yc,s);return{...s,...u}})(T),R=(w||v&&"start"===S)&&(0,a.jsx)(xc,{className:_.startIcon,ownerState:T,children:w||(0,a.jsx)(Ac,{className:_.loadingIconPlaceholder,ownerState:T})}),z=(m||v&&"end"===S)&&(0,a.jsx)(Cc,{className:_.endIcon,ownerState:T,children:m||(0,a.jsx)(Ac,{className:_.loadingIconPlaceholder,ownerState:T})}),O=r||"",M="boolean"==typeof v?(0,a.jsx)("span",{className:_.loadingWrapper,style:{display:"contents"},children:v&&(0,a.jsx)(Ec,{className:_.loadingIndicator,ownerState:T,children:P})}):null;return(0,a.jsxs)(wc,{ownerState:T,className:xe(n.className,_.root,c,O),component:u,disabled:d||v,focusRipple:!p,focusVisibleClassName:xe(_.focusVisible,h),ref:t,type:x,id:v?A:y,...E,classes:_,children:[R,"end"!==S&&M,l,"end"===S&&M,z]})})),Tc=({disabled:e,title:t})=>(0,a.jsx)(Pc,{type:"submit",variant:"contained",size:"large",disabled:e,sx:{mt:2},children:t}),_c={required:"required",pattern:{value:/^[ARNDCEQGHILKMFPSTWYV-]+$/,message:'можно добавить только " ARNDCEQGHILKMFPSTWYV- "символы без пробелов'}},Rc=e=>{const t=e.toUpperCase();return"C"===t?"var(--color-cysteine)":"AILMFWYVP".includes(t)?"var(--color-hydrophobic)":"G"===t?"var(--color-glycine)":"DE".includes(t)?"var(--color-negative-charge)":"KR".includes(t)?"var(--color-positive-charge)":"STHQN".includes(t)?"var(--color-polar-uncharged)":void 0},zc=(e,t)=>{const n=[];for(let r=0;r<e.length;r+=t)n.push(e.slice(r,r+t));return n},Oc=({value1:e,value2:t})=>{const n={fontSize:"var(--font-size-secondary)",fontWeight:"var(--font-weight)",width:"24px",height:"32px",lineHeight:"32px",display:"inline-block",textAlign:"center",borderRadius:"4px"},r=zc(e.split(""),3),o=zc(t.split(""),3),i=Math.max(r.length,o.length),l=[];for(let t=0;t<i;t++){if(t<r.length){const e=3*t;l.push((0,a.jsx)(wu,{sx:{display:"flex",gap:"4px"},children:r[t].map(((t,r)=>{var o;return(0,a.jsx)(wu,{component:"span",sx:Object.assign(Object.assign({},n),{color:null!==(o=Rc(t))&&void 0!==o?o:"inherit"}),children:t},e+r)}))},`v1-${t}`))}if(t<o.length){const r=3*t;l.push((0,a.jsx)(wu,{sx:{display:"flex",gap:"4px"},children:o[t].map(((t,o)=>{const i=r+o,l=e[i]!==t;return(0,a.jsx)(wu,{component:"span",sx:Object.assign(Object.assign({},n),{backgroundColor:l?"var(--color-shadow)":"transparent"}),children:t},i)}))},`v2-${t}`))}}return(0,a.jsx)(wu,{sx:{display:"flex",flexDirection:"column",gap:"4px"},children:l})},Mc=()=>{const[e,t]=(0,i.useState)(null),{control:n,handleSubmit:r,formState:{isValid:o},watch:l}=function(e={}){const t=i.useRef(void 0),n=i.useRef(void 0),[r,o]=i.useState({isDirty:!1,isValidating:!1,isLoading:U(e.defaultValues),isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,submitCount:0,dirtyFields:{},touchedFields:{},validatingFields:{},errors:e.errors||{},disabled:e.disabled||!1,isReady:!1,defaultValues:U(e.defaultValues)?void 0:e.defaultValues});t.current||(t.current={...e.formControl?e.formControl:ke(e),formState:r},e.formControl&&e.defaultValues&&!U(e.defaultValues)&&e.formControl.reset(e.defaultValues,e.resetOptions));const a=t.current.control;return a._options=e,N((()=>{const e=a._subscribe({formState:a._proxyFormState,callback:()=>o({...a._formState}),reRenderRoot:!0});return o((e=>({...e,isReady:!0}))),a._formState.isReady=!0,e}),[a]),i.useEffect((()=>a._disableForm(e.disabled)),[a,e.disabled]),i.useEffect((()=>{e.mode&&(a._options.mode=e.mode),e.reValidateMode&&(a._options.reValidateMode=e.reValidateMode)}),[a,e.mode,e.reValidateMode]),i.useEffect((()=>{e.errors&&(a._setErrors(e.errors),a._focusError())}),[a,e.errors]),i.useEffect((()=>{e.shouldUnregister&&a._subjects.state.next({values:a._getWatch()})}),[a,e.shouldUnregister]),i.useEffect((()=>{if(a._proxyFormState.isDirty){const e=a._getDirty();e!==r.isDirty&&a._subjects.state.next({isDirty:e})}}),[a,r.isDirty]),i.useEffect((()=>{e.values&&!V(e.values,n.current)?(a._reset(e.values,a._options.resetOptions),n.current=e.values,o((e=>({...e})))):a._resetDefaultValues()}),[a,e.values]),i.useEffect((()=>{a._state.mount||(a._setValid(),a._state.mount=!0),a._state.watch&&(a._state.watch=!1,a._subjects.state.next({...a._formState})),a._removeUnmounted()})),t.current.formState=M(r,a),t.current}({mode:"onChange"}),s=l("acid_1")||"",u=l("acid_2")||"",c=s.length===u.length;return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(xs,{elevation:2,sx:{mb:4},children:(0,a.jsx)(_u,{variant:"h4",component:"h1",gutterBottom:!0,children:"Выравнивание аминокислотных последовательностей"})}),(0,a.jsxs)(xs,{elevation:1,sx:{mb:4,backgroundColor:"#f8f9fa"},children:[(0,a.jsx)(_u,{variant:"h6",gutterBottom:!0,sx:{color:"var(--color-background-paper-primary)",fontWeight:500,fontSize:"inherit"},children:"Пример последовательностей:"}),(0,a.jsxs)(ju,{spacing:1,children:[(0,a.jsx)(wu,{children:"AQGHIL"}),(0,a.jsx)(wu,{children:"NNNNLL"})]})]}),(0,a.jsxs)(xs,{elevation:2,sx:{mb:4,mt:6},children:[(0,a.jsx)(_u,{variant:"h5",gutterBottom:!0,sx:{fontWeight:500,mb:3},children:"Введите последовательности"}),(0,a.jsx)("form",{onSubmit:r((e=>{console.log("Данные формы:",e),t(e)})),children:(0,a.jsxs)(ju,{spacing:3,children:[(0,a.jsx)(xu,{name:"acid_1",control:n,label:"Введите первую последовательность",rules:_c}),(0,a.jsx)(xu,{name:"acid_2",control:n,label:"Введите вторую последовательность",rules:_c}),!c&&(0,a.jsx)("span",{children:"длина последовательностей не совпадает"}),(0,a.jsx)(Tc,{title:"Произвести выравнивание",disabled:!o||!c})]})})]}),e&&(0,a.jsx)(Oc,{value1:e.acid_1,value2:e.acid_2})]})},Nc=xr(),Fc=Ru("div",{name:"MuiContainer",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[`maxWidth${An(String(n.maxWidth))}`],n.fixed&&t.fixed,n.disableGutters&&t.disableGutters]}}),$c=e=>zu({props:e,name:"MuiContainer",defaultTheme:Nc}),Lc=function(e={}){const{createStyledComponent:t=Fc,useThemeProps:n=$c,componentName:r="MuiContainer"}=e,o=t((({theme:e,ownerState:t})=>({width:"100%",marginLeft:"auto",boxSizing:"border-box",marginRight:"auto",...!t.disableGutters&&{paddingLeft:e.spacing(2),paddingRight:e.spacing(2),[e.breakpoints.up("sm")]:{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}}})),(({theme:e,ownerState:t})=>t.fixed&&Object.keys(e.breakpoints.values).reduce(((t,n)=>{const r=n,o=e.breakpoints.values[r];return 0!==o&&(t[e.breakpoints.up(r)]={maxWidth:`${o}${e.breakpoints.unit}`}),t}),{})),(({theme:e,ownerState:t})=>({..."xs"===t.maxWidth&&{[e.breakpoints.up("xs")]:{maxWidth:Math.max(e.breakpoints.values.xs,444)}},...t.maxWidth&&"xs"!==t.maxWidth&&{[e.breakpoints.up(t.maxWidth)]:{maxWidth:`${e.breakpoints.values[t.maxWidth]}${e.breakpoints.unit}`}}}))),l=i.forwardRef((function(e,t){const i=n(e),{className:l,component:s="div",disableGutters:u=!1,fixed:c=!1,maxWidth:d="lg",classes:f,...p}=i,m={...i,component:s,disableGutters:u,fixed:c,maxWidth:d},h=((e,t)=>{const{classes:n,fixed:r,disableGutters:o,maxWidth:a}=e;return Ce({root:["root",a&&`maxWidth${An(String(a))}`,r&&"fixed",o&&"disableGutters"]},(e=>ri(t,e)),n)})(m,r);return(0,a.jsx)(o,{as:s,ownerState:m,className:xe(h.root,l),ref:t,...p})}));return l}({createStyledComponent:pa("div",{name:"MuiContainer",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[`maxWidth${Ga(String(n.maxWidth))}`],n.fixed&&t.fixed,n.disableGutters&&t.disableGutters]}}),useThemeProps:e=>ya({props:e,name:"MuiContainer"})}),jc=Lc;var Ic=o(691),Dc=o.n(Ic),Bc=o(825),Vc=o.n(Bc),Wc=o(659),Hc=o.n(Wc),Uc=o(56),qc=o.n(Uc),Kc=o(159),Qc=o.n(Kc),Gc=o(113),Xc=o.n(Gc),Yc=o(843),Zc={};Zc.styleTagTransform=Xc(),Zc.setAttributes=qc(),Zc.insert=Hc().bind(null,"head"),Zc.domAPI=Vc(),Zc.insertStyleElement=Qc(),Dc()(Yc.A,Zc),Yc.A&&Yc.A.locals&&Yc.A.locals;const Jc=i.createContext(null);function ed(){return i.useContext(Jc)}const td="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__",nd=function(e){const{children:t,theme:n}=e,r=ed(),o=i.useMemo((()=>{const e=null===r?{...n}:function(e,t){return"function"==typeof t?t(e):{...e,...t}}(r,n);return null!=e&&(e[td]=null!==r),e}),[n,r]);return(0,a.jsx)(Jc.Provider,{value:o,children:t})},rd={};function od(e,t,n,r=!1){return i.useMemo((()=>{const o=e&&t[e]||t;if("function"==typeof n){const a=n(o),i=e?{...t,[e]:a}:a;return r?()=>i:i}return e?{...t,[e]:n}:{...t,...n}}),[e,t,n,r])}const ad=function(e){const{children:t,theme:n,themeId:r}=e,o=Ba(rd),i=ed()||rd,l=od(r,o,n),s=od(r,i,n,!0),u="rtl"===(r?l[r]:l).direction;return(0,a.jsx)(nd,{theme:s,children:(0,a.jsx)(Xt.Provider,{value:l,children:(0,a.jsx)(dl,{value:u,children:(0,a.jsx)(ga,{value:r?l[r].components:l.components,children:t})})})})};function id({theme:e,...t}){const n=ca in e?e[ca]:void 0;return(0,a.jsx)(ad,{...t,themeId:n?ca:void 0,theme:n||e})}const ld="mode",sd="color-scheme",ud="data-color-scheme";function cd(){}const dd=({key:e,storageWindow:t})=>(t||"undefined"==typeof window||(t=window),{get(n){if("undefined"==typeof window)return;if(!t)return n;let r;try{r=t.localStorage.getItem(e)}catch{}return r||n},set:n=>{if(t)try{t.localStorage.setItem(e,n)}catch{}},subscribe:n=>{if(!t)return cd;const r=t=>{const r=t.newValue;t.key===e&&n(r)};return t.addEventListener("storage",r),()=>{t.removeEventListener("storage",r)}}});function fd(){}function pd(e){if("undefined"!=typeof window&&"function"==typeof window.matchMedia&&"system"===e)return window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"}function md(e,t){return"light"===e.mode||"system"===e.mode&&"light"===e.systemMode?t("light"):"dark"===e.mode||"system"===e.mode&&"dark"===e.systemMode?t("dark"):void 0}const hd="mui-color-scheme",gd="light",yd="dark",vd="mui-mode",{CssVarsProvider:bd,useColorScheme:Sd,getInitColorSchemeScript:kd}=function(e){const{themeId:t,theme:n={},modeStorageKey:r=ld,colorSchemeStorageKey:o=sd,disableTransitionOnChange:l=!1,defaultColorScheme:s,resolveTheme:u}=e,c={allColorSchemes:[],colorScheme:void 0,darkColorScheme:void 0,lightColorScheme:void 0,mode:void 0,setColorScheme:()=>{},setMode:()=>{},systemMode:void 0},d=i.createContext(void 0),f={},p={},m="string"==typeof s?s:s.light,h="string"==typeof s?s:s.dark;return{CssVarsProvider:function(e){const{children:c,theme:m,modeStorageKey:h=r,colorSchemeStorageKey:g=o,disableTransitionOnChange:y=l,storageManager:v,storageWindow:b=("undefined"==typeof window?void 0:window),documentNode:S=("undefined"==typeof document?void 0:document),colorSchemeNode:k=("undefined"==typeof document?void 0:document.documentElement),disableNestedContext:w=!1,disableStyleSheetGeneration:x=!1,defaultMode:C="system",forceThemeRerender:E=!1,noSsr:A}=e,P=i.useRef(!1),T=ed(),_=i.useContext(d),R=!!_&&!w,z=i.useMemo((()=>m||("function"==typeof n?n():n)),[m]),O=z[t],M=O||z,{colorSchemes:N=f,components:F=p,cssVarPrefix:$}=M,L=Object.keys(N).filter((e=>!!N[e])).join(","),j=i.useMemo((()=>L.split(",")),[L]),I="string"==typeof s?s:s.light,D="string"==typeof s?s:s.dark,B=N[I]&&N[D]?C:N[M.defaultColorScheme]?.palette?.mode||M.palette?.mode,{mode:V,setMode:W,systemMode:H,lightColorScheme:U,darkColorScheme:q,colorScheme:K,setColorScheme:Q}=function(e){const{defaultMode:t="light",defaultLightColorScheme:n,defaultDarkColorScheme:r,supportedColorSchemes:o=[],modeStorageKey:a=ld,colorSchemeStorageKey:l=sd,storageWindow:s=("undefined"==typeof window?void 0:window),storageManager:u=dd,noSsr:c=!1}=e,d=o.join(","),f=o.length>1,p=i.useMemo((()=>u?.({key:a,storageWindow:s})),[u,a,s]),m=i.useMemo((()=>u?.({key:`${l}-light`,storageWindow:s})),[u,l,s]),h=i.useMemo((()=>u?.({key:`${l}-dark`,storageWindow:s})),[u,l,s]),[g,y]=i.useState((()=>{const e=p?.get(t)||t,o=m?.get(n)||n,a=h?.get(r)||r;return{mode:e,systemMode:pd(e),lightColorScheme:o,darkColorScheme:a}})),[v,b]=i.useState(c||!f);i.useEffect((()=>{b(!0)}),[]);const S=function(e){return md(e,(t=>"light"===t?e.lightColorScheme:"dark"===t?e.darkColorScheme:void 0))}(g),k=i.useCallback((e=>{y((n=>{if(e===n.mode)return n;const r=e??t;return p?.set(r),{...n,mode:r,systemMode:pd(r)}}))}),[p,t]),w=i.useCallback((e=>{e?"string"==typeof e?e&&!d.includes(e)?console.error(`\`${e}\` does not exist in \`theme.colorSchemes\`.`):y((t=>{const n={...t};return md(t,(t=>{"light"===t&&(m?.set(e),n.lightColorScheme=e),"dark"===t&&(h?.set(e),n.darkColorScheme=e)})),n})):y((t=>{const o={...t},a=null===e.light?n:e.light,i=null===e.dark?r:e.dark;return a&&(d.includes(a)?(o.lightColorScheme=a,m?.set(a)):console.error(`\`${a}\` does not exist in \`theme.colorSchemes\`.`)),i&&(d.includes(i)?(o.darkColorScheme=i,h?.set(i)):console.error(`\`${i}\` does not exist in \`theme.colorSchemes\`.`)),o})):y((e=>(m?.set(n),h?.set(r),{...e,lightColorScheme:n,darkColorScheme:r})))}),[d,m,h,n,r]),x=i.useCallback((e=>{"system"===g.mode&&y((t=>{const n=e?.matches?"dark":"light";return t.systemMode===n?t:{...t,systemMode:n}}))}),[g.mode]),C=i.useRef(x);return C.current=x,i.useEffect((()=>{if("function"!=typeof window.matchMedia||!f)return;const e=(...e)=>C.current(...e),t=window.matchMedia("(prefers-color-scheme: dark)");return t.addListener(e),e(t),()=>{t.removeListener(e)}}),[f]),i.useEffect((()=>{if(f){const e=p?.subscribe((e=>{e&&!["light","dark","system"].includes(e)||k(e||t)}))||fd,n=m?.subscribe((e=>{e&&!d.match(e)||w({light:e})}))||fd,r=h?.subscribe((e=>{e&&!d.match(e)||w({dark:e})}))||fd;return()=>{e(),n(),r()}}}),[w,k,d,t,s,f,p,m,h]),{...g,mode:v?g.mode:void 0,systemMode:v?g.systemMode:void 0,colorScheme:v?S:void 0,setMode:k,setColorScheme:w}}({supportedColorSchemes:j,defaultLightColorScheme:I,defaultDarkColorScheme:D,modeStorageKey:h,colorSchemeStorageKey:g,defaultMode:B,storageManager:v,storageWindow:b,noSsr:A});let G=V,X=K;R&&(G=_.mode,X=_.colorScheme);let Y=X||M.defaultColorScheme;M.vars&&!E&&(Y=M.defaultColorScheme);const Z=i.useMemo((()=>{const e=M.generateThemeVars?.()||M.vars,t={...M,components:F,colorSchemes:N,cssVarPrefix:$,vars:e};if("function"==typeof t.generateSpacing&&(t.spacing=t.generateSpacing()),Y){const e=N[Y];e&&"object"==typeof e&&Object.keys(e).forEach((n=>{e[n]&&"object"==typeof e[n]?t[n]={...t[n],...e[n]}:t[n]=e[n]}))}return u?u(t):t}),[M,Y,F,N,$]),J=M.colorSchemeSelector;Sa((()=>{if(X&&k&&J&&"media"!==J){const e=J;let t=J;if("class"===e&&(t=".%s"),"data"===e&&(t="[data-%s]"),e?.startsWith("data-")&&!e.includes("%s")&&(t=`[${e}="%s"]`),t.startsWith("."))k.classList.remove(...j.map((e=>t.substring(1).replace("%s",e)))),k.classList.add(t.substring(1).replace("%s",X));else{const e=t.replace("%s",X).match(/\[([^\]]+)\]/);if(e){const[t,n]=e[1].split("=");n||j.forEach((e=>{k.removeAttribute(t.replace(X,e))})),k.setAttribute(t,n?n.replace(/"|'/g,""):"")}else k.setAttribute(t,X)}}}),[X,J,k,j]),i.useEffect((()=>{let e;if(y&&P.current&&S){const t=S.createElement("style");t.appendChild(S.createTextNode("*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}")),S.head.appendChild(t),window.getComputedStyle(S.body),e=setTimeout((()=>{S.head.removeChild(t)}),1)}return()=>{clearTimeout(e)}}),[X,y,S]),i.useEffect((()=>(P.current=!0,()=>{P.current=!1})),[]);const ee=i.useMemo((()=>({allColorSchemes:j,colorScheme:X,darkColorScheme:q,lightColorScheme:U,mode:G,setColorScheme:Q,setMode:W,systemMode:H})),[j,X,q,U,G,Q,W,H,Z.colorSchemeSelector]);let te=!0;(x||!1===M.cssVariables||R&&T?.cssVarPrefix===$)&&(te=!1);const ne=(0,a.jsxs)(i.Fragment,{children:[(0,a.jsx)(ad,{themeId:O?t:void 0,theme:Z,children:c}),te&&(0,a.jsx)(Da,{styles:Z.generateStyleSheets?.()||[]})]});return R?ne:(0,a.jsx)(d.Provider,{value:ee,children:ne})},useColorScheme:()=>i.useContext(d)||c,getInitColorSchemeScript:e=>function(e){const{defaultMode:t="system",defaultLightColorScheme:n="light",defaultDarkColorScheme:r="dark",modeStorageKey:o=ld,colorSchemeStorageKey:i=sd,attribute:l=ud,colorSchemeNode:s="document.documentElement",nonce:u}=e||{};let c="",d=l;if("class"===l&&(d=".%s"),"data"===l&&(d="[data-%s]"),d.startsWith(".")){const e=d.substring(1);c+=`${s}.classList.remove('${e}'.replace('%s', light), '${e}'.replace('%s', dark));\n      ${s}.classList.add('${e}'.replace('%s', colorScheme));`}const f=d.match(/\[([^\]]+)\]/);if(f){const[e,t]=f[1].split("=");t||(c+=`${s}.removeAttribute('${e}'.replace('%s', light));\n      ${s}.removeAttribute('${e}'.replace('%s', dark));`),c+=`\n      ${s}.setAttribute('${e}'.replace('%s', colorScheme), ${t?`${t}.replace('%s', colorScheme)`:'""'});`}else c+=`${s}.setAttribute('${d}', colorScheme);`;return(0,a.jsx)("script",{suppressHydrationWarning:!0,nonce:"undefined"==typeof window?u:"",dangerouslySetInnerHTML:{__html:`(function() {\ntry {\n  let colorScheme = '';\n  const mode = localStorage.getItem('${o}') || '${t}';\n  const dark = localStorage.getItem('${i}-dark') || '${r}';\n  const light = localStorage.getItem('${i}-light') || '${n}';\n  if (mode === 'system') {\n    // handle system mode\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      colorScheme = dark\n    } else {\n      colorScheme = light\n    }\n  }\n  if (mode === 'light') {\n    colorScheme = light;\n  }\n  if (mode === 'dark') {\n    colorScheme = dark;\n  }\n  if (colorScheme) {\n    ${c}\n  }\n} catch(e){}})();`}},"mui-color-scheme-init")}({colorSchemeStorageKey:o,defaultLightColorScheme:m,defaultDarkColorScheme:h,modeStorageKey:r,...e})}}({themeId:ca,theme:()=>sa({cssVariables:!0}),colorSchemeStorageKey:hd,modeStorageKey:vd,defaultColorScheme:{light:gd,dark:yd},resolveTheme:e=>{const t={...e,typography:jo(e.palette,e.typography)};return t.unstable_sx=function(e){return kr({sx:e,theme:this})},t}}),wd=bd,xd="function"==typeof qa({}),Cd=(e,t)=>({WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",boxSizing:"border-box",WebkitTextSizeAdjust:"100%",...t&&!e.vars&&{colorScheme:e.palette.mode}}),Ed=e=>({color:(e.vars||e).palette.text.primary,...e.typography.body1,backgroundColor:(e.vars||e).palette.background.default,"@media print":{backgroundColor:(e.vars||e).palette.common.white}}),Ad=(e,t=!1)=>{const n={};t&&e.colorSchemes&&"function"==typeof e.getColorSchemeSelector&&Object.entries(e.colorSchemes).forEach((([t,r])=>{const o=e.getColorSchemeSelector(t);o.startsWith("@")?n[o]={":root":{colorScheme:r.palette?.mode}}:n[o.replace(/\s*&/,"")]={colorScheme:r.palette?.mode}}));let r={html:Cd(e,t),"*, *::before, *::after":{boxSizing:"inherit"},"strong, b":{fontWeight:e.typography.fontWeightBold},body:{margin:0,...Ed(e),"&::backdrop":{backgroundColor:(e.vars||e).palette.background.default}},...n};const o=e.components?.MuiCssBaseline?.styleOverrides;return o&&(r=[r,o]),r},Pd="mui-ecs",Td=qa(xd?({theme:e,enableColorScheme:t})=>Ad(e,t):({theme:e})=>(e=>{const t=Ad(e,!1),n=Array.isArray(t)?t[0]:t;return!e.vars&&n&&(n.html[`:root:has(${Pd})`]={colorScheme:e.palette.mode}),e.colorSchemes&&Object.entries(e.colorSchemes).forEach((([t,r])=>{const o=e.getColorSchemeSelector(t);o.startsWith("@")?n[o]={[`:root:not(:has(.${Pd}))`]:{colorScheme:r.palette?.mode}}:n[o.replace(/\s*&/,"")]={[`&:not(:has(.${Pd}))`]:{colorScheme:r.palette?.mode}}})),t})(e)),_d={textAlign:"center",fontSize:"clamp(1rem, 2vw, 1.25rem)"},Rd=sa({typography:{h1:Object.assign(Object.assign({},_d),{fontWeight:600,fontSize:"clamp(1.5rem, 2.5vw, 3rem)"}),h4:Object.assign(Object.assign({},_d),{fontWeight:600,fontSize:"clamp(1.5rem, 2.5vw, 3rem)"}),h5:Object.assign(Object.assign({},_d),{fontWeight:500,fontSize:"clamp(1.25rem, 2.2vw, 1.75rem)",marginBottom:"1rem",color:"var(--color-background-paper-secondary)"}),h6:Object.assign(Object.assign({},_d),{fontWeight:500,color:"var(--color-background-paper-primary)"})},components:{MuiPaper:{styleOverrides:{root:{borderRadius:"1rem",padding:"1.5rem"}}},MuiTypography:{styleOverrides:{h6:{"@media (max-width:400px)":{textAlign:"left"}}}}}});s.createRoot(document.getElementById("root")).render((0,a.jsx)(i.StrictMode,{children:(0,a.jsxs)((function({theme:e,...t}){const n=i.useMemo((()=>{if("function"==typeof e)return e;const t=ca in e?e[ca]:e;return"colorSchemes"in t?null:"vars"in t?e:{...e,vars:null}}),[e]);return n?(0,a.jsx)(id,{theme:n,...t}):(0,a.jsx)(wd,{theme:e,...t})}),{theme:Rd,children:[(0,a.jsx)((function(e){const t=ya({props:e,name:"MuiCssBaseline"}),{children:n,enableColorScheme:r=!1}=t;return(0,a.jsxs)(i.Fragment,{children:[xd&&(0,a.jsx)(Td,{enableColorScheme:r}),!xd&&!r&&(0,a.jsx)("span",{className:Pd,style:{display:"none"}}),n]})}),{}),(0,a.jsx)((()=>(0,a.jsx)(jc,{sx:{width:"100%"},children:(0,a.jsx)(Mc,{})})),{})]})}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,